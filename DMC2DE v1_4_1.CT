<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="42">
  <CheatEntries>
    <CheatEntry>
      <ID>143</ID>
      <Description>"----------------------------------------"</Description>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>1052</ID>
      <Description>"DMC2DE Simple Launcher v1.4"</Description>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>213</ID>
      <Description>"----------------------------------------"</Description>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>162</ID>
      <Description>"Select the character you are playing as below:"</Description>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>1109</ID>
      <Description>"(Selecting a character shows advanced options)"</Description>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>161</ID>
      <Description>"----------------------------------------"</Description>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>1348</ID>
      <Description>"(Universal) Falling Speed Modifier"</Description>
      <Options moHideChildren="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+241AFE)
label(returnhere)
label(originalcode)
label(exit)
alloc(gravMul,64)
define(CurrentSword,dmc2.exe+158A80F)
registersymbol(gravMul)
gravMul:
dd (float)0.98

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
//check if player's vertical speed is negative
cmp dword ptr [dmc2.exe+158A354], 0
jle mod
movss [rdi+24],xmm2
jmp returnhere

merciless:
mulss xmm2,[gravMul]
jmp dtchk

vendetta:
divss xmm2,[gravMul]
jmp dtchk

mod:
cmp [CurrentSword], 2
je vendetta
cmp [CurrentSword], 1
je merciless
mulss xmm2, [gravMul]
jmp dtchk

dtchk:
cmp byte ptr [dmc2.exe+158A848], 1
je dtMod
movss [rdi+24],xmm2
jmp returnhere

dtMod:
mulss xmm2, [gravMul]
mulss xmm2, [gravMul]
movss [rdi+24],xmm2
jmp returnhere

originalcode:
movss [rdi+24],xmm2

exit:
jmp returnhere

"dmc2.exe"+241AFE:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(gravMul)
"dmc2.exe"+241AFE:
movss [rdi+24],xmm2
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>1647</ID>
          <Description>"Gravity Multiplier (Value &lt; 1 = Slower)"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Float</VariableType>
          <Address>gravMul</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>1168</ID>
      <Description>"Dante"</Description>
      <Options moHideChildren="1" moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>1205</ID>
          <Description>"Fine Tuning - Advanced Users Only"</Description>
          <Options moHideChildren="1" moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>1206</ID>
              <Description>"Damage Dealt/Taken Modifier"</Description>
              <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,3096,"dmc2.exe"+5431B)
alloc(damagemult,64)
alloc(enemydamagemult,64)
alloc(muststylethresh,64)
alloc(enemydeathfixer,64)
alloc(bayoinstakilltoggle,64)
alloc(incomingdamage,64)
alloc(weapondamagemult,64)
alloc(jankCancelTimer,64)
alloc(allowJankCancel,64)
alloc(jankCancelSaveInertia,64)
define(CurrentSword,dmc2.exe+158A80F)
registersymbol(weapondamagemult)
weapondamagemult:
dd (float)1.0
merciless_weapondamagemult:
dd (float)0.85
vendetta_weapondamagemult:
dd (float)1.2
label(returnhere)
label(originalcode)
label(exit)
label(enemycase)
label(bayohealth)
label(saveplayer)
label(bayohealthfailcheck)
registersymbol(damagemult)
registersymbol(enemydamagemult)
registersymbol(muststylethresh)
registersymbol(bayoinstakilltoggle)
registersymbol(incomingdamage)
registersymbol(jankCancelTimer)
registersymbol(allowJankCancel)
registersymbol(jankCancelSaveInertia)
jankCancelSaveInertia:
dd (int)0

allowJankCancel:
dd (int)0

jankCancelTimer:
dd (int)0

damagemult:
dd (float)3.0

enemydamagemult:
dd (float)0.85

enemydeathfixer:
dd (float)1.0

bayoinstakilltoggle:
dd (int)1

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
//before we do ANYTHING, check if this is applying damage and not healing
cmp si, 0
jnle originalcode //jump to original code if this is healing something
//overrides go here
//test if the target's health is the player's health
push ebx
mov ebx,[rdi+00000140]
cmp ebx, ["dmc2.exe"+158a470]
pop ebx
jne enemycase //jump to enemy damage case if values don't match
//prepare ecx for float mult
push eax
xor eax, eax //clear eax
neg si
mov ax, si //move incoming damage to cx register
cvtsi2ss xmm0, eax //convert incoming damage to float
mulss xmm0, [damagemult] //multiply incoming damage by player damage modifier
cvttss2si eax, xmm0 //convert to int again
neg eax
mov si, ax
pop eax
cmp [bayoinstakilltoggle], 1 //survive with 1 hp if health &gt; 1 when taking lethal damage
je bayohealth
add ax, si //continue with original code
mov [rdi+00000140],ax
jmp exit

enemycase:
//prime JC timer
mov [jankCancelTimer],7
push ebx
mov ebx,[dmc2.exe+158A968]
cmp ebx, [muststylethresh]
pop ebx
jnge exit //ignore damage dealt if player has fewer than specified style pts
//apply outgoing damage modifiers
cmp eax, F //fixes enemies not dying if outgoing damage &lt; 1.0
jle enemyoverride
push eax
xor eax, eax //clear eax
neg si
mov ax, si //move incoming damage to ax register
cvtsi2ss xmm0, eax //convert incoming damage to float
mulss xmm0, [enemydamagemult] //multiply incoming damage by player damage modifier
cmp byte ptr [CurrentSword],00
je rebellionDamage
//Merciless
cmp byte ptr [CurrentSword],01
je mercilessDamage
//Vendetta
cmp byte ptr [CurrentSword],02
je vendettaDamage
cvttss2si eax, xmm0 //convert to int again
neg eax
mov si, ax
pop eax
add ax, si
mov [rdi+00000140],ax
jmp exit

rebellionDamage:
mulss xmm0, [weapondamagemult]
jmp convertFloatToInt

mercilessDamage:
mulss xmm0, [merciless_weapondamagemult]
jmp convertFloatToInt

vendettaDamage:
mulss xmm0, [vendetta_weapondamagemult]
jmp convertFloatToInt

convertFloatToInt:
cvttss2si eax, xmm0 //convert to int again
neg eax
mov si, ax
pop eax
add ax, si
mov [rdi+00000140],ax
jmp exit

enemyoverride:
push eax
xor eax, eax //clear eax
neg si
mov ax, si //move incoming damage to ax register
cvtsi2ss xmm0, eax //convert incoming damage to float
mulss xmm0, [enemydeathfixer] //multiply incoming damage by player damage modifier
cvttss2si eax, xmm0 //convert to int again
neg eax
mov si, ax
pop eax
add ax, si
mov [rdi+00000140],ax
jmp exit

bayohealth:
push ebx
xor ebx, ebx
mov ebx, eax
add bx, si
cmp bx, ["dmc2.exe"+158a470] //checks if any damage is occurring
jge bayohealthfailcheck
mov [incomingdamage], bx
cmp bx, 1 //checks if incoming damage &gt;= player's health
pop ebx
//mov [incomingdamage], 776
jnle originalcode
push ebx
xor ebx, ebx
mov ebx, ["dmc2.exe"+158a470]
cmp bx, 1 //check if player's health &gt; 1
pop ebx
jg saveplayer
jmp originalcode

saveplayer:
mov [incomingdamage], 5
mov [rdi+00000140], 1 //sets player's health to 1
jmp exit

bayohealthfailcheck:
pop ebx
jmp originalcode

originalcode:
add ax, si
mov [rdi+00000140],ax
jmp exit

exit:
cmp [jankCancelTimer],7
je jankCancelWindow
jmp returnhere

jankCancelWindow:
cmp byte ptr [dmc2.exe+161BEFC],1
je initJankCancel
//cmp [dmc2.exe+158A354],0
//jne allowJankCancel
//cmp dword ptr [dmc2.exe+158A71C],0x0000011D
//je allowJankCancel
mov [jankCancelTimer],0
mov [allowJankCancel],0
jmp returnhere

initJankCancel:
mov [allowJankCancel],1
mov [jankCancelTimer],0xFF
cmp byte ptr [dmc2.exe+158A872],0
jne refreshJumpForJC
jmp returnhere

refreshJumpForJC:
mov byte ptr [dmc2.exe+158A872],2
jmp returnhere

"dmc2.exe"+5431B:
jmp newmem
nop 5
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(damagemult)
dealloc(muststylethresh)
dealloc(incomingdamage)
dealloc(bayoinstakilltoggle)
dealloc(weapondamagemult)
unregistersymbol(damagemult)
unregistersymbol(enemydamagemult)
unregistersymbol(muststylethresh)
unregistersymbol(incomingdamage)
unregistersymbol(bayoinstakilltoggle)
unregistersymbol(weapondamagemult)
"dmc2.exe"+5431B:
add ax,si
mov [rdi+00000140],ax	
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1659</ID>
                  <Description>"Correct End-of-Mission Damage Tally"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+5435D)
label(returnhere)
label(originalcode)
label(exit)

newmem:
cmp [damagemult], 0
je nodamage
cvtsi2ss xmm0, esi //convert incoming damage to float
divss xmm0, [damagemult] //multiply incoming damage by player damage modifier
cvttss2si esi, xmm0 //convert to int again
jmp originalcode

nodamage:
mov esi,0
jmp originalcode

originalcode:
sub [rcx+000000C4],esi

exit:
jmp returnhere

"dmc2.exe"+5435D:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+5435D:
sub [rcx+000000C4],esi
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1649</ID>
                      <Description>"Damage Taken In Mission"</Description>
                      <VariableType>4 Bytes</VariableType>
                      <Address>dmc2.exe+1588BF4</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>1683</ID>
                  <Description>"Damage Settings"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1207</ID>
                      <Description>"Damage Taken Multiplier"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>damagemult</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1208</ID>
                      <Description>"Damage Dealt Multiplier"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>enemydamagemult</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1209</ID>
                      <Description>"Bayonetta Magic Pixel"</Description>
                      <DropDownList>0:Disable
1:Enable
</DropDownList>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>4 Bytes</VariableType>
                      <Address>bayoinstakilltoggle</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1210</ID>
                      <Description>"NOTE: Must Style Mode requires Damage Dealt/Taken Modifier!!"</Description>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>1211</ID>
                          <Description>"Must Style Mode (See Values)"</Description>
                          <DropDownList>0:Disable Must Style
1500:[D]on't Worry
5000:[C]ome On!
10000:[B]ingo!
15000:[A]re You Ready?
20000:[S]howtime!!
</DropDownList>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>2 Bytes</VariableType>
                          <Address>muststylethresh</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1212</ID>
                      <Description>"Weapon-Specific Multipliers"</Description>
                      <Options moHideChildren="1"/>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>1213</ID>
                          <Description>"Rebellion/Cutlaseer/Sparda Damage"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>weapondamagemult</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1214</ID>
                          <Description>"Merciless/Klyamoor Damage"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>weapondamagemult+4</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1215</ID>
                          <Description>"Vendetta / Zambak Damage"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>weapondamagemult+8</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1216</ID>
              <Description>"Adjustable Enemy Stun"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+5872C)
alloc(stunmult,64)
alloc(handgunnerf,64)
alloc(dtstunmult,64)
label(returnhere)
label(originalcode)
label(exit)
label(movespecificstun)
label(stunmodifier)
label(dtstunmodifier)
registersymbol(stunmult)
registersymbol(handgunnerf)
registersymbol(dtstunmult)
stunmult:
dd (float)1.15

handgunnerf:
dd (float)0.6

dtstunmult:
dd (float)3.0

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
//check if this is hitting the player
//dont think a scalar for that is needed, everything breaks armor in like 1 hit
push ebx
mov ebx, [rcx+00000146]
cmp ebx, [dmc2.exe+158A476]
pop ebx
je originalcode
//check if current moveID is firing handguns
//if true, jump to handgun nerf
push ebx
mov ebx, [dmc2.exe+158A71C]
cmp ebx, 0x00000300
je movespecificstun
cmp ebx, 0x00000202
je movespecificstun
pop ebx
//check if player is in DT
cmp byte ptr [dmc2.exe+158A848],1
je dtstunmodifier
cmp byte ptr [dmc2.exe+158A848],2
je dtstunmodifier
jmp stunmodifier

stunmodifier:
cvtsi2ss xmm0, eax
mulss xmm0, [stunmult]
cvttss2si eax, xmm0
sub [rcx+00000146],ax
jmp exit

dtstunmodifier:
cvtsi2ss xmm0, eax
mulss xmm0, [dtstunmult]
cvttss2si eax, xmm0
sub [rcx+00000146],ax
jmp exit

//allows user to set special stun multiplier for the handguns
movespecificstun:
pop ebx
cmp [handgunnerf],1.0
je stunmodifier
cvtsi2ss xmm0, eax
mulss xmm0, [handgunnerf]
cvttss2si eax, xmm0
sub [rcx+00000146],ax
jmp exit

//incoming stun is in RAX
//need to intercept it and apply scalar
//optional: ignore scalar if in handguns action?
originalcode:
sub [rcx+00000146],ax
jmp exit

exit:
jmp returnhere

"dmc2.exe"+5872C:
jmp newmem
nop 2
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(stunmult)
dealloc(handgunnerf)
dealloc(dtstunmult)
unregistersymbol(stunmult)
unregistersymbol(handgunnerf)
unregistersymbol(dtstunmult)
"dmc2.exe"+5872C:
sub [rcx+00000146],ax

</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1217</ID>
                  <Description>"Stun Multiplier"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>stunmult</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1218</ID>
                  <Description>"DT Stun Multiplier"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>dtstunmult</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1219</ID>
                  <Description>"OPTIONAL: Handgun Stun Multiplier"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>handgunnerf</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1220</ID>
              <Description>"Adjustable Hitlag"</Description>
              <Options moHideChildren="1"/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : dmc2.exe
  Version: 
  Date   : 2020-12-04
  Author : sssiy

  This script does blah blah blah
}

[ENABLE]
aobscanmodule(HitStopDanteAdjust,dmc2.exe,F3 0F 11 83 94 00 00 00 F3 0F 10 83 A0 01 00 00 0F 57 F6) // should be unique
alloc(adjustablehitstop,$1000,"dmc2.exe"+23DD53)
label(code)
label(return)

registersymbol(adjustablehitstop)
adjustablehitstop:
  dd (float)0.85

code:
  movss xmm0,[adjustablehitstop]
  movss [rbx+00000094],xmm0
  jmp return

HitStopDanteAdjust:
  jmp code
  nop
  nop
  nop
return:
registersymbol(HitStopDanteAdjust)

[DISABLE]
HitStopDanteAdjust:
  db F3 0F 11 83 94 00 00 00
unregistersymbol(HitStopDanteAdjust)
dealloc(adjustablehitstop)
unregistersymbol(adjustablehitstop)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1221</ID>
                  <Description>"On-Hit Speed Multiplier"</Description>
                  <VariableType>Float</VariableType>
                  <Address>adjustablehitstop</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1222</ID>
              <Description>"Adjustable Enemy DT Armor Bonus"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+A4B28)
alloc(enemyDTArmorBonus,64)
alloc(restorearmorconst,64)
label(returnhere)
label(originalcode)
label(exit)
registersymbol(enemyDTArmorBonus)

restorearmorconst:
dd (float)0.1

enemyDTArmorBonus:
dd (float)3

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cvtsi2ss xmm0, ecx
//Divide by 10 to restore enemy's original armor value
mulss xmm0, [restorearmorconst]
//Apply user's specified armor bonus
mulss xmm0, [enemyDTArmorBonus]
cvttss2si ecx, xmm0
mov [rbx+00000146],cx
//This second address is the value the enemy's armor resets to after recovering
mov [rbx+00000148],cx
jmp exit

originalcode:
mov [rbx+00000146],cx

exit:
jmp returnhere

"dmc2.exe"+A4B28:
jmp newmem
nop 2
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(enemyDTArmorBonus)
dealloc(restorearmorconst)
unregistersymbol(enemyDTArmorBonus)

"dmc2.exe"+A4B28:
mov [rbx+00000146],cx
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1223</ID>
                  <Description>"Enemy DT Armor Multiplier"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>enemyDTArmorBonus</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1224</ID>
              <Description>"[DANTE] USF"</Description>
              <Options moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+2D3C70) 
label(returnhere)
label(originalcode)
label(exit)
alloc(speedmultalloc,64)
alloc(movemultalloc,64)
alloc(weaponmultalloc,128)
alloc(dtMul,64)
define(CurrentSword,dmc2.exe+158A80F)
define(InputPressed02,dmc2.exe+7DD68C)
alloc(lastCharState,128,"dmc2.exe"+2D3C70)
registersymbol(lastCharState)
lastCharState:
dd (byte)0
speedActive_lastcharstate:
dd (byte)0
isSprinting_lastcharstate:
dd (byte)0
sprintSpeed_lastcharstate:
dd (float)2.0
lastAction_lastcharstate:
dd (dword)0
actiondb_lastcharstate:
dd (byte)0
registersymbol(weaponmultalloc)
weaponmultalloc:
dd (float)1.0
merciless_weaponmultalloc:
dd (float)1.15
vendetta_weaponmultalloc:
dd (float)0.85
vendetta_fullhouse:
dd (float)0.3
registersymbol(movemultalloc)
movemultalloc:
dd (float)1.0
sweepkick_movemultalloc:
dd (float)2.2
stinger_movemultalloc:
dd (float)1.6
fireworks_movemultalloc:
dd (float)2.0
shotgunflip_movemultalloc:
dd (float)2.0
shotgunsweep_movemultalloc:
dd (float)1.8
rocketlauncher_movemultalloc:
dd (float)1.4
mscharge_movemultalloc:
dd (float)1.6
gravedigger_movemultalloc:
dd (float)1.6
gravediggerkick_movemultalloc:
dd (float)1.6
overhead_movemultalloc:
dd (float)1.6
smashything1_movemultalloc:
dd (float)1.6
smashything2_movemultalloc:
dd (float)2.0
dtsplitter_movemultalloc:
dd (float)2.0
dttoggle_movemultalloc:
dd (float)4.0
airshotgun_movemultalloc:
dd (float)1.5
registersymbol(speedmultalloc)
speedmultalloc:
dd (float)1.2
dtspeedmultalloc:
dd (float)1.4
sdtspeedmultalloc:
dd (float)1.4
airdashmultalloc:
dd (float)6.0

registersymbol(dtMul)
dtMul:
dd (float)6.0

newmem:
cmp [rcx+08],1
je dantespeed
jmp originalcode

dantespeed:
//oh no
//cmp [jankCancelSaveInertia],1
//jne jankCancelSpeed
//move-specific speed mods
cmp byte ptr [dmc2.exe+158A71C],0x0000025
je danteFireworks
cmp byte ptr [dmc2.exe+158A71C],0x0000024
je danteShotgunFlip
cmp byte ptr [dmc2.exe+158A71C],0x0000314
je danteStinger
cmp byte ptr [dmc2.exe+158A71C],0x0000126
je danteShotgunSweep
cmp byte ptr [dmc2.exe+158A71C],0x000021E
je danteSweepKick
cmp dword ptr [dmc2.exe+158A71c],0x000030A
je danteRocketLauncher
cmp dword ptr [dmc2.exe+158A71c],0x0000109
je danteMSCharge
cmp dword ptr [dmc2.exe+158A71C],0x0010109
je weaponCheck
cmp dword ptr [dmc2.exe+158A71C],0x000010E
je danteGravedigger
cmp dword ptr [dmc2.exe+158A71C],0x000010F
je danteGravediggerKick
cmp dword ptr [dmc2.exe+158A71C],0x0000106
je danteOverhead
cmp dword ptr [dmc2.exe+158A71C],0x0000110
je danteSmashyThing1
cmp dword ptr [dmc2.exe+158A71C],0x0000111
je danteSmashyThing2
cmp dword ptr [dmc2.exe+158A71C],0x000011C
je danteDTSplitter
cmp dword ptr [dmc2.exe+158A71C],0x000011D
je danteDTSplitterFall
cmp dword ptr [dmc2.exe+158A71C],0x0000208
je danteAirShotgun
//cmp dword ptr [dmc2.exe+158A71C],0x0000105
//je danteSMGStart
cmp dword ptr [dmc2.exe+158A71C],0x0000205
je danteSMGStart
cmp dword ptr [dmc2.exe+158A71c],0x000021B
je danteSMGStart
cmp dword ptr [dmc2.exe+158A71C],0x0001021C
je danteFireworks
cmp dword ptr [dmc2.exe+158A71C],0x001021D
je danteFireworks
cmp dword ptr [dmc2.exe+158A718],0x17001717
je SDTActivation
cmp dword ptr [dmc2.exe+158A718],0x18001818
je SDTActivation
cmp dword ptr [dmc2.exe+158A718],0x16001616
je luciaDTButtonOK
cmp dword ptr [dmc2.exe+158A718],0x15001515
je luciaDTButtonOK
cmp dword ptr [dmc2.exe+158A718],0x19001919
je luciaDTButtonOK
//DT speed mods
cmp byte ptr [dmc2.exe+158A848],1
je dantedt
cmp byte ptr [dmc2.exe+158A848],2
je dantesdt
//Base speed mod
mulss xmm0,[speedmultalloc]
jmp weaponCheck

SDTDeactivate:
mov dword ptr [dmc2.exe+158A718],0x15001515
mov [dmc2.exe+158A848],1
jmp originalcode

SDTActivation:
mulss xmm0,[dtMul]
jmp originalcode

danteSMGStart:
mulss xmm0,[airshotgun_movemultalloc]
jmp originalcode

danteAirShotgun:
mulss xmm0,[airshotgun_movemultalloc]
jmp originalcode

luciaDTActivation:
cmp byte ptr [lastCharState], 0
je luciaDTCheckAir
cmp byte ptr [speedActive_lastcharstate], 1
je luciaDTCheckAir
cmp byte ptr [lastCharState], 0
jge luciaDTEnemyFuckery
jmp originalcode

luciaDTEnemyFuckery:
cmp dword ptr [dmc2.exe+158A71c], 0x0000001
je fixthisalready
jmp originalcode

fixthisalready:
cmp dword ptr [dmc2.exe+158A71c], 0x0000000
jne luciaDTCheckButton
jmp originalcode

luciaDTCheckButton:
cmp dword ptr [InputPressed02],0x000000C0
je originalcode
cmp dword ptr [InputPressed02],0x00000040
je originalcode
cmp dword ptr [InputPressed02],0x00000060
je originalcode
cmp dword ptr [InputPressed02],0x00000050
je originalcode
cmp dword ptr [InputPressed02],0x00000048
je originalcode
cmp dword ptr [InputPressed02],0x00000041
je originalcode
cmp dword ptr [InputPressed02],0x00000042
je originalcode
cmp dword ptr [InputPressed02],0x00000044
je originalcode
jmp luciaDTCheckAir

luciaDTCheckAir:
cmp byte ptr [dmc2.exe+158A870], 0
jne luciaDTButtonOK
cmp byte ptr [dmc2.exe+158A714], 2
je luciaDTButtonOK
cmp byte ptr [dmc2.exe+158A871], 0
jne luciaDTButtonOK
jmp originalcode

luciaDTButtonOK:
mov [speedActive_lastcharstate], 1
mulss xmm0,[dttoggle_movemultalloc]
jmp originalcode

danteDTSplitter:
mulss xmm0,[dtsplitter_movemultalloc]
jmp weaponCheck

danteDTSplitterFall:
cmp [allowFullHouse],1
je fullHouseSpeed
mulss xmm0,[dtsplitter_movemultalloc]
jmp weaponCheck

fullHouseSpeed:
mulss xmm0,[vendetta_fullhouse]
jmp weaponCheck

danteSmashyThing2:
mulss xmm0,[smashything2_movemultalloc]
jmp weaponCheck

danteSmashyThing1:
mulss xmm0,[smashything1_movemultalloc]
jmp weaponCheck

danteOverhead:
mulss xmm0,[overhead_movemultalloc]
jmp weaponCheck

danteGravediggerKick:
mulss xmm0,[gravediggerkick_movemultalloc]
jmp weaponCheck

danteGravedigger:
mulss xmm0,[gravedigger_movemultalloc]
jmp weaponCheck

danteMSCharge:
mulss xmm0,[mscharge_movemultalloc]
jmp weaponCheck

danteRocketLauncher:
mulss xmm0,[rocketlauncher_movemultalloc]
jmp weaponCheck

danteSweepKick:
mulss xmm0,[sweepkick_movemultalloc]
jmp weaponCheck

danteShotgunSweep:
mulss xmm0,[shotgunsweep_movemultalloc]
jmp weaponCheck

danteStinger:
cmp [airDashState], 1
je danteAirStinger
mulss xmm0,[stinger_movemultalloc]
jmp weaponCheck

danteStingerStart:
//cmp [airDashState], 1
//je danteAirStinger
jmp weaponCheck

danteAirStinger:
mov [airDashState], 2
mov [allowJankCancel],1
mov [jankCancelTimer],7
mulss xmm0, [airdashmultalloc]
jmp weaponCheck

danteShotgunFlip:
mulss xmm0,[shotgunflip_movemultalloc]
jmp weaponCheck

danteFireworks:
mulss xmm0,[fireworks_movemultalloc]
jmp weaponCheck

dantedt:
mulss xmm0,[dtspeedmultalloc]
cmp dword ptr [dmc2.exe+158A718],0x19001919
je luciaDTCheckAir
cmp dword ptr [dmc2.exe+158A718],0x15001515
je luciaDTCheckAir
mov [speedActive_lastcharstate],0
jmp weaponCheck
dantesdt:
mulss xmm0,[sdtspeedmultalloc]
jmp weaponCheck

weaponCheck:
//Sprint by holding RightThumbstick
cmp dword ptr [dmc2.exe+158A71C],0x00000001
je playerSprint
cmp byte ptr [CurrentSword],00
je rebellionSpeed
//Merciless
cmp byte ptr [CurrentSword],01
je mercilessSpeed
//Vendetta
cmp byte ptr [CurrentSword],02
je vendettaSpeed

playerSprint:
cmp dword ptr [InputPressed02],0x00000400
je executePlayerSprint
jmp originalcode

executePlayerSprint:
mulss xmm0,[sprintSpeed_lastcharstate]
jmp originalcode

rebellionSpeed:
mulss xmm0,[weaponmultalloc]
jmp originalcode

mercilessSpeed:
mulss xmm0,[merciless_weaponmultalloc]
jmp originalcode

vendettaSpeed:
mulss xmm0,[vendetta_weaponmultalloc]
jmp originalcode

originalcode:
push ecx
mov ecx, [lastCharState]
mov [actiondb_lastcharstate], ecx
mov ecx, [dmc2.exe+158A848]
mov [lastCharState], ecx
mov ecx, [dmc2.exe+158A71C]
mov [lastAction_lastcharstate], ecx
pop ecx
movss [rcx+00000094],xmm0
jmp returnhere

exit:
jmp returnhere

"dmc2.exe"+2D3C70:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
dealloc(newmem)
"dmc2.exe"+2D3C70:
movss [rcx+00000094],xmm0
//Alt: db F3 0F 11 81 94 00 00 00

dealloc(movemultalloc)
dealloc(speedmultalloc)
dealloc(weaponmultalloc)
dealloc(lastCharState)
unregistersymbol(lastCharState)
unregistersymbol(weaponmultalloc)
unregistersymbol(movemultalloc)
unregistersymbol(speedmultalloc)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1048</ID>
                  <Description>"No description"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Byte</VariableType>
                  <Address>lastcharstate+4</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1049</ID>
                  <Description>"No description"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Byte</VariableType>
                  <Address>lastcharstate+14</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>225</ID>
                  <Description>"Speed Mult"</Description>
                  <VariableType>Float</VariableType>
                  <Address>speedmultalloc</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>226</ID>
                  <Description>"DT Speed Mult"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>speedmultalloc+4</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>227</ID>
                  <Description>"SDT Speed Mult"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>speedmultalloc+8</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>230</ID>
                  <Description>"Move Speed Adjustments"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>229</ID>
                      <Description>"Sweep Kick"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+4</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>231</ID>
                      <Description>"Stinger"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+8</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>232</ID>
                      <Description>"Fireworks"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+C</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>233</ID>
                      <Description>"Shotgun Cartwheel"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+10</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>234</ID>
                      <Description>"Shotgun Sweep"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+14</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>235</ID>
                      <Description>"Rocket Launcher Shoot"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+18</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>236</ID>
                      <Description>"Million Stabs Charge"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+1C</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>237</ID>
                      <Description>"Gravedigger Slam"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+20</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>238</ID>
                      <Description>"Gravedigger Double Kick"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+24</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>239</ID>
                      <Description>"DT Combo Overtop"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+28</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>240</ID>
                      <Description>"Weird Smashy Thing Part 1"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+2C</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>241</ID>
                      <Description>"Weird Smashy Thing Part 2"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+30</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>242</ID>
                      <Description>"Helm Splitter Startup"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+34</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1047</ID>
                      <Description>"Air Raid Activation"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+38</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1305</ID>
                      <Description>"Air Shotgun"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+3C</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>244</ID>
                  <Description>"Weapon-Specific Modifiers"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>243</ID>
                      <Description>"Rebellion Speed Modifier"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>weaponmultalloc</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>245</ID>
                      <Description>"Merciless Speed Modifier"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>weaponmultalloc+4</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>246</ID>
                      <Description>"Vendetta Speed Modifier"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>weaponmultalloc+8</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1169</ID>
          <Description>"Settings"</Description>
          <Options moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>1170</ID>
              <Description>"Disable DT Cooldown (See values dropdown)"</Description>
              <DropDownList>30:Safe Disable
0:Aggressive Disable
</DropDownList>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>2 Bytes</VariableType>
              <Address>dmc2.exe+158A85E</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1171</ID>
              <Description>"DT Gain Multiplier"</Description>
              <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+588E0)
alloc(dtmultalloc,64)
label(returnhere)
label(originalcode)
label(exit)
registersymbol(dtmultalloc)
dtmultalloc:
dd (float)1.5

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push eax //prepare eax
xor eax,eax //clear eax
mov ax, r9w //move build dt to eax register
cvtsi2ss xmm0,eax //convert to float
mulss xmm0, [dtmultalloc] //multiply by dt multiplier specified in table
cvttss2si eax,xmm0 //convert back to int
//imul r9w,[dtmultalloc]
mov r9w, ax
add cx,r9w
pop eax
cmp cx,ax

originalcode:
add cx,r9w
cmp cx,ax

exit:
jmp returnhere

"dmc2.exe"+588E0:
jmp newmem
nop 2
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(dtmultalloc)
unregistersymbol(dtmultalloc)
"dmc2.exe"+588e0:
add cx,r9w
cmp cx,ax
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1172</ID>
                  <Description>"DT Gain Multiplier Value"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>dtmultalloc</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1173</ID>
              <Description>"Modern Style Loss System"</Description>
              <Options moHideChildren="1"/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//Reworks aspects of the Style system to match DMC3/4/5's system.
alloc(newmem,2048,"dmc2.exe"+5A4CF)
alloc(newmem02,2048,"dmc2.exe"+23206E)
alloc(stylelosshandler,2048,"dmc2.exe"+23DF64)
//
label(returnhere)
label(hitlossdone)
label(originalcode)
label(exit)
label(decaycomp)
label(removeStyleRating)
label(styletest)
label(setStyleRatingToA)
label(setStyleRatingToB)
label(setStyleRatingToC)
label(setStyleRatingToD)
label(resetStyleDecayTimer)
//
alloc(stylelosstimer,64)
alloc(xmholder,64)
alloc(onhitstylelossscalar,64)
alloc(styleptstoloseondecay,64)
//
registersymbol(stylelosstimer)
registersymbol(onhitstylelossscalar)
registersymbol(styleptstoloseondecay)
//
stylelosstimer:
dd (float)180
xmholder:
dd (float)0
onhitstylelossscalar:
dd (float)2.0 //default: lose half of your style points
//don't go below 1.0 or else you gain style for being hit

newmem: //Overrides the game's original starting timer for style decay.
//For some reason the game uses a float here.
movss [xmholder],xmm0
movss xmm0,[stylelosstimer]
movss [r8+00000634],xmm0
movss xmm0,[xmholder]
jmp exit
//
//
newmem02: //On-Hit Style Loss overrides
push eax
xor eax,eax
mov eax, ["dmc2.exe"+158A968] //places player's style points in eax
cvtsi2ss xmm0, eax
divss xmm0, [onhitstylelossscalar] //Divides style points by scalar specified in CT
cvttss2si eax,xmm0
cmp eax, 5DC
jle hlpRemoveStyle
mov ["dmc2.exe"+158A968], eax
pop eax
//Reset style decay timer to what's specified in CT
movss [xmholder],xmm0
movss xmm0,[stylelosstimer]
movss [dmc2.exe+158A964],xmm0
movss xmm0,[xmholder]
jmp hitlossdone
//
//
stylelosshandler: //Custom behavior when the style loss timer runs out
//Remove all style pts if timer expires on D rank
push eax
xor eax, eax
//mov eax, [rbx+00000638]
//mov [styleptstoloseondecay], eax
mov ax, 4E20
//mov [styleptstoloseondecay], 20000
//Modern DMC system from here, lose 1 rank every time timer hits 0
cmp dword ["dmc2.exe"+158A968], eax
jge setStyleRatingToA
mov ax, 3A98
cmp dword ["dmc2.exe"+158A968], eax
jge setStyleRatingToB
mov ax, 2710
cmp dword ["dmc2.exe"+158A968], eax
jge setStyleRatingToC
mov ax, 1388
cmp dword ["dmc2.exe"+158A968], eax
jge setStyleRatingToD
pop eax
jmp removeStyleRating
//done
jmp decaycomp
//
//
resetStyleDecayTimer:
movss [xmholder],xmm0
movss xmm0,[stylelosstimer]
movss [dmc2.exe+158A964],xmm0
movss xmm0,[xmholder]
ret
//
//
hlpRemoveStyle:
pop eax
mov ["dmc2.exe"+158A968], 0
jmp hitlossdone
//
//
removeStyleRating: //helper function to reset player's style using vanilla call
mov [dmc2.exe+158A968], 0
jmp decaycomp
//
//
setStyleRatingToA: //S returns to A rank
pop eax
mov [styleptstoloseondecay], 10F2C
mov dword [dmc2.exe+158A968], 3A98
movss [xmholder],xmm0
movss xmm0,[stylelosstimer]
movss [dmc2.exe+158A964],xmm0
movss xmm0,[xmholder]
jmp decaycomp
//
//
setStyleRatingToB: //S returns to A rank
pop eax
mov [styleptstoloseondecay], 4
mov dword [dmc2.exe+158A968], 2710
movss [xmholder],xmm0
movss xmm0,[stylelosstimer]
movss [dmc2.exe+158A964],xmm0
movss xmm0,[xmholder]
jmp decaycomp
//
//
setStyleRatingToC: //S returns to A rank
pop eax
mov [styleptstoloseondecay], 3
mov dword [dmc2.exe+158A968], 1388
movss [xmholder],xmm0
movss xmm0,[stylelosstimer]
movss [dmc2.exe+158A964],xmm0
movss xmm0,[xmholder]
jmp decaycomp
//
//
setStyleRatingToD: //S returns to A rank
pop eax
mov [styleptstoloseondecay], 2
mov dword [dmc2.exe+158A968], 5DC
movss [xmholder],xmm0
movss xmm0,[stylelosstimer]
movss [dmc2.exe+158A964],xmm0
movss xmm0,[xmholder]
jmp decaycomp
//
//
styletest:
mov [rbx+00000638],esi
//
//
originalcode: //original timer code
mov [r8+00000634],42DC0000 //default timer value is 110.0
//
//
exit:
jmp returnhere
//
//
"dmc2.exe"+5A4CF: //style point timer
jmp newmem
nop 6
returnhere:
//
//
"dmc2.exe"+23206E: //on-hit style loss
jmp newmem02
nop 5
hitlossdone:
//
//
"dmc2.exe"+23DF64: //called when style point timer empties
//mov [rbx+00000638],esi
jmp stylelosshandler
nop
decaycomp:
//
//
[DISABLE]
dealloc(newmem)
dealloc(newmem02)
dealloc(stylelosshandler)
dealloc(stylelosstimer)
dealloc(xmholder)
dealloc(onhitstylelossscalar)
dealloc(styleptstoloseondecay)
unregistersymbol(stylelosstimer)
unregistersymbol(onhitstylelossscalar)
unregistersymbol(styleptstoloseondecay)
"dmc2.exe"+5a4cf:
mov [r8+00000634],42DC0000
"dmc2.exe"+23206E:
mov [rbx+00000634],3A83126F
"dmc2.exe"+23DF64:
mov [rbx+00000638],esi
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1174</ID>
                  <Description>"Time Before a Style Rank Is Lost"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>stylelosstimer</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1175</ID>
                  <Description>"Divide Style Points by (value) When Hit"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>onhitstylelossscalar</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1176</ID>
                  <Description>"DEBUG: Last style rank when timer hit 0"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>2 Bytes</VariableType>
                  <Address>styleptstoloseondecay</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1177</ID>
                  <Description>"DEBUG: Time Remaining in Combo"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>dmc2.exe+158A964</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1178</ID>
                  <Description>"DEBUG: Style Pts HUD Time"</Description>
                  <VariableType>2 Bytes</VariableType>
                  <Address>dmc2.exe+158A966</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1179</ID>
              <Description>"Style Point Gain Multiplier"</Description>
              <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+5A4BC)
label(returnhere)
label(originalcode)
label(exit)
alloc(styleptsscalar,64)
registersymbol(styleptsscalar)
styleptsscalar:
dd (float)1.5

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
mulss xmm1,[styleptsscalar]
cvttss2si eax,xmm1
test r10d,r10d

exit:
jmp returnhere

"dmc2.exe"+5A4BC:
jmp newmem
nop 2
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(styleptsscalar)
"dmc2.exe"+5a4bc:
cvttss2si eax,xmm1
test r10d,r10d
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1180</ID>
                  <Description>"Style Points Gain Multiplier Value"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>styleptsscalar</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1181</ID>
              <Description>"Loadout Hotswapper - Use D-Pad and Right Trigger"</Description>
              <Options moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>//Thank you Siyan!
[ENABLE]
aobscanmodule(styleswitchinglol,dmc2.exe,C0 48 89 41 08 48 89 41 10) // should be unique
alloc(newmem,$1000,"dmc2.exe"+19372)
alloc(lastUsedInput,64)
alloc(regAfterBitmask,64)
alloc(allowDodgeOffset,64)
alloc(dodgeOffsetContinueOK,64)
alloc(useInstantSDT,64)
alloc(setSwordRotBind,64)
define(CurrentCharacter,dmc2.exe+1588B31)
label(rotateSword)
label(returnhere)
label(finished)
label(testForHold)
label(amuletTestForHold)
label(checkAmuletToRotate)
label(rotateLeftAmulet)
label(rotateRightAmulet)
label(rotateTopAmulet)
label(setRightAmuletToQuick)
label(setLeftAmuletToHealing)
label(setLeftAmuletToOffence)
label(setTopAmuletToFrost)
label(setTopAmuletToElectro)
label(cycleToMerciless)
label(cycleToVendetta)
label(cycleToRebellion)
label(L3SwordRotation)
define(inputpressed,dmc2.exe+7DD68D)
define(CurrentSword,dmc2.exe+158A80F)
registersymbol(inputpressed)
registersymbol(lastUsedInput)
registersymbol(regAfterBitmask)
registersymbol(allowDodgeOffset)
registersymbol(dodgeOffsetContinueOK)
registersymbol(useInstantSDT)
registersymbol(setSwordRotBind)
useInstantSDT:
dw (int)0

const_useInstantSDT:
dd (float)1.2

restore_useInstantSDT:
db (int)0

allowDodgeOffset:
db (int)0

lastUsedInput:
dw (int)0

setSwordRotBind:
db (int)0

//Check to see if current button input is Right Trigger (Disable Lock-on)
newmem:
//check if an SDT cancel was done last cycle
cmp [restore_useInstantSDT],1
je restoreDT
//Re-do the bitmask for checking D-Pad inputs
push eax
mov eax, [inputpressed]
and eax, 0xFFFFFFF0
mov [regAfterBitmask], eax
pop eax
cmp byte [regAfterBitmask],0x80
je amuletTestForHold
cmp byte [regAfterBitmask],0x10
je amuletTestForHold
cmp byte [regAfterBitmask],0x20
je amuletTestForHold
cmp byte [regAfterBitmask],0x40
je sdtTestForHold
//dodge offset needs raw value
push eax
mov eax, [inputpressed-1]
and eax, 0x000000FF
mov [regAfterBitmask], eax
pop eax
//Dodge Inputs
cmp byte [regAfterBitmask],0x20
je testForCharacter
cmp byte [regAfterBitmask],0x28
je testForCharacter
//Dodge Offset Inputs (Attack + Dodge [LOCK-ON OK])
cmp byte [regAfterBitmask],0x30
je testForCharacter
cmp byte [regAfterBitmask],0x38
je testForCharacter
//jank cancel inputs
cmp byte [regAfterBitmask],0x40
je testDupeInputsJC
cmp byte [regAfterBitmask],0x48
je testDupeInputsJC
cmp byte [regAfterBitmask],0x50
je testDupeInputsJC
cmp byte [regAfterBitmask],0x58
je testDupeInputsJC
//L3 Weapon Swap Rebind
cmp byte [setSwordRotBind],0x1
je L3SwordRotation
//Placing original bind functionality afterwards lets us skip checking RT
//Apply a bitmask to the currently held inputs to get only the first value
push eax
mov eax, [inputpressed-1]
and eax, 0x0000000F
mov [regAfterBitmask], eax
pop eax
//Jump if any combination of the triggers/bumpers also includes RT
cmp byte [regAfterBitmask],02
je testForHold
cmp byte [regAfterBitmask],06
je testForHold
cmp byte [regAfterBitmask],0x0A
je testForHold
cmp byte [regAfterBitmask],0x0F
je testForHold
cmp byte [regAfterBitmask],0x0E
je testForHold
cmp byte [regAfterBitmask],03
je testForHold
cmp byte [regAfterBitmask],07
je testForHold
jmp returnhere

L3SwordRotation:
//Apply a bitmask to the currently held inputs to get only the first value
push eax
mov eax, [inputpressed-1]
and eax, 0x00000F00
mov [regAfterBitmask], eax
pop eax
cmp [regAfterBitmask],0x200
je testForHold
jmp returnhere

//Duplicate code from sword switcher
amuletTestForHold:
push eax
mov eax, [lastUsedInput+1]
and eax, 0xFFFFFFF0
mov [regAfterBitmask], eax
pop eax
//check for duplicate d-pad inputs
cmp [regAfterBitmask],0x80
je returnhere
cmp [regAfterBitmask],0x10
je returnhere
cmp [regAfterBitmask],0x20
je returnhere
cmp [regAfterBitmask],0x40
je returnhere
jmp checkAmuletToRotate

checkAmuletToRotate:
//This is awful. Clean it up later?
//Re-do the bitmask for checking D-Pad inputs
push eax
mov eax, [inputpressed]
and eax, 0xFFFFFFF0
mov [regAfterBitmask], eax
pop eax
cmp byte [regAfterBitmask],0x80
je rotateLeftAmulet
cmp byte [regAfterBitmask],0x10
je rotateTopAmulet
cmp byte [regAfterBitmask],0x20
je rotateRightAmulet
jmp returnhere

//Rotates right amulet between Quick and Aerial hearts.
//Aqua Heart is ignored for obvious reasons.
rotateRightAmulet:
cmp byte ptr [dmc2.exe+158A849], 2
je setRightAmuletToQuick
mov byte ptr [dmc2.exe+158A849], 2
jmp returnhere

setRightAmuletToQuick:
mov byte ptr [dmc2.exe+158A849], 3
jmp returnhere

//Rotates left amulet between Chrono/Healing/Offence.
//Maybe add option to ignore Healing Heart?
rotateLeftAmulet:
cmp byte ptr [dmc2.exe+158A84B], 1
je setLeftAmuletToHealing
cmp byte ptr [dmc2.exe+158A84B], 2
je setLeftAmuletToOffence
mov byte ptr [dmc2.exe+158A84B], 1
jmp returnhere

setLeftAmuletToHealing:
mov byte ptr [dmc2.exe+158A84B], 2
jmp returnhere

setLeftAmuletToOffence:
mov byte ptr [dmc2.exe+158A84B], 3
jmp returnhere

//Rotates top amulet between Flame/Frost/Electro.
rotateTopAmulet:
cmp byte ptr [dmc2.exe+158A84A], 1
je setTopAmuletToFrost
cmp byte ptr [dmc2.exe+158A84A], 2
je setTopAmuletToElectro
mov byte ptr [dmc2.exe+158A84A], 1
jmp returnhere

setTopAmuletToFrost:
mov byte ptr [dmc2.exe+158A84A], 2
jmp returnhere

setTopAmuletToElectro:
mov byte ptr [dmc2.exe+158A84A], 3
jmp returnhere

//Blocks swords rotating by holding button
testForHold:
//Apply a bitmask to the currently held inputs to get only the first value
push eax
mov eax, [lastUsedInput]
and eax, 0x0000000F
mov [regAfterBitmask], eax
pop eax
//messy shit
//Check for duplicate RT inputs
cmp [regAfterBitmask],0x0F
je returnhere
cmp [regAfterBitmask],06
je returnhere
cmp [regAfterBitmask],0x0A
je returnhere
cmp [regAfterBitmask],0x0E
je returnhere
cmp [regAfterBitmask],03
je returnhere
cmp [regAfterBitmask],02
je returnhere
cmp [regAfterBitmask],07
je returnhere
push eax
mov eax, [lastUsedInput]
and eax, 0x00000F00
mov [regAfterBitmask], eax
pop eax
cmp [regAfterBitmask],0x200
je returnhere
//If no duped inputs, rotate sword
jmp rotateSword

//Rotates sword to next value
rotateSword:
//Ignore this section if playing as Trish
//This avoids a crash if you try to swap her sword
cmp byte ptr [CurrentCharacter], 0x02
je returnhere
//Swap Swords
cmp byte ptr [CurrentSword],00
je cycleToMerciless
cmp byte ptr [CurrentSword],01
je cycleToVendetta
cmp byte ptr [CurrentSword],02
je cycleToRebellion
jmp returnhere

cycleToMerciless:
mov byte ptr [CurrentSword],01
jmp returnhere

cycleToVendetta:
mov byte ptr [CurrentSword],02
jmp returnhere

cycleToRebellion:
mov byte ptr [CurrentSword],00
jmp returnhere

testForCharacter:
//check if dodge offset is enabled
cmp [allowDodgeOffset], 1
jne returnhere
//check if current character is Lucia, otherwise end
//cmp [dmc2.exe+1588B30],0100
//je testForHold_DodgeOffset
//cmp [dmc2.exe+1588B30],0501
//je testForHold_DodgeOffset
//cmp [dmc2.exe+1588B30],0301
//je testForHold_DodgeOffset
//cmp [dmc2.exe+1588B30],0701
//je testForHold_DodgeOffset
jmp testForHold_DodgeOffset

testForHold_DodgeOffset:
//Apply a bitmask to the currently held inputs to get only the first value
push eax
mov eax, [lastUsedInput]
and eax, 0x0000000F
mov [regAfterBitmask], eax
pop eax
//messy shit
//Check for duplicate inputs
//Dodge Offset Input (Attack + Dodge)
cmp byte [regAfterBitmask],0x20
je returnhere
//Free Dodge
cmp byte [regAfterBitmask],0x28
je returnhere
cmp byte [regAfterBitmask],0x30
je returnhere
cmp byte [regAfterBitmask],0x38
je returnhere
jmp tryFreeDodge

tryFreeDodge:
//god i hope the last action ID is updated by now
//lol of course it isnt
//disable dodge offset when in DT
cmp byte ptr [dmc2.exe+158A848],0x1
je returnhere
jmp executeFreeDodge

executeFreeDodge:
mov [dodgeOffsetContinueOK], 0
mov [dmc2.exe+158A714],0x0
//dodge offset needs raw value
push ebx
mov ebx, [inputpressed-1]
and ebx, 0x000000FF
mov [regAfterBitmask], ebx
pop ebx
//Dodge Offset Input (Attack + Dodge)
cmp byte [regAfterBitmask],0x30
je executeDodgeOffset
cmp byte [regAfterBitmask],0x38
je executeDodgeOffset
jmp returnhere

executeDodgeOffset:
mov [dodgeOffsetContinueOK], 0x1
jmp returnhere

testDupeInputsJC:
//Apply a bitmask to the currently held inputs to get only the first value
push eax
mov eax, [lastUsedInput]
and eax, 0x0000000F
mov [regAfterBitmask], eax
pop eax
//messy shit
//Check for duplicate inputs
//JC Input is just jump
cmp byte [regAfterBitmask],0x40
je returnhere
//Free Dodge
cmp byte [regAfterBitmask],0x48
je returnhere
cmp byte [regAfterBitmask],0x49
je returnhere
//cmp byte [regAfterBitmask],0x50
//je returnhere
//cmp byte [regAfterBitmask],0x58
//je returnhere
jmp tryJankCancel

tryJankCancel:
//disable jank cancel when in DT
//might not need this since there's always an action tied to jump
cmp [allowJankCancel],1
jne returnhere
//Disable JCs in DT/SDT because fuck
cmp byte ptr [dmc2.exe+158A848],0x0
jne returnhere
jmp executeJankCancel

executeJankCancel:
//cmp byte ptr [dmc2.exe+158A354],1
//jne returnhere
mov [dmc2.exe+158A872],1
//mov [dmc2.exe+158A3C4],999.0
mov [dmc2.exe+158A714],0x2
mov [jankCancelSaveInertia],1
mov [jankCancelTimer],0
mov [allowJankCancel],0
jmp returnhere

returnhere:
  push eax
  mov eax, [inputpressed-1]
  mov [lastUsedInput], eax
  pop eax
  mov [rcx+08],rax
  mov [rcx+10],rax
  //decrement the jank cancel timer by 1
  jmp jankCancelTimerHandler
  //jmp finished

jankCancelTimerHandler:
cmp [jankCancelTimer],0
jg decrementJCTimer
cmp byte ptr [dmc2.exe+158A872],2
je removeJCJump
mov [allowJankCancel],0
mov [jankCancelTimer],0
jmp finished

removeJCJump:
mov byte ptr [dmc2.exe+158A872],0
mov [allowJankCancel],0
mov [jankCancelTimer],0
jmp finished

decrementJCTimer:
sub [jankCancelTimer],1
jmp finished

//Duplicate code from sword switcher
sdtTestForHold:
push eax
mov eax, [lastUsedInput+1]
and eax, 0xFFFFFFF0
mov [regAfterBitmask], eax
pop eax
//check for duplicate d-pad inputs
cmp [regAfterBitmask],0x40
je returnhere
jmp tryInstantSDT

tryInstantSDT:
cmp byte ptr [dmc2.exe+158A848],2
je executeSDTCancel
jmp returnhere

executeSDT:
mov [useInstantSDT],1
call dmc2.exe+230FB0
jmp returnhere

executeSDTCancel:
push eax
mov eax, [dmc2.exe+158A84E]
mov [dmc2.exe+158A84E],0
//slightly boost DT when cancelling SDT to mimic 5's Quadruple S
//cvtsi2ss xmm0,eax
//mulss xmm0,[const_useInstantSDT]
//cvttss2si eax,xmm0
cmp eax,0x12C0
jge quadSPrep
mov [useInstantSDT],eax
mov [restore_useInstantSDT],1
//mov [dmc2.exe+158A84E],eax
pop eax
jmp returnhere

quadSPrep:
mov [useInstantSDT],0x17A0
mov [restore_useInstantSDT],1
pop eax
jmp returnhere

restoreDT:
mov [restore_useInstantSDT],0
push eax
mov eax, [useInstantSDT]
mov [dmc2.exe+158A84E],eax
pop eax
//mov [useInstantSDT],0
jmp newmem

styleswitchinglol+01:
jmp newmem
nop
nop
nop
finished:
registersymbol(styleswitchinglol)

[DISABLE]
dealloc(newmem)
dealloc(lastUsedInput)
dealloc(regAfterBitmask)
dealloc(allowDodgeOffset)
dealloc(dodgeOffsetMoveID)
dealloc(setSwordRotBind)
unregistersymbol(lastUsedInput)
unregistersymbol(styleswitchinglol)
unregistersymbol(regAfterBitmask)
unregistersymbol(allowDodgeOffset)
unregistersymbol(dodgeOffsetContinueOK)
unregistersymbol(inputpressed)
unregistersymbol(setSwordRotBind)
styleswitchinglol+01:
  db 48 89 41 08 48 89 41 10

{
// ORIGINAL CODE - INJECTION POINT: "dmc2.exe"+19372

"dmc2.exe"+19367: CC                    -  int 3 
"dmc2.exe"+19368: CC                    -  int 3 
"dmc2.exe"+19369: CC                    -  int 3 
"dmc2.exe"+1936A: CC                    -  int 3 
"dmc2.exe"+1936B: CC                    -  int 3 
"dmc2.exe"+1936C: CC                    -  int 3 
"dmc2.exe"+1936D: CC                    -  int 3 
"dmc2.exe"+1936E: CC                    -  int 3 
"dmc2.exe"+1936F: CC                    -  int 3 
"dmc2.exe"+19370: 33 C0                 -  xor eax,eax
// ---------- INJECTING HERE ----------
"dmc2.exe"+19372: 48 89 41 08           -  mov [rcx+08],rax
"dmc2.exe"+19376: 48 89 41 10           -  mov [rcx+10],rax
// ---------- DONE INJECTING  ----------
"dmc2.exe"+1937A: 48 89 41 18           -  mov [rcx+18],rax
"dmc2.exe"+1937E: 48 89 41 20           -  mov [rcx+20],rax
"dmc2.exe"+19382: 48 89 41 28           -  mov [rcx+28],rax
"dmc2.exe"+19386: 48 89 41 30           -  mov [rcx+30],rax
"dmc2.exe"+1938A: C3                    -  ret 
"dmc2.exe"+1938B: CC                    -  int 3 
"dmc2.exe"+1938C: CC                    -  int 3 
"dmc2.exe"+1938D: CC                    -  int 3 
"dmc2.exe"+1938E: CC                    -  int 3 
"dmc2.exe"+1938F: CC                    -  int 3 
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1183</ID>
                  <Description>"Dante - Unique Sword Movesets"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"dmc2.exe"+23D547)
alloc(fullHouseModule,2048,"dmc2.exe"+215688)
alloc(fullHouseModule_02,2048,"dmc2.exe"+241AEF)
alloc(fullHouseModule_03),2048,"dmc2.exe"+215677)
alloc(fullHouseModule_04),2048,"dmc2.exe"215681)
alloc(fullHouseInertia,64)
alloc(allowFullHouse,64)
alloc(airDashState,64)
registersymbol(airDashState)
registersymbol(fullHouseInertia)
registersymbol(allowFullHouse)
label(returnhere)
label(originalcode)
label(exit)
label(rebellionMoveSwaps)
label(mercilessMoveSwaps)
label(vendettaMoveSwaps)
alloc(moveswapalloc,8)
alloc(previousMoveID,64)
define(CurrentSword,dmc2.exe+158A80F)
registersymbol(previousMoveID)
registersymbol(moveswapalloc)
moveswapalloc:
db 0

fullHouseInertia:
dd (float)55.0
FHFall:
dd (float)-55.0

allowFullHouse:
db (int)0

airDashState:
db (int)0

newmem:
//Before we do any move swaps, check to see what sword
//is currently equipped so we can declone the swords.
//Rebellion
//update previous move id before it can get changed
//comically stupid workaround for guns getting swapped
//
//prime Full House variable
//
mov [allowFullHouse],0
push eax
mov eax, [inputpressed-1]
and eax, 0x000000FF
mov [regAfterBitmask], eax
pop eax
cmp byte [regAfterBitmask],0x80
je originalcode
cmp byte [regAfterBitmask],0xC0
je originalcode
cmp byte [regAfterBitmask],0xA0
je originalcode
cmp byte [regAfterBitmask],0x88
je originalcode
push ebx
mov ebx, [moveswapalloc]
mov [previousMoveID], ebx
pop ebx
cmp byte ptr [CurrentSword],00
je rebellionMoveSwaps
//Merciless
cmp byte ptr [CurrentSword],01
je mercilessMoveSwaps
//Vendetta
cmp byte ptr [CurrentSword],02
je vendettaMoveSwaps
//just in case this SOMEHOW breaks
jmp originalcode
//

//Move Swaps Legend:
// ^: Tilt Input
// }: Shotgun String

//Rebellion is pretty good already. Nice blend of range and power.
//Let's give it easier access to some DT moves for DMC1 nostalgia.
//note: cmov doesn't support what we're doing so we need a label for each swap
rebellionMoveSwaps:
mov [moveswapalloc],eax
//1-2^3 --&gt; Million Stabs
cmp [moveswapalloc],0x0000000A
je rebellion_123ClassicMS
cmp [moveswapalloc],0x0000000B
je rebellion_123ClassicMS2
cmp [moveswapalloc],0x0000000C
je rebellion_123ClassicMS3
cmp [moveswapalloc],0x0000000D
je rebellion_123ClassicMS4
cmp [moveswapalloc],0x00000008
je rebellion_123QuickSidewinder
//Allow air high time on reb
cmp rax,0x0000001A
mov [moveswapalloc],rax
je tryAirHighTime
cmp rax,0x0000001B
je tryAirHighTime
//always end with a jump to originalcode
jmp originalcode

rebellion_123ClassicMS:
//For maximum compatibility, check and see if dante's current action
//corresponds with the actions that can lead into the one being replaced
cmp [previousMoveID], 0x02
jne originalcode
cmp byte ptr [dmc2.exe+158A80E], 3
mov byte ptr [r10+000003EC],0x05
jmp returnhere

rebellion_123ClassicMS2:
cmp [previousMoveID], 0x0A
jne originalcode
mov byte ptr [r10+000003EC],0x05
jmp returnhere

rebellion_123ClassicMS3:
cmp [previousMoveID], 0x0B
jne originalcode
cmp byte ptr [dmc2.exe+158A848],0x01
je originalcode
mov byte ptr [r10+000003EC],0x05
jmp returnhere

rebellion_123ClassicMS4:
cmp [previousMoveID], 0x0C
jne originalcode
cmp byte ptr [dmc2.exe+158A848],0x01
je originalcode
mov byte ptr [r10+000003EC],0x06
jmp returnhere

rebellion_123QuickSidewinder:
cmp [previousMoveID], 0x07
jne originalcode
mov byte ptr [r10+000003EC],0x0D
jmp returnhere

mercilessMoveSwaps:
mov [moveswapalloc],eax
//Round Trip -&gt; Air Combo
cmp [moveswapalloc],0x00000020
je merciless_roundtripAirCombo
cmp [moveswapalloc],0x00000021
je merciless_roundtripAirCombo2
//Gravedigger -&gt; Sidewinder
cmp [moveswapalloc],0x0000000E
je merciless_gravediggerSidewinder
cmp [moveswapalloc],0x00000004
je merciless_overhead
cmp [moveswapalloc],0x00000010
je merciless_smashything
cmp [moveswapalloc],0x00000009
je merciless_millionstabRoundTrip
cmp [moveswapalloc],0x00000001
je merciless_lowstarterSweep
cmp rax,0x0000001A
mov [moveswapalloc],rax
je merciless_airdash
cmp rax,0x0000001B
je merciless_airdash
jmp originalcode

merciless_airdash:
//cmp [airDashState],0
//jne originalcode
mov byte ptr[r10+000003EC],0x314
mov [airDashState], 1
mov dword ptr [dmc2.exe+158A370],15.0
jmp returnhere

merciless_roundtripAirCombo:
mov byte ptr [r10+000003EC],0x0C
jmp returnhere

merciless_roundtripAirCombo2:
mov byte ptr [r10+000003EC],0x0D
jmp returnhere

merciless_gravediggerSidewinder:
cmp [previousMoveID], 0x03
jne originalcode
cmp byte ptr [dmc2.exe+158A848],0x01
je originalcode
mov byte ptr [r10+000003EC],0x0D
jmp returnhere

merciless_overhead:
cmp byte ptr [dmc2.exe+158A848],0x01
jne merciless_overhead_noDT
mov byte ptr [r10+000003EC],0x06
jmp returnhere

merciless_overhead_noDT:
cmp [previousMoveID], 0x03
jne originalcode
mov byte ptr [r10+000003EC],0x10
jmp returnhere

merciless_smashything:
mov byte ptr [r10+000003EC],0x1E
jmp returnhere

merciless_millionstabRoundTrip:
mov byte ptr [r10+000003EC],0x20
jmp returnhere

merciless_lowstarterSweep:
mov byte ptr [r10+000003EC],0x1E
jmp returnhere

vendettaMoveSwaps:
mov [moveswapalloc],eax
cmp [moveswapalloc],0x00000010
je vendetta_123Gravedigger
cmp [moveswapalloc],0x00000011
je vendetta_123GravediggerExtension
cmp [moveswapalloc],0x00000007
je vendetta_123ToDT
cmp [moveswapalloc],0x00000008
je vendetta_123ToDTFinish
cmp [moveswapalloc],0x0000000A
je vendetta_12MillionStabs
cmp [moveswapalloc],0x00000004
je vendetta_1234ShoulderCheck
cmp rax,0x0000001A
mov [moveswapalloc],rax
je vendetta_airrave1
cmp rax,0x0000001B
je vendetta_airrave2
cmp [moveswapalloc],0x0000001D
je vendetta_fullhouse
jmp originalcode

//bookmark

vendetta_fullhouse:
mov byte ptr [allowFullHouse],3
//mov word ptr[dmc2.exe+158A71C],538
mov byte ptr[r10+000003EC],0x11C
//mov dword ptr [dmc2.exe+158A354],50.0
//mov byte ptr [dmc2.exe+158A714],2
//mov byte ptr [dmc2.exe+158A86E],255
jmp returnhere

vendetta_airrave1:
mov byte ptr [allowFullHouse],1
mov byte ptr[r10+000003EC],0x11C
jmp returnhere

vendetta_airrave2:
mov byte ptr [allowFullHouse],1
mov byte ptr[r10+000003EC],0x11C
jmp returnhere

vendetta_123Gravedigger:
mov byte ptr [r10+000003EC],0x0E
jmp returnhere

vendetta_123GravediggerExtension:
mov byte ptr [r10+000003EC],0x0F
jmp returnhere

vendetta_123ToDT:
mov byte ptr [r10+000003EC],0x05
jmp returnhere

vendetta_123ToDTFinish:
cmp [previousMoveID], 0x07
jne originalcode
mov byte ptr [r10+000003EC],0x06
jmp returnhere

vendetta_12MillionStabs:
cmp [previousMoveID], 0x02
jne originalcode
mov byte ptr [r10+000003EC],0x09
jmp returnhere

vendetta_1234ShoulderCheck:
cmp [previousMoveID], 0x03
jne originalcode
mov byte ptr [r10+000003EC],0x1F
jmp returnhere

//the al register holds the ID of the original move being executed.
//by comparing it to a move ID, we can then intercept this call
//and insert a different move ID instead.

fullHouseModule:
cmp [allowFullHouse],1
je applyFHInertia
mov qword ptr [rbx+40],3F800000
jmp FullHouseReturn

applyFHInertia:
movss xmm0, [fullHouseInertia]
movss [dmc2.exe+158A370], xmm0
mov [allowFullHouse],2
jmp FullHouseReturn

//Handles start-up and carry-through inertia
fullHouseModule_02:
cmp [allowFullHouse],1
je FHStartupStall
cmp [allowFullHouse],3
je FHStartupStall
//mov [allowFullHouse],0
movss [rdi+40],xmm1
jmp FHM02Return

FHStartupStall:
mov [rdi+40],0
jmp FHM02Return

fullHouseModule_03:
cmp [allowFullHouse],1
je fullHouseFallSpeed
mov [rbx+24],C1B00000
jmp FHM03Return

fullHouseFallSpeed:
mov [rbx+24],0
jmp FHM03Return

fullHouseModule_04:
cmp [allowFullHouse],1
je fullHouseMod4Speed
mov [rbx+34],C1B00000
jmp FHM04Return

fullHouseMod4Speed:
movss xmm0, [FHFall]
movss [dmc2.exe+158A354], xmm0
mov [rbx+34],0
jmp FHM04Return

tryAirHighTime:
//Dodge inputs
cmp byte [regAfterBitmask],0x20
je doAirHighTime
cmp byte [regAfterBitmask],0x28
je doAirHighTime
//Dodge Offset Inputs (Attack + Dodge [LOCK-ON OK])
cmp byte [regAfterBitmask],0x30
je doAirHighTime
cmp byte [regAfterBitmask],0x38
je doAirHighTime
jmp originalcode

doAirHighTime:
mov byte ptr [r10+000003EC],0x12
jmp returnhere

originalcode:
mov [r10+000003EC],al
jmp returnhere

exit:
jmp returnhere

"dmc2.exe"+23D547:
jmp newmem
nop
nop
returnhere:

"dmc2.exe"+215688:
jmp fullHouseModule
nop 3
FullHouseReturn:

"dmc2.exe"+241AEF:
jmp fullHouseModule_02
FHM02Return:

"dmc2.exe"+215677:
jmp fullHouseModule_03
nop 2
FHM03Return:

"dmc2.exe"+215681:
jmp fullHouseModule_04
nop 2
FHM04Return:

[DISABLE]
dealloc(newmem)
dealloc(fullHouseModule)
dealloc(fullHouseModule_02)
dealloc(fullHouseModule_03)
dealloc(fullHouseModule_04)
"dmc2.exe"+23D547:
mov [r10+000003EC],al
//Alt: db 41 88 82 EC 03 00 00

"dmc2.exe"+215688:
mov qword ptr [rbx+40],3F800000
"dmc2.exe"+241AEF:
movss [rdi+40],xmm1
"dmc2.exe"+215677:
mov [rbx+24],C1B00000
"dmc2.exe"+215681:
mov [rbx+34],C1B00000
dealloc(moveswapalloc)
dealloc(previousMoveID)
unregistersymbol(previousMoveID)
unregistersymbol(moveswapalloc)
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1184</ID>
                      <Description>"Show Debug Info"</Description>
                      <Options moHideChildren="1"/>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>1185</ID>
                          <Description>"Move ID"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>dmc2.exe+158A71C</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1186</ID>
                          <Description>"Move Swap Mem"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <VariableType>4 Bytes</VariableType>
                          <Address>moveswapalloc</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1187</ID>
                          <Description>"move swap alloc"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <VariableType>4 Bytes</VariableType>
                          <Address>moveswapalloc</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1188</ID>
                          <Description>"premoveid"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>previousMoveID</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1597</ID>
                          <Description>"Full House OK?"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>allowFullHouse</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1624</ID>
                          <Description>"Air Dash State"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>airDashState</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>1352</ID>
                  <Description>"SDT Var"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>2 Bytes</VariableType>
                  <Address>useInstantSDT</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1353</ID>
                  <Description>"Instant SDT on D-Pad Down"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+23103F)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push eax
mov eax, [inputpressed]
and eax, 0xFFFFFFF0
mov [regAfterBitmask], eax
pop eax
cmp byte [regAfterBitmask],0x40
je testMaxDT
jmp normalDT

normalDT:
cmp [rbx+00000140],ax
jmp returnhere

testMaxDT:
cmp [dmc2.exe+158A84E],0x1770
jge triggerSDT
jmp normalDT

triggerSDT:
jmp dmc2.exe+231048

originalcode:
cmp [rbx+00000140],ax

exit:
jmp returnhere

"dmc2.exe"+23103F:
jmp newmem
nop 2
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+23103F:
cmp [rbx+00000140],ax
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>114</ID>
                      <Description>"Devil Trigger (value / 6,000)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>2 Bytes</VariableType>
                      <Address>dmc2.exe+158A84E</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>47</ID>
                      <Description>"cancelmaybe2"</Description>
                      <ShowAsHex>1</ShowAsHex>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>4 Bytes</VariableType>
                      <Address>dmc2.exe+158A718</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>45</ID>
                      <Description>"maybe better moveid"</Description>
                      <ShowAsHex>1</ShowAsHex>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>4 Bytes</VariableType>
                      <Address>dmc2.exe+158A71C</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>1625</ID>
                  <Description>"Weapon Switch Bind"</Description>
                  <DropDownList DisplayValueAsItem="1">0:Right Trigger
1:LS Click (L3)
</DropDownList>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Byte</VariableType>
                  <Address>setSwordRotBind</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1253</ID>
              <Description>"Swap Guns While Attacking"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
dmc2.exe+2306A0:
jmp dmc2.exe+2306B2

[DISABLE]
dmc2.exe+2306A0:
je dmc2.exe+2306B2
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1254</ID>
                  <Description>"This lets you swap guns while doing any action"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{
}
[ENABLE]
[DISABLE]
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1255</ID>
                      <Description>"Swapping during gun actions cancels those actions"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{
}
[ENABLE]
[DISABLE]
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>1256</ID>
                  <Description>"Customize your gun loadout below:"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{
}
[ENABLE]
[DISABLE]
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1257</ID>
                      <Description>"Skip Pistols"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+2306C5) 
label(returnhere)
label(originalcode)
label(nopistols)
label(exit)
alloc(weaponstore,4)
registersymbol(weaponstore)
weaponstore:
  db 0

newmem:
mov [weaponstore],al
cmp byte ptr [weaponstore],00
je nopistols
jmp originalcode

originalcode:
mov [rcx+000004DC],al
jmp returnhere

nopistols:
mov byte ptr [rcx+000004DC+2],01
jmp returnhere

exit:
jmp returnhere

"dmc2.exe"+2306C5:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+2306C5:
mov [rcx+000004DC],al
//Alt: db 88 81 DC 04 00 00

dealloc(weaponstore)
unregistersymbol(weaponstore)
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1258</ID>
                      <Description>"Skip Machine Guns"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+2306C5) 
label(returnhere)
label(originalcode)
label(nomachineguns)
label(exit)
alloc(weaponstore,4)
registersymbol(weaponstore)
weaponstore:
  db 0

newmem:
mov [weaponstore],al
cmp byte ptr [weaponstore],01
je nomachineguns
jmp originalcode

originalcode:
mov [rcx+000004DC],al
jmp returnhere

nomachineguns:
mov byte ptr [rcx+000004DC+2],02
jmp returnhere

exit:
jmp returnhere

"dmc2.exe"+2306C5:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+2306C5:
mov [rcx+000004DC],al
//Alt: db 88 81 DC 04 00 00

dealloc(weaponstore)
unregistersymbol(weaponstore)
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1259</ID>
                      <Description>"Skip Shotgun"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+2306C5) 
label(returnhere)
label(originalcode)
label(noshotgun)
label(exit)
alloc(weaponstore,4)
registersymbol(weaponstore)
weaponstore:
  db 0

newmem:
mov [weaponstore],al
cmp byte ptr [weaponstore],02
je noshotgun
jmp originalcode

originalcode:
mov [rcx+000004DC],al
jmp returnhere

noshotgun:
mov byte ptr [rcx+000004DC+2],03
jmp returnhere

exit:
jmp returnhere

"dmc2.exe"+2306C5:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+2306C5:
mov [rcx+000004DC],al
//Alt: db 88 81 DC 04 00 00

dealloc(weaponstore)
unregistersymbol(weaponstore)
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1260</ID>
                      <Description>"Skip Rocket Launcher"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+2306C5) 
label(returnhere)
label(originalcode)
label(norpg)
label(exit)
alloc(weaponstore,4)
registersymbol(weaponstore)
weaponstore:
  db 0

newmem:
mov [weaponstore],al
cmp byte ptr [weaponstore],03
je norpg
jmp originalcode

originalcode:
mov [rcx+000004DC],al
jmp returnhere

norpg:
mov byte ptr [rcx+000004DC+2],00
jmp returnhere

exit:
jmp returnhere

"dmc2.exe"+2306C5:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+2306C5:
mov [rcx+000004DC],al
//Alt: db 88 81 DC 04 00 00

dealloc(weaponstore)
unregistersymbol(weaponstore)
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1261</ID>
                      <Description>"Skip Machine Gun &amp; Rocket Launcher"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+2306C5) 
label(returnhere)
label(originalcode)
label(nomachinegun)
label(norpg)
label(exit)
alloc(weaponstore,4)
registersymbol(weaponstore)
weaponstore:
  db 0

newmem:
mov [weaponstore],al
cmp byte ptr [weaponstore],03
je norpg
cmp byte ptr [weaponstore],01
je nomachinegun
jmp originalcode

originalcode:
mov [rcx+000004DC],al
jmp returnhere

norpg:
mov byte ptr [rcx+000004DC+2],00
jmp returnhere

nomachinegun:
mov byte ptr [rcx+000004DC+2],02
jmp returnhere

exit:
jmp returnhere

"dmc2.exe"+2306C5:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+2306C5:
mov [rcx+000004DC],al
//Alt: db 88 81 DC 04 00 00

dealloc(weaponstore)
unregistersymbol(weaponstore)
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>1262</ID>
                  <Description>"Debug: Current Gun Equip"</Description>
                  <DropDownList ReadOnly="1" DisplayValueAsItem="1">0:Pistols
1:Machine Gun
2:Shotgun
3:Rocket Launcher
</DropDownList>
                  <VariableType>Byte</VariableType>
                  <Address>dmc2.exe+158A80E </Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1324</ID>
              <Description>"Consistent Inertia"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>//writes the inertia angle to an external variable so
//that attacks done after these do not overwrite backwards inertia
//(or just set a bit to tell code to multiply inertia by -1)
[ENABLE]
alloc(newmem,2048,"dmc2.exe"+23CC19)
alloc(airKick1,2048,"dmc2.exe"+214DB4)
alloc(airKick2,2048,"dmc2.exe"+21518B)
alloc(clearSaveInertia,2048,"dmc2.exe"+241BB3)
label(returnhere)
label(originalcode)
label(exit)
alloc(saveBackwardsInertia,64)
alloc(recoveredInertia,64)
alloc(negation,64)
registersymbol(recoveredInertia)
registersymbol(saveBackwardsInertia)
saveBackwardsInertia:
dd (int)0

negation:
dd (float)-1.0

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push eax
mov eax, [dmc2.exe+158A860]
mov [saveBackwardsInertia],eax
pop eax
mov [rbx+00000530],ax
jmp returnhere

airKick1:
push eax
mov eax, [rbx+40]
cmp [saveBackwardsInertia],0
jne airKick1saveInertia
mov [rbx+40],eax
pop eax
jmp airkickReturnHere

airKick2:
push eax
mov eax, [rbx+40]
cmp [saveBackwardsInertia],0
jne airKick2saveInertia
movss xmm0, [rbx+40]
mulss xmm0, [ground_air_transfer]
movss [rbx+40],xmm0
pop eax
jmp airkick2ReturnHere

airKick1saveInertia:
push ebx
mov ebx, [saveBackwardsInertia]
movss xmm0,[dmc2.exe+158A370]
mov [dmc2.exe+158A860],ebx
pop ebx
mulss xmm0,[negation]
movss [recoveredInertia],xmm0
movss [dmc2.exe+158A370], xmm0
cvttss2si eax, xmm0
//mov [rbx+40],eax
mov [saveBackwardsInertia],0
pop eax
jmp airkickReturnHere

airKick2saveInertia:
push ebx
mov ebx, [saveBackwardsInertia]
movss xmm0,[dmc2.exe+158A370]
mulss xmm0, [ground_air_transfer]
mov [dmc2.exe+158A860],ebx
pop ebx
mulss xmm0,[negation]
movss [recoveredInertia],xmm0
movss [dmc2.exe+158A370], xmm0
cvttss2si eax, xmm0
//mov [rbx+40],eax
mov [saveBackwardsInertia],0
pop eax
jmp airkick2ReturnHere

clearSaveInertia:
mov [jankCancelSaveInertia],0
//JC's affected by inertia multiplier
cmp byte ptr [allowFullHouse], 2 //override full house inertia
je fullHouseInertiaClamp
mov [rcx+0000053C],04000000
mov [saveBackwardsInertia],0
jmp clearSaveInertiaReturnHere

fullHouseInertiaClamp:
//cmp [dmc2.exe+158A370], 2.0
//jle returnhere
mov [rcx+0000053C],04000000
mulss xmm0, [ground_air_transfer]
mulss xmm0, [ground_air_transfer]
mulss xmm0, [ground_air_transfer]
mulss xmm0, [ground_air_transfer]
mulss xmm0, [ground_air_transfer]
movss [dmc2.exe+158A370], xmm0
mov [allowFullHouse],0
mov [saveBackwardsInertia],0
jmp clearSaveInertiaReturnHere

originalcode:
mov [rbx+00000530],ax

exit:
jmp returnhere

"dmc2.exe"+23CC19:
jmp newmem
nop 2
returnhere:

"dmc2.exe"+214DB4:
jmp airKick1
nop 2
airkickReturnHere:

"dmc2.exe"+21518B:
jmp airKick2
nop 2
airkick2ReturnHere:

"dmc2.exe"+241BB3:
jmp clearSaveInertia
nop 5
clearSaveInertiaReturnHere:


[DISABLE]
dealloc(newmem)
dealloc(saveBackwardsInertia)
dealloc(negation)
dealloc(clearSaveInertia)
unregistersymbol(saveBackwardsInertia)
dealloc(recoveredInertia)
unregistersymbol(recoveredInertia)
"dmc2.exe"+23CC19:
mov [rbx+00000530],ax
"dmc2.exe"+214DB4:
mov [rbx+40],40C00000
"dmc2.exe"+241BB3:
mov [rcx+0000053C],04000000
"dmc2.exe"+21518B:
mov [rbx+40],40800000

</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1325</ID>
                  <Description>"saveBackwardsInertia?"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Byte</VariableType>
                  <Address>saveBackwardsInertia</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1326</ID>
                  <Description>"saved inertia"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>recoveredInertia</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1293</ID>
              <Description>"Stinger Distance"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+213CCB)
alloc(gunstinger,2048,"dmc2.exe"+2141F3)
alloc(gs2,2048,"dmc2.exe"+241C46)
alloc(gs3,2048,"dmc2.exe"+213EE9)
label(returnhere)
label(originalcode)
label(exit)
alloc(stingerDist,128,"dmc2.exe"+213CCB)
alloc(gunstingerFixer,128)
registersymbol(gunstingerFixer)
registersymbol(stingerDist)
stingerDist:
dd (float)1.75

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mulss xmm0,[stingerDist]
movss [gunstingerFixer],xmm0
jmp originalcode

gunstinger:
cmp [gunstingerFixer],0
je gunstingerOC
movss xmm0,[gunstingerFixer]
movss qword ptr [rbx+40], xmm0
jmp gunstingerRH

gunstingerOC:
mov qword ptr [rbx+40],4145B6AE
jmp gunstingerRH

gs2:
cmp [gunstingerFixer],0
je gs2oc
push eax
mov eax,[gunstingerFixer]
mov [airDashState],0
mov [r8+40], eax
pop eax
cmp [r8+00000518],dl
jmp gs2rh

gs2oc:
mov [allowFullHouse],0
mov [r8+40],rdx
cmp [r8+00000518],dl
jmp gs2rh

gs3:
cmp [gunstingerFixer],0
je gs3oc
movss xmm0,[gunstingerFixer]
movss [rbx+40], xmm0
jmp gs3rh

gs3oc:
movss [rbx+40],xmm0
jmp gs3rh

originalcode:
movss [rbx+40],xmm0

exit:
jmp returnhere

"dmc2.exe"+213CCB:
jmp newmem
returnhere:

"dmc2.exe"+2141F3:
jmp gunstinger
nop 3
gunstingerRH:

"dmc2.exe"+241C46:
jmp gs2
nop 6
gs2rh:

"dmc2.exe"+213EE9:
jmp gs3
gs3rh:

[DISABLE]
dealloc(newmem)
dealloc(stingerDist)
dealloc(gunstinger)
dealloc(gunstingerFixer)
dealloc(gs2)
dealloc(gs3)
unregistersymbol(gunstingerFixer)
unregistersymbol(stingerDist)
"dmc2.exe"+213CCB:
movss [rbx+40],xmm0
"dmc2.exe"+2141F3:
mov qword ptr [rbx+40],4145B6AE
"dmc2.exe"+241C46:
mov [r8+40],rdx
cmp [r8+00000518],dl
"dmc2.exe"+213EE9:
movss [rbx+40],xmm0
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1294</ID>
                  <Description>"stinger lunge mult"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>stingerDist</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1291</ID>
              <Description>"Run Speed Modifier?"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+23A9BA)
label(returnhere)
label(originalcode)
label(exit)
alloc(runMult,128,"dmc2.exe"+23A9BA)
registersymbol(runMult)
runMult:
dd (float)1.5

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mulss xmm8,[runMult]
jmp originalcode

originalcode:
movss [rdi+40],xmm8

exit:
jmp returnhere

"dmc2.exe"+23A9BA:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(runMult)
unregistersymbol(runMult)
"dmc2.exe"+23A9BA:
movss [rdi+40],xmm8
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1292</ID>
                  <Description>"Running Speed Multiplier"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>runMult</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1346</ID>
              <Description>"SMGS Don't Change Gravity"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+219F5A)
label(returnhere)
label(originalcode)
label(exit)
newmem: //this is allocated memory, you have read,write,execute access
//place your code here
jmp returnhere

originalcode:
movss [rbx+24],xmm0

exit:
jmp returnhere

"dmc2.exe"+219F5A:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+219F5A:
movss [rbx+24],xmm0
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1648</ID>
                  <Description>"SMG Gravity"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>smgGrav</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1347</ID>
              <Description>"SMGS Don't Push Up"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+219D9B)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
jmp returnhere

originalcode:
mov [rbx+24],41300000

exit:
jmp returnhere

"dmc2.exe"+219D9B:
jmp newmem
nop 2
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+219D9B:
mov [rbx+24],41300000
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1349</ID>
              <Description>"Gravity Mods"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+241AF4)
alloc(gravityChange,64)
label(returnhere)
label(originalcode)
label(exit)
registersymbol(gravityChange)
gravityChange:
dd (float)0.0
post_gravityChange:
dd (float)0.0
negation_gravityChange:
dd (float)-1.0
const_gravityChange:
dd (float)0.0
smgs_gravityChange:
dd (float)0.33
fullhouse_gravityChange:
dd (float)7.0

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
movss xmm3,[rdi+34]
movss [gravityChange],xmm3
//movss xmm4, [dmc2.exe+158A354]
//push eax
//cvttss2si eax, xmm4
//cmp eax,0
//pop eax
//jle fallSpeedFix
//divss xmm3,[dmc2.exe+158A3C4]
//divss xmm3,[dmc2.exe+158A3C4]
//mulss xmm2,xmm3
//mulss xmm2,[negation_gravityChange]
//movss [post_gravityChange],xmm2
cmp dword ptr [dmc2.exe+158A71C],0x0000205
je smgfix
cmp dword ptr [dmc2.exe+158A71C],0x0000204
je smgfix
cmp dword ptr [dmc2.exe+158A71C],0x000021B
je smgfix
cmp dword ptr [dmc2.exe+158A71C],0x0000314
je smgfix
cmp dword ptr [dmc2.exe+158A71C],0x0000214
je smgfix
//cmp dword ptr [dmc2.exe+158A71C],0x000011C
//je fullhouse
jmp originalcode

smgfix:
mulss xmm3,[smgs_gravityChange]
movss xmm4, [dmc2.exe+158A354]
//push eax
//cvttss2si eax, xmm4
//cmp eax,0
//pop eax
//jl smgfallfix
jmp execute

smgfallfix:
mulss xmm3,[smgs_gravityChange]
//mulss xmm3,[smgs_gravityChange]
jmp execute

fullhouse:
mulss xmm3,[fullhouse_gravityChange]
add dword ptr [dmc2.exe+158A370],11
jmp execute

execute:
mulss xmm2,xmm3
//mulss xmm2,[negation_gravityChange]
movss [post_gravityChange],xmm2
jmp returnhere

fallSpeedFix:
divss xmm3,[dmc2.exe+158A3C4]
divss xmm3,[dmc2.exe+158A3C4]
divss xmm3,[dmc2.exe+158A3C4]
mulss xmm2,xmm3
movss xmm3,[dmc2.exe+158A3C4]
movss [gravityChange],xmm3
mulss xmm2,[negation_gravityChange]
movss [post_gravityChange],xmm2
jmp originalcode

originalcode:
mulss xmm2,[rdi+34]

exit:
jmp returnhere

"dmc2.exe"+241AF4:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(gravityChange)
unregistersymbol(gravityChange)
"dmc2.exe"+241AF4:
mulss xmm2,[rdi+34]
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1350</ID>
                  <Description>"gravityChange"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>gravityChange</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1351</ID>
                  <Description>"No description"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>gravityChange+4</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1573</ID>
          <Description>"Air Raid Doesn't Eat DJ"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+231132)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
jmp returnhere

originalcode:
mov word ptr [rbx+00000541],0001

exit:
jmp returnhere

"dmc2.exe"+231132:
jmp newmem
nop 4
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+231132:
mov word ptr [rbx+00000541],0001
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1592</ID>
          <Description>"Inertia Module"</Description>
          <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>1585</ID>
              <Description>"WHY IS THIS ALL HARDCODED?! CAPCOM???"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+238CFB)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
//lol
mov byte ptr [rcx+0000054E],22
jmp returnhere

originalcode:
mov [rcx+40],rdi
mov byte ptr [rcx+0000054E],22

exit:
jmp returnhere

"dmc2.exe"+238CFB:
jmp newmem
nop 6
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+238CFB:
mov [rcx+40],rdi
mov byte ptr [rcx+0000054E],22
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1587</ID>
              <Description>"Ground to Air Inertia Conservation"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+238D9F)
alloc(ground_air_transfer,64)
alloc(const,64)
alloc(inertia_hard_limit,64)
registersymbol(ground_air_transfer)
registersymbol(const)
registersymbol(inertia_hard_limit)
label(returnhere)
label(originalcode)
label(exit)
ground_air_transfer:
dd (float)0.55
const:
dd (float)7.5 //vanilla jump speed

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
//add eax,[rbx+40]
mov [airDashState],0
cvtsi2ss xmm0, eax
movss xmm0, [dmc2.exe+158A370]
mulss xmm0, [ground_air_transfer]
mov [allowFullHouse],0
cmp [dmc2.exe+158A370],1.0 //do not apply const if momentum too low
jle applyInertia
addss xmm0, [const]
jmp applyInertia

applyInertia:
//movss [rbx+40],xmm0
movss [dmc2.exe+158A370], xmm0
//cmp [dmc2.exe+158A370], 19.0
//jle inertiaSoftClamp
//mov [rbx+40],eax
mov eax,[rcx+r8+54]
jmp returnhere

doNotApplyConst:

originalcode:
mov [rbx+40],eax
mov eax,[rcx+r8+54]

exit:
jmp returnhere

"dmc2.exe"+238D9F:
jmp newmem
nop 3
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(ground_air_transfer)
dealloc(const)
unregistersymbol(ground_air_transfer)
unregistersymbol(const)
"dmc2.exe"+238D9F:
mov [rbx+40],eax
mov eax,[rcx+r8+54]

</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1588</ID>
                  <Description>"No description"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>findthisdumbregister</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1623</ID>
                  <Description>"full house state"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Byte</VariableType>
                  <Address>allowFullHouse</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1586</ID>
              <Description>"Double-Jump Inertia"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+23D169)
alloc(inertia_hard_limit,64)
alloc(fullhouse_hard_limit,64)
registersymbol(inertia_hard_limit)
registersymbol(fullhouse_hard_limit)
label(returnhere)
label(originalcode)
label(exit)

inertia_hard_limit: //if you change this, make sure to change
//line 20 as well to compare the same value!
dd (float)18.0

fullhouse_hard_limit: //should carry dante slightly farther
//than the enemy that gets knocked back
dd (float)9.5

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp byte ptr [allowFullHouse], 2 //override full house inertia
je fullHouseInertiaClamp
//cmp [dmc2.exe+158A370], 22.0 //do not apply const if momentum too low
//jle applyInertiaClamp
mov eax,[rcx+r9+54]
jmp returnhere

fullHouseInertiaClamp:
movss xmm0, [fullhouse_hard_limit]
movss [dmc2.exe+158A370], xmm0
mov eax,[rcx+r9+54]
mov [allowFullHouse],0

applyInertiaClamp:
movss xmm0, [inertia_hard_limit]
movss [dmc2.exe+158A370], xmm0
mov eax,[rcx+r9+54]
jmp returnhere

originalcode:
mov [rdi+40],eax
mov eax,[rcx+r9+54]

exit:
jmp returnhere

"dmc2.exe"+23D169:
jmp newmem
nop 3
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(inertia_hard_limit)
dealloc(fullhouse_hard_limit)
unregistersymbol(inertia_hard_limit)
unregistersymbol(fullhouse_hard_limit)
"dmc2.exe"+23D169:
mov [rdi+40],eax
mov eax,[rcx+r9+54]

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1589</ID>
              <Description>"Jump Inertia Enabler"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+242D5E)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
jnl dmc2.exe+242DEC
jmp returnhere

originalcode:
mov [rcx+40],rax
jnl dmc2.exe+242DEC

exit:
jmp returnhere

"dmc2.exe"+242D5E:
jmp newmem
nop 5
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+242D5E:
mov [rcx+40],rax
jnl dmc2.exe+242DEC
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1590</ID>
              <Description>"Jump Inertia Enabler (1)"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+238EF8)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
jmp returnhere

originalcode:
movss [rbx+40],xmm2

exit:
jmp returnhere

"dmc2.exe"+238EF8:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+238EF8:
movss [rbx+40],xmm2
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1591</ID>
              <Description>"Jump Inertia Enabler (2)"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+23915E)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
jmp returnhere

originalcode:
movss [rcx+40],xmm0

exit:
jmp returnhere

"dmc2.exe"+23915E:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+23915E:
movss [rcx+40],xmm0
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1593</ID>
              <Description>"Jump Inertia Enabler (3)"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+23916D)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
jmp returnhere

originalcode:
movss [rcx+40],xmm2

exit:
jmp returnhere

"dmc2.exe"+23916D:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+23916D:
movss [rcx+40],xmm2
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1594</ID>
              <Description>"Wallrun Inertia"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+23CC61)
alloc(WJ_const,64)
label(returnhere)
label(originalcode)
label(exit)
WJ_const:
dd (float)11.0

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [allowFullHouse],0
mov [airDashState],0
movss xmm0, [dmc2.exe+158A370]
mulss xmm0, [ground_air_transfer]
addss xmm0, [WJ_const]
movss [dmc2.exe+158A370], xmm0
mov byte ptr [rbx+000003E3],02
jmp returnhere

originalcode:
mov [rbx+40],eax
mov byte ptr [rbx+000003E3],02

exit:
jmp returnhere

"dmc2.exe"+23CC61:
jmp newmem
nop 5
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(WJ_const)
"dmc2.exe"+23CC61:
mov [rbx+40],eax
mov byte ptr [rbx+000003E3],02
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1595</ID>
              <Description>"Gun Inertia"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+218EDE)
alloc(handgunAirFire,2048,"dmc2.exe"+2188C0)
alloc(handgunAirFireDecay,2048,"dmc2.exe"+2189EE)
alloc(smgAirFireDecay,2048,"dmc2.exe"+219E4E)
alloc(gunInertiaDecayConst,64)
registersymbol(gunInertiaDecayConst)
label(returnhere)
label(originalcode)
label(exit)
gunInertiaDecayConst:
dd (float)0.985

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [allowFullHouse],0
mulss xmm0,[gunInertiaDecayConst]
jmp returnhere

handgunAirFire:
mov [allowFullHouse],0
mulss xmm0,[gunInertiaDecayConst]
jmp handgunAirFireReturnHere

handgunAirFireDecay:
mov [allowFullHouse],0
mulss xmm0,[gunInertiaDecayConst]
jmp handgunAirFireDecayReturn

smgAirFireDecay:
mov [allowFullHouse],0
mulss xmm0,[gunInertiaDecayConst]
jmp smgAirFireDecayReturn

originalcode:
mulss xmm0,[dmc2.exe+5A2290]

exit:
jmp returnhere

"dmc2.exe"+218EDE:
jmp newmem
nop 3
returnhere:

"dmc2.exe"+2188C0:
jmp handgunAirFire
nop 3
handgunAirFireReturnHere:

"dmc2.exe"+2189EE:
jmp handgunAirFireDecay
nop 3
handgunAirFireDecayReturn:

"dmc2.exe"+219E4E:
jmp smgAirFireDecay
nop 3
smgAirFireDecayReturn:


[DISABLE]
dealloc(newmem)
dealloc(gunInertiaDecayConst)
"dmc2.exe"+218EDE:
mulss xmm0,[dmc2.exe+5A2290]
"dmc2.exe"+2188C0:
mulss xmm0,[dmc2.exe+5A2290]
"dmc2.exe"+2189EE:
mulss xmm0,[dmc2.exe+5A2290]
"dmc2.exe"+219E4E:
mulss xmm0,[dmc2.exe+5A2290]
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1596</ID>
              <Description>"Shotgun pushback"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+21AA22)
alloc(shotgun_pushback,64)
label(returnhere)
label(originalcode)
label(exit)
shotgun_pushback:
dd (float)0.5

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [allowFullHouse],0
movss xmm0, [dmc2.exe+158A370]
mulss xmm0, [shotgun_pushback]
movss [rbx+40], xmm0
jmp returnhere

originalcode:
mov [rbx+40],40400000

exit:
jmp returnhere

"dmc2.exe"+21AA22:
jmp newmem
nop 2
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(shotgun_pushback)
"dmc2.exe"+21AA22:
mov [rbx+40],40400000

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1622</ID>
              <Description>"Full House Jump Fixer"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+238CF5)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [allowFullHouse],0
mov [airDashState],0
//mov [dmc2.exe+158A86E],0
//mov [dmc2.exe+158A714],0
jmp originalcode

originalcode:
mov [rcx+24],edi
mov [rcx+34],edi
jmp returnhere

exit:
jmp returnhere

"dmc2.exe"+238CF5:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+238CF5:
mov [rcx+24],edi
mov [rcx+34],edi
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>160</ID>
      <Description>"----------------------------------------"</Description>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>1112</ID>
      <Description>"Lucia"</Description>
      <Options moHideChildren="1" moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>1149</ID>
          <Description>"Fine Tuning - Advanced Users Only"</Description>
          <Options moHideChildren="1" moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>1150</ID>
              <Description>"Damage Dealt/Taken Modifier"</Description>
              <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,3096,"dmc2.exe"+5431B)
alloc(damagemult,64)
alloc(enemydamagemult,64)
alloc(muststylethresh,64)
alloc(enemydeathfixer,64)
alloc(bayoinstakilltoggle,64)
alloc(incomingdamage,64)
alloc(weapondamagemult,64)
alloc(jankCancelTimer,64)
alloc(allowJankCancel,64)
alloc(jankCancelSaveInertia,64)
define(CurrentSword,dmc2.exe+158A80F)
registersymbol(weapondamagemult)
weapondamagemult:
dd (float)1.0
merciless_weapondamagemult:
dd (float)0.85
vendetta_weapondamagemult:
dd (float)1.2
label(returnhere)
label(originalcode)
label(exit)
label(enemycase)
label(bayohealth)
label(saveplayer)
label(bayohealthfailcheck)
registersymbol(damagemult)
registersymbol(enemydamagemult)
registersymbol(muststylethresh)
registersymbol(bayoinstakilltoggle)
registersymbol(incomingdamage)
registersymbol(jankCancelTimer)
registersymbol(allowJankCancel)
registersymbol(jankCancelSaveInertia)
jankCancelSaveInertia:
dd (int)0

allowJankCancel:
dd (int)0

jankCancelTimer:
dd (int)0

damagemult:
dd (float)3.0

enemydamagemult:
dd (float)0.85

enemydeathfixer:
dd (float)1.0

bayoinstakilltoggle:
dd (int)1

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
//before we do ANYTHING, check if this is applying damage and not healing
cmp si, 0
jnle originalcode //jump to original code if this is healing something
//overrides go here
//test if the target's health is the player's health
push ebx
mov ebx,[rdi+00000140]
cmp ebx, ["dmc2.exe"+158a470]
pop ebx
jne enemycase //jump to enemy damage case if values don't match
//prepare ecx for float mult
push eax
xor eax, eax //clear eax
neg si
mov ax, si //move incoming damage to cx register
cvtsi2ss xmm0, eax //convert incoming damage to float
mulss xmm0, [damagemult] //multiply incoming damage by player damage modifier
cvttss2si eax, xmm0 //convert to int again
neg eax
mov si, ax
pop eax
cmp [bayoinstakilltoggle], 1 //survive with 1 hp if health &gt; 1 when taking lethal damage
je bayohealth
add ax, si //continue with original code
mov [rdi+00000140],ax
jmp exit

enemycase:
//prime JC timer
mov [jankCancelTimer],7
push ebx
mov ebx,[dmc2.exe+158A968]
cmp ebx, [muststylethresh]
pop ebx
jnge exit //ignore damage dealt if player has fewer than specified style pts
//apply outgoing damage modifiers
cmp eax, F //fixes enemies not dying if outgoing damage &lt; 1.0
jle enemyoverride
push eax
xor eax, eax //clear eax
neg si
mov ax, si //move incoming damage to ax register
cvtsi2ss xmm0, eax //convert incoming damage to float
mulss xmm0, [enemydamagemult] //multiply incoming damage by player damage modifier
cmp byte ptr [CurrentSword],00
je rebellionDamage
//Merciless
cmp byte ptr [CurrentSword],01
je mercilessDamage
//Vendetta
cmp byte ptr [CurrentSword],02
je vendettaDamage
cvttss2si eax, xmm0 //convert to int again
neg eax
mov si, ax
pop eax
add ax, si
mov [rdi+00000140],ax
jmp exit

rebellionDamage:
mulss xmm0, [weapondamagemult]
jmp convertFloatToInt

mercilessDamage:
mulss xmm0, [merciless_weapondamagemult]
jmp convertFloatToInt

vendettaDamage:
mulss xmm0, [vendetta_weapondamagemult]
jmp convertFloatToInt

convertFloatToInt:
cvttss2si eax, xmm0 //convert to int again
neg eax
mov si, ax
pop eax
add ax, si
mov [rdi+00000140],ax
jmp exit

enemyoverride:
push eax
xor eax, eax //clear eax
neg si
mov ax, si //move incoming damage to ax register
cvtsi2ss xmm0, eax //convert incoming damage to float
mulss xmm0, [enemydeathfixer] //multiply incoming damage by player damage modifier
cvttss2si eax, xmm0 //convert to int again
neg eax
mov si, ax
pop eax
add ax, si
mov [rdi+00000140],ax
jmp exit

bayohealth:
push ebx
xor ebx, ebx
mov ebx, eax
add bx, si
cmp bx, ["dmc2.exe"+158a470] //checks if any damage is occurring
jge bayohealthfailcheck
mov [incomingdamage], bx
cmp bx, 1 //checks if incoming damage &gt;= player's health
pop ebx
//mov [incomingdamage], 776
jnle originalcode
push ebx
xor ebx, ebx
mov ebx, ["dmc2.exe"+158a470]
cmp bx, 1 //check if player's health &gt; 1
pop ebx
jg saveplayer
jmp originalcode

saveplayer:
mov [incomingdamage], 5
mov [rdi+00000140], 1 //sets player's health to 1
jmp exit

bayohealthfailcheck:
pop ebx
jmp originalcode

originalcode:
add ax, si
mov [rdi+00000140],ax
jmp exit

exit:
cmp [jankCancelTimer],7
je jankCancelWindow
jmp returnhere

jankCancelWindow:
cmp byte ptr [dmc2.exe+161BEEC],1
je initJankCancel
cmp byte ptr [dmc2.exe+158A86E],0
jne initJankCancel
//cmp [dmc2.exe+158A354],0
//jne allowJankCancel
//cmp dword ptr [dmc2.exe+158A71C],0x0000011D
//je allowJankCancel
mov [jankCancelTimer],0
mov [allowJankCancel],0
jmp returnhere

initJankCancel:
mov [allowJankCancel],1
mov [jankCancelTimer],0xFF
cmp byte ptr [dmc2.exe+158A872],0
jne refreshJumpForJC
jmp returnhere

refreshJumpForJC:
mov byte ptr [dmc2.exe+158A872],2
jmp returnhere

"dmc2.exe"+5431B:
jmp newmem
nop 5
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(damagemult)
dealloc(muststylethresh)
dealloc(incomingdamage)
dealloc(bayoinstakilltoggle)
dealloc(weapondamagemult)
unregistersymbol(damagemult)
unregistersymbol(enemydamagemult)
unregistersymbol(muststylethresh)
unregistersymbol(incomingdamage)
unregistersymbol(bayoinstakilltoggle)
unregistersymbol(weapondamagemult)
"dmc2.exe"+5431B:
add ax,si
mov [rdi+00000140],ax
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1660</ID>
                  <Description>"Correct End-of-Mission Damage Tally"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+5435D)
label(returnhere)
label(originalcode)
label(exit)

newmem:
cmp [damagemult], 0
je nodamage
cvtsi2ss xmm0, esi //convert incoming damage to float
divss xmm0, [damagemult] //multiply incoming damage by player damage modifier
cvttss2si esi, xmm0 //convert to int again
jmp originalcode

nodamage:
mov esi,0
jmp originalcode

originalcode:
sub [rcx+000000C4],esi

exit:
jmp returnhere

"dmc2.exe"+5435D:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+5435D:
sub [rcx+000000C4],esi
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1661</ID>
                      <Description>"Damage Taken In Mission"</Description>
                      <VariableType>4 Bytes</VariableType>
                      <Address>dmc2.exe+1588BF4</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>1682</ID>
                  <Description>"Damage Settings"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1151</ID>
                      <Description>"Damage Taken Multiplier"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>damagemult</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1152</ID>
                      <Description>"Damage Dealt Multiplier"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>enemydamagemult</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1153</ID>
                      <Description>"Bayonetta Magic Pixel"</Description>
                      <DropDownList>0:Disable
1:Enable
</DropDownList>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>4 Bytes</VariableType>
                      <Address>bayoinstakilltoggle</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1154</ID>
                      <Description>"NOTE: Must Style Mode requires Damage Dealt/Taken Modifier!!"</Description>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>1155</ID>
                          <Description>"Must Style Mode (See Values)"</Description>
                          <DropDownList>0:Disable Must Style
1500:[D]on't Worry
5000:[C]ome On!
10000:[B]ingo!
15000:[A]re You Ready?
20000:[S]howtime!!
</DropDownList>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>2 Bytes</VariableType>
                          <Address>muststylethresh</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1156</ID>
                      <Description>"Weapon-Specific Multipliers"</Description>
                      <Options moHideChildren="1"/>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>1157</ID>
                          <Description>"Rebellion/Cutlaseer/Sparda Damage"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>weapondamagemult</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1158</ID>
                          <Description>"Merciless/Klyamoor Damage"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>weapondamagemult+4</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1159</ID>
                          <Description>"Vendetta / Zambak Damage"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>weapondamagemult+8</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1160</ID>
              <Description>"Adjustable Enemy Stun"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+5872C)
alloc(stunmult,64)
alloc(handgunnerf,64)
alloc(dtstunmult,64)
label(returnhere)
label(originalcode)
label(exit)
label(movespecificstun)
label(stunmodifier)
label(dtstunmodifier)
registersymbol(stunmult)
registersymbol(handgunnerf)
registersymbol(dtstunmult)
stunmult:
dd (float)1.25

handgunnerf:
dd (float)0.85

dtstunmult:
dd (float)3.0

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
//check if this is hitting the player
//dont think a scalar for that is needed, everything breaks armor in like 1 hit
push ebx
mov ebx, [rcx+00000146]
cmp ebx, [dmc2.exe+158A476]
pop ebx
je originalcode
//check if current moveID is firing handguns
//if true, jump to handgun nerf
push ebx
mov ebx, [dmc2.exe+158A71C]
cmp ebx, 0x00000300
je movespecificstun
cmp ebx, 0x00000202
je movespecificstun
pop ebx
//check if player is in DT
cmp byte ptr [dmc2.exe+158A848],1
je dtstunmodifier
cmp byte ptr [dmc2.exe+158A848],2
je dtstunmodifier
jmp stunmodifier

stunmodifier:
cvtsi2ss xmm0, eax
mulss xmm0, [stunmult]
cvttss2si eax, xmm0
sub [rcx+00000146],ax
jmp exit

dtstunmodifier:
cvtsi2ss xmm0, eax
mulss xmm0, [dtstunmult]
cvttss2si eax, xmm0
sub [rcx+00000146],ax
jmp exit

//allows user to set special stun multiplier for the handguns
movespecificstun:
pop ebx
cmp [handgunnerf],1.0
je stunmodifier
cvtsi2ss xmm0, eax
mulss xmm0, [handgunnerf]
cvttss2si eax, xmm0
sub [rcx+00000146],ax
jmp exit

//incoming stun is in RAX
//need to intercept it and apply scalar
//optional: ignore scalar if in handguns action?
originalcode:
sub [rcx+00000146],ax
jmp exit

exit:
jmp returnhere

"dmc2.exe"+5872C:
jmp newmem
nop 2
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(stunmult)
dealloc(handgunnerf)
dealloc(dtstunmult)
unregistersymbol(stunmult)
unregistersymbol(handgunnerf)
unregistersymbol(dtstunmult)
"dmc2.exe"+5872C:
sub [rcx+00000146],ax

</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1161</ID>
                  <Description>"Stun Multiplier"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>stunmult</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1162</ID>
                  <Description>"DT Stun Multiplier"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>dtstunmult</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1163</ID>
                  <Description>"OPTIONAL: Handgun Stun Multiplier"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>handgunnerf</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1164</ID>
              <Description>"Adjustable Hitlag"</Description>
              <Options moHideChildren="1"/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : dmc2.exe
  Version: 
  Date   : 2020-12-04
  Author : sssiy

  This script does blah blah blah
}

[ENABLE]
aobscanmodule(HitStopDanteAdjust,dmc2.exe,F3 0F 11 83 94 00 00 00 F3 0F 10 83 A0 01 00 00 0F 57 F6) // should be unique
alloc(adjustablehitstop,$1000,"dmc2.exe"+23DD53)
label(code)
label(return)

registersymbol(adjustablehitstop)
adjustablehitstop:
  dd (float)0.85

code:
  movss xmm0,[adjustablehitstop]
  movss [rbx+00000094],xmm0
  jmp return

HitStopDanteAdjust:
  jmp code
  nop
  nop
  nop
return:
registersymbol(HitStopDanteAdjust)

[DISABLE]
HitStopDanteAdjust:
  db F3 0F 11 83 94 00 00 00
unregistersymbol(HitStopDanteAdjust)
dealloc(adjustablehitstop)
unregistersymbol(adjustablehitstop)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1165</ID>
                  <Description>"On-Hit Speed Multiplier"</Description>
                  <VariableType>Float</VariableType>
                  <Address>adjustablehitstop</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1166</ID>
              <Description>"Adjustable Enemy DT Armor Bonus"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+A4B28)
alloc(enemyDTArmorBonus,64)
alloc(restorearmorconst,64)
label(returnhere)
label(originalcode)
label(exit)
registersymbol(enemyDTArmorBonus)

restorearmorconst:
dd (float)0.1

enemyDTArmorBonus:
dd (float)3

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cvtsi2ss xmm0, ecx
//Divide by 10 to restore enemy's original armor value
mulss xmm0, [restorearmorconst]
//Apply user's specified armor bonus
mulss xmm0, [enemyDTArmorBonus]
cvttss2si ecx, xmm0
mov [rbx+00000146],cx
//This second address is the value the enemy's armor resets to after recovering
mov [rbx+00000148],cx
jmp exit

originalcode:
mov [rbx+00000146],cx

exit:
jmp returnhere

"dmc2.exe"+A4B28:
jmp newmem
nop 2
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(enemyDTArmorBonus)
dealloc(restorearmorconst)
unregistersymbol(enemyDTArmorBonus)

"dmc2.exe"+A4B28:
mov [rbx+00000146],cx
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1167</ID>
                  <Description>"Enemy DT Armor Multiplier"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>enemyDTArmorBonus</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>998</ID>
              <Description>"[LUCIA] USF"</Description>
              <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+2D3C70) 
label(returnhere)
label(originalcode)
label(exit)
alloc(speedmultalloc,64)
alloc(movemultalloc,64)
alloc(weaponmultalloc,64)
alloc(lastCharState,64)
registersymbol(lastCharState)
lastCharState:
dd (byte)0
speedActive_lastcharstate:
dd (byte)0
isSprinting_lastcharstate:
dd (byte)0
sprintSpeed_lastcharstate:
dd (float)2.0
lastAction_lastcharstate:
dd (dword)0
define(CurrentSword,dmc2.exe+158A80F)
define(InputPressed02,dmc2.exe+7DD68C)
registersymbol(weaponmultalloc)
weaponmultalloc:
dd (float)1.0
merciless_weaponmultalloc:
dd (float)1.15
vendetta_weaponmultalloc:
dd (float)0.8
registersymbol(movemultalloc)
movemultalloc:
dd (float)1.0
multifinish1_movemultalloc:
dd (float)1.5
overheadkick_movemultalloc:
dd (float)1.6
sweepoverhead_movemultalloc:
dd (float)2.0
hightime_movemultalloc:
dd (float)1.7
homingknives_movemultalloc:
dd (float)2.0
gdropground_movemultalloc:
dd (float)1.6
dtoverheadslash_movemultalloc:
dd (float)1.6
rapidslash_movemultalloc:
dd (float)1.6
doublekick_movemultalloc:
dd (float)1.6
helmsplitter_movemultalloc:
dd (float)1.6
dttoggle_movemultalloc:
dd (float)4.0
registersymbol(speedmultalloc)
speedmultalloc:
dd (float)1.2
dtspeedmultalloc:
dd (float)1.4
sdtspeedmultalloc:
dd (float)1.4

newmem:
cmp [rcx+08],1
je dantespeed
jmp originalcode

dantespeed:
//move-specific speed mods
cmp dword ptr [dmc2.exe+158A71C],0x0000103
je luciaMultiFinish1
cmp dword ptr [dmc2.exe+158A71C],0x000010A
je luciaOverheadKick
cmp dword ptr [dmc2.exe+158A71C],0x0000105
je luciaSweepOverhead
cmp dword ptr [dmc2.exe+158A71C],0x000020F
je luciaHighTime
cmp dword ptr [dmc2.exe+158A71C],0x0000303
je luciaHomingKnives
cmp dword ptr [dmc2.exe+158A71c],0x0000206
je luciaGDropGround
cmp dword ptr [dmc2.exe+158A71c],0x000010D
je luciaDTOverheadSlash
cmp dword ptr [dmc2.exe+158A71C],0x0000107
je luciaRapidSlash
cmp dword ptr [dmc2.exe+158A71C],0x0000104
je luciaDoubleKick
cmp dword ptr [dmc2.exe+158A71C],0x0000113
je luciaHelmSplitter
cmp dword ptr [dmc2.exe+158A71C],0x000031A
je luciaWaterRave
cmp dword ptr [dmc2.exe+158A71C],0x000011B
je luciaWaterRave
cmp dword ptr [dmc2.exe+158A71C],0x0000117
je luciaSPEEN
cmp dword ptr [dmc2.exe+158A71C],0x0000211
je luciaAirRaveFinish
cmp dword ptr [dmc2.exe+158A71C],0x0000108
je luciaRapidSlashFinish
//Other DT Toggle Anims
cmp dword ptr [dmc2.exe+158A718],0x16001616
je luciaDTButtonOK
cmp dword ptr [dmc2.exe+158A718],0x15001515
je luciaDTButtonOK
cmp dword ptr [dmc2.exe+158A718],0x19001919
je luciaDTButtonOK
//DT speed mods
cmp byte ptr [dmc2.exe+158A848],1
je dantedt
cmp byte ptr [dmc2.exe+158A848],2
je dantesdt
//Base speed mod
mulss xmm0,[speedmultalloc]
jmp weaponCheck

luciaRapidSlashFinish:
mulss xmm0,[sweepoverhead_movemultalloc]
jmp weaponCheck

luciaAirRaveFinish:
mulss xmm0,[sweepoverhead_movemultalloc]
jmp weaponCheck

luciaSPEEN:
mulss xmm0,[multifinish1_movemultalloc]
mov [allowJankCancel],1
mov [jankCancelTimer],0x1F
jmp weaponCheck

luciaDTActivation:
cmp byte ptr [lastCharState], 0
je luciaDTCheckAir
cmp byte ptr [speedActive_lastcharstate], 1
je luciaDTCheckAir
cmp byte ptr [lastCharState], 0
jge luciaDTEnemyFuckery
jmp originalcode

luciaDTEnemyFuckery:
cmp dword ptr [dmc2.exe+158A71c], 0x0000001
je fixthisalready
jmp originalcode

fixthisalready:
cmp dword ptr [dmc2.exe+158A71c], 0x0000000
jne luciaDTCheckButton
jmp originalcode

luciaDTCheckButton:
cmp dword ptr [InputPressed02],0x000000C0
je originalcode
cmp dword ptr [InputPressed02],0x00000040
je originalcode
cmp dword ptr [InputPressed02],0x00000060
je originalcode
cmp dword ptr [InputPressed02],0x00000050
je originalcode
cmp dword ptr [InputPressed02],0x00000048
je originalcode
cmp dword ptr [InputPressed02],0x00000041
je originalcode
cmp dword ptr [InputPressed02],0x00000042
je originalcode
cmp dword ptr [InputPressed02],0x00000044
je originalcode
jmp luciaDTCheckAir

luciaDTCheckAir:
cmp byte ptr [dmc2.exe+158A870], 0
jne luciaDTButtonOK
cmp byte ptr [dmc2.exe+158A714], 2
je luciaDTButtonOK
cmp byte ptr [dmc2.exe+158A871], 0
jne luciaDTButtonOK
jmp originalcode

luciaDTButtonOK:
mov [speedActive_lastcharstate], 1
mulss xmm0,[dttoggle_movemultalloc]
jmp originalcode

luciaHelmSplitter:
mulss xmm0,[helmsplitter_movemultalloc]
jmp weaponCheck

luciaDoubleKick:
mulss xmm0,[doublekick_movemultalloc]
jmp weaponCheck

luciaRapidSlash:
mulss xmm0,[rapidslash_movemultalloc]
jmp weaponCheck

luciaDTOverheadSlash:
mulss xmm0,[dtoverheadslash_movemultalloc]
jmp weaponCheck

luciaGDropGround:
mulss xmm0,[gdropground_movemultalloc]
jmp originalcode

luciaHomingKnives:
mulss xmm0,[homingknives_movemultalloc]
jmp originalcode

luciaHighTime:
mulss xmm0,[hightime_movemultalloc]
jmp originalcode

luciaSweepOverhead:
mulss xmm0,[sweepoverhead_movemultalloc]
jmp weaponCheck

luciaOverheadKick:
mulss xmm0,[overheadkick_movemultalloc]
jmp weaponCheck

luciaMultiFinish1:
mulss xmm0,[multifinish1_movemultalloc]
jmp weaponCheck

luciaWaterRave:
mulss xmm0,[homingknives_movemultalloc]
jmp weaponCheck

dantedt:
mulss xmm0,[dtspeedmultalloc]
cmp dword ptr [dmc2.exe+158A718],0x19001919
je luciaDTCheckAir
cmp dword ptr [dmc2.exe+158A718],0x15001515
je luciaDTCheckAir
mov [speedActive_lastcharstate],0
jmp weaponCheck
dantesdt:
mulss xmm0,[sdtspeedmultalloc]
jmp weaponCheck

weaponCheck:
cmp dword ptr [dmc2.exe+158A71C],0x00000001
je playerSprint
cmp byte ptr [CurrentSword],00
je rebellionSpeed
//Merciless
cmp byte ptr [CurrentSword],01
je mercilessSpeed
//Vendetta
cmp byte ptr [CurrentSword],02
je vendettaSpeed

playerSprint:
cmp dword ptr [InputPressed02],0x00000400
je executePlayerSprint
jmp originalcode

executePlayerSprint:
mulss xmm0,[sprintSpeed_lastcharstate]
jmp originalcode

rebellionSpeed:
mulss xmm0,[weaponmultalloc]
jmp originalcode

mercilessSpeed:
mulss xmm0,[merciless_weaponmultalloc]
jmp originalcode

vendettaSpeed:
mulss xmm0,[vendetta_weaponmultalloc]
jmp originalcode

originalcode:
push eax
mov eax, [dmc2.exe+158A848]
mov [lastCharState], eax
mov eax, [dmc2.exe+158A71C]
mov [lastAction_lastcharstate], eax
pop eax
movss [rcx+00000094],xmm0
jmp returnhere

exit:
jmp returnhere

"dmc2.exe"+2D3C70:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
dealloc(newmem)
"dmc2.exe"+2D3C70:
movss [rcx+00000094],xmm0
//Alt: db F3 0F 11 81 94 00 00 00

dealloc(movemultalloc)
dealloc(speedmultalloc)
dealloc(weaponmultalloc)
dealloc(lastCharState)
unregistersymbol(lastCharState)
unregistersymbol(weaponmultalloc)
unregistersymbol(movemultalloc)
unregistersymbol(speedmultalloc)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>999</ID>
                  <Description>"Speed Mult"</Description>
                  <VariableType>Float</VariableType>
                  <Address>speedmultalloc</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1000</ID>
                  <Description>"DT Speed Mult"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>speedmultalloc+4</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1001</ID>
                  <Description>"SDT Speed Mult"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>speedmultalloc+8</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1002</ID>
                  <Description>"Move Speed Adjustments"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1003</ID>
                      <Description>"Standard Combo A Finisher"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+4</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1004</ID>
                      <Description>"Combo B Finisher [OverheadKick]"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+8</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1005</ID>
                      <Description>"Combo C Finisher [Sweep-&gt;Overhead]"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+C</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1006</ID>
                      <Description>"High Time"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+10</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1007</ID>
                      <Description>"Darts (Doesn't seem to work?)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+14</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1008</ID>
                      <Description>"Grounded Cranky Bomb Drop"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+18</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1009</ID>
                      <Description>"DT Overhead Slash"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+1C</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1010</ID>
                      <Description>"DT Rapid Slash"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+20</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1011</ID>
                      <Description>"Combo B Double Kick"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+24</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1012</ID>
                      <Description>"Helm Splitter"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+28</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1013</ID>
                      <Description>"Air Raid Activation"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+2C</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>1016</ID>
                  <Description>"Weapon-Specific Modifiers"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1017</ID>
                      <Description>"Cutlaseer Speed Modifier"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>weaponmultalloc</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1018</ID>
                      <Description>"Klyamoor Speed Modifier"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>weaponmultalloc+4</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1019</ID>
                      <Description>"Zambak Speed Modifier"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>weaponmultalloc+8</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1113</ID>
          <Description>"Settings"</Description>
          <Options moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>1114</ID>
              <Description>"Disable DT Cooldown (See values dropdown)"</Description>
              <DropDownList>30:Safe Disable
0:Aggressive Disable
</DropDownList>
              <VariableType>2 Bytes</VariableType>
              <Address>dmc2.exe+158A85E</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1115</ID>
              <Description>"DT Gain Multiplier"</Description>
              <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+588E0)
alloc(dtmultalloc,64)
label(returnhere)
label(originalcode)
label(exit)
registersymbol(dtmultalloc)
dtmultalloc:
dd (float)1.0

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push eax //prepare eax
xor eax,eax //clear eax
mov ax, r9w //move build dt to eax register
cvtsi2ss xmm0,eax //convert to float
mulss xmm0, [dtmultalloc] //multiply by dt multiplier specified in table
cvttss2si eax,xmm0 //convert back to int
//imul r9w,[dtmultalloc]
mov r9w, ax
add cx,r9w
pop eax
cmp cx,ax

originalcode:
add cx,r9w
cmp cx,ax

exit:
jmp returnhere

"dmc2.exe"+588E0:
jmp newmem
nop 2
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(dtmultalloc)
unregistersymbol(dtmultalloc)
"dmc2.exe"+588e0:
add cx,r9w
cmp cx,ax
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1116</ID>
                  <Description>"DT Gain Multiplier Value"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>dtmultalloc</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1117</ID>
              <Description>"Modern Style Loss System"</Description>
              <Options moHideChildren="1"/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//Reworks aspects of the Style system to match DMC3/4/5's system.
alloc(newmem,2048,"dmc2.exe"+5A4CF)
alloc(newmem02,2048,"dmc2.exe"+23206E)
alloc(stylelosshandler,2048,"dmc2.exe"+23DF64)
//
label(returnhere)
label(hitlossdone)
label(originalcode)
label(exit)
label(decaycomp)
label(removeStyleRating)
label(styletest)
label(setStyleRatingToA)
label(setStyleRatingToB)
label(setStyleRatingToC)
label(setStyleRatingToD)
label(resetStyleDecayTimer)
//
alloc(stylelosstimer,64)
alloc(xmholder,64)
alloc(onhitstylelossscalar,64)
alloc(styleptstoloseondecay,64)
//
registersymbol(stylelosstimer)
registersymbol(onhitstylelossscalar)
registersymbol(styleptstoloseondecay)
//
stylelosstimer:
dd (float)180
xmholder:
dd (float)0
onhitstylelossscalar:
dd (float)2.0 //default: lose half of your style points
//don't go below 1.0 or else you gain style for being hit

newmem: //Overrides the game's original starting timer for style decay.
//For some reason the game uses a float here.
movss [xmholder],xmm0
movss xmm0,[stylelosstimer]
movss [r8+00000634],xmm0
movss xmm0,[xmholder]
jmp exit
//
//
newmem02: //On-Hit Style Loss overrides
push eax
xor eax,eax
mov eax, ["dmc2.exe"+158A968] //places player's style points in eax
cvtsi2ss xmm0, eax
divss xmm0, [onhitstylelossscalar] //Divides style points by scalar specified in CT
cvttss2si eax,xmm0
cmp eax, 5DC
jle hlpRemoveStyle
mov ["dmc2.exe"+158A968], eax
pop eax
//Reset style decay timer to what's specified in CT
movss [xmholder],xmm0
movss xmm0,[stylelosstimer]
movss [dmc2.exe+158A964],xmm0
movss xmm0,[xmholder]
jmp hitlossdone
//
//
stylelosshandler: //Custom behavior when the style loss timer runs out
//Remove all style pts if timer expires on D rank
push eax
xor eax, eax
//mov eax, [rbx+00000638]
//mov [styleptstoloseondecay], eax
mov ax, 4E20
//mov [styleptstoloseondecay], 20000
//Modern DMC system from here, lose 1 rank every time timer hits 0
cmp dword ["dmc2.exe"+158A968], eax
jge setStyleRatingToA
mov ax, 3A98
cmp dword ["dmc2.exe"+158A968], eax
jge setStyleRatingToB
mov ax, 2710
cmp dword ["dmc2.exe"+158A968], eax
jge setStyleRatingToC
mov ax, 1388
cmp dword ["dmc2.exe"+158A968], eax
jge setStyleRatingToD
pop eax
jmp removeStyleRating
//done
jmp decaycomp
//
//
resetStyleDecayTimer:
movss [xmholder],xmm0
movss xmm0,[stylelosstimer]
movss [dmc2.exe+158A964],xmm0
movss xmm0,[xmholder]
ret
//
//
hlpRemoveStyle:
pop eax
mov ["dmc2.exe"+158A968], 0
jmp hitlossdone
//
//
removeStyleRating: //helper function to reset player's style using vanilla call
mov [dmc2.exe+158A968], 0
jmp decaycomp
//
//
setStyleRatingToA: //S returns to A rank
pop eax
mov [styleptstoloseondecay], 10F2C
mov dword [dmc2.exe+158A968], 3A98
movss [xmholder],xmm0
movss xmm0,[stylelosstimer]
movss [dmc2.exe+158A964],xmm0
movss xmm0,[xmholder]
jmp decaycomp
//
//
setStyleRatingToB: //S returns to A rank
pop eax
mov [styleptstoloseondecay], 4
mov dword [dmc2.exe+158A968], 2710
movss [xmholder],xmm0
movss xmm0,[stylelosstimer]
movss [dmc2.exe+158A964],xmm0
movss xmm0,[xmholder]
jmp decaycomp
//
//
setStyleRatingToC: //S returns to A rank
pop eax
mov [styleptstoloseondecay], 3
mov dword [dmc2.exe+158A968], 1388
movss [xmholder],xmm0
movss xmm0,[stylelosstimer]
movss [dmc2.exe+158A964],xmm0
movss xmm0,[xmholder]
jmp decaycomp
//
//
setStyleRatingToD: //S returns to A rank
pop eax
mov [styleptstoloseondecay], 2
mov dword [dmc2.exe+158A968], 5DC
movss [xmholder],xmm0
movss xmm0,[stylelosstimer]
movss [dmc2.exe+158A964],xmm0
movss xmm0,[xmholder]
jmp decaycomp
//
//
styletest:
mov [rbx+00000638],esi
//
//
originalcode: //original timer code
mov [r8+00000634],42DC0000 //default timer value is 110.0
//
//
exit:
jmp returnhere
//
//
"dmc2.exe"+5A4CF: //style point timer
jmp newmem
nop 6
returnhere:
//
//
"dmc2.exe"+23206E: //on-hit style loss
jmp newmem02
nop 5
hitlossdone:
//
//
"dmc2.exe"+23DF64: //called when style point timer empties
//mov [rbx+00000638],esi
jmp stylelosshandler
nop
decaycomp:
//
//
[DISABLE]
dealloc(newmem)
dealloc(newmem02)
dealloc(stylelosshandler)
dealloc(stylelosstimer)
dealloc(xmholder)
dealloc(onhitstylelossscalar)
dealloc(styleptstoloseondecay)
unregistersymbol(stylelosstimer)
unregistersymbol(onhitstylelossscalar)
unregistersymbol(styleptstoloseondecay)
"dmc2.exe"+5a4cf:
mov [r8+00000634],42DC0000
"dmc2.exe"+23206E:
mov [rbx+00000634],3A83126F
"dmc2.exe"+23DF64:
mov [rbx+00000638],esi
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1118</ID>
                  <Description>"Time Before a Style Rank Is Lost"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>stylelosstimer</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1119</ID>
                  <Description>"Divide Style Points by (value) When Hit"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>onhitstylelossscalar</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1120</ID>
                  <Description>"DEBUG: Last style rank when timer hit 0"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>2 Bytes</VariableType>
                  <Address>styleptstoloseondecay</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1121</ID>
                  <Description>"DEBUG: Time Remaining in Combo"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>dmc2.exe+158A964</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1122</ID>
                  <Description>"DEBUG: Style Pts HUD Time"</Description>
                  <VariableType>2 Bytes</VariableType>
                  <Address>dmc2.exe+158A966</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1123</ID>
              <Description>"Style Point Gain Multiplier"</Description>
              <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+5A4BC)
label(returnhere)
label(originalcode)
label(exit)
alloc(styleptsscalar,64)
registersymbol(styleptsscalar)
styleptsscalar:
dd (float)1.5

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
mulss xmm1,[styleptsscalar]
cvttss2si eax,xmm1
test r10d,r10d

exit:
jmp returnhere

"dmc2.exe"+5A4BC:
jmp newmem
nop 2
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(styleptsscalar)
"dmc2.exe"+5a4bc:
cvttss2si eax,xmm1
test r10d,r10d
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1124</ID>
                  <Description>"Style Points Gain Multiplier Value"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>styleptsscalar</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1125</ID>
              <Description>"Loadout Hotswapper - Use D-Pad and Right Trigger"</Description>
              <Options moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>//Thank you Siyan!
[ENABLE]
aobscanmodule(styleswitchinglol,dmc2.exe,C0 48 89 41 08 48 89 41 10) // should be unique
alloc(newmem,$1000,"dmc2.exe"+19372)
alloc(lastUsedInput,64)
alloc(regAfterBitmask,64)
alloc(allowDodgeOffset,64)
alloc(dodgeOffsetContinueOK,64)
alloc(useInstantSDT,64)
alloc(setSwordRotBind,64)
define(CurrentCharacter,dmc2.exe+1588B31)
label(rotateSword)
label(returnhere)
label(finished)
label(testForHold)
label(amuletTestForHold)
label(checkAmuletToRotate)
label(rotateLeftAmulet)
label(rotateRightAmulet)
label(rotateTopAmulet)
label(setRightAmuletToQuick)
label(setLeftAmuletToHealing)
label(setLeftAmuletToOffence)
label(setTopAmuletToFrost)
label(setTopAmuletToElectro)
label(cycleToMerciless)
label(cycleToVendetta)
label(cycleToRebellion)
label(L3SwordRotation)
define(inputpressed,dmc2.exe+7DD68D)
define(CurrentSword,dmc2.exe+158A80F)
registersymbol(inputpressed)
registersymbol(lastUsedInput)
registersymbol(regAfterBitmask)
registersymbol(allowDodgeOffset)
registersymbol(dodgeOffsetContinueOK)
registersymbol(useInstantSDT)
registersymbol(setSwordRotBind)
useInstantSDT:
dw (int)0

const_useInstantSDT:
dd (float)1.2

restore_useInstantSDT:
db (int)0

allowDodgeOffset:
db (int)1

lastUsedInput:
dw (int)0

setSwordRotBind:
db (int)0

//Check to see if current button input is Right Trigger (Disable Lock-on)
newmem:
//check if an SDT cancel was done last cycle
cmp [restore_useInstantSDT],1
je restoreDT
//Re-do the bitmask for checking D-Pad inputs
push eax
mov eax, [inputpressed]
and eax, 0xFFFFFFF0
mov [regAfterBitmask], eax
pop eax
cmp byte [regAfterBitmask],0x80
je amuletTestForHold
cmp byte [regAfterBitmask],0x10
je amuletTestForHold
cmp byte [regAfterBitmask],0x20
je amuletTestForHold
//Lucia doesn't have SDT
//cmp byte [regAfterBitmask],0x40
//je sdtTestForHold
//dodge offset needs raw value
push eax
mov eax, [inputpressed-1]
and eax, 0x000000FF
mov [regAfterBitmask], eax
pop eax
//Dodge Inputs
cmp byte [regAfterBitmask],0x20
je testForCharacter
cmp byte [regAfterBitmask],0x28
je testForCharacter
//Dodge Offset Inputs (Attack + Dodge [LOCK-ON OK])
cmp byte [regAfterBitmask],0x30
je testForCharacter
cmp byte [regAfterBitmask],0x38
je testForCharacter
//jank cancel inputs
cmp byte [regAfterBitmask],0x40
je testDupeInputsJC
cmp byte [regAfterBitmask],0x48
je testDupeInputsJC
cmp byte [regAfterBitmask],0x50
je testDupeInputsJC
cmp byte [regAfterBitmask],0x58
je testDupeInputsJC
//L3 Weapon Swap Rebind
cmp byte [setSwordRotBind],0x1
je L3SwordRotation
//Placing original bind functionality afterwards lets us skip checking RT
//Apply a bitmask to the currently held inputs to get only the first value
push eax
mov eax, [inputpressed-1]
and eax, 0x0000000F
mov [regAfterBitmask], eax
pop eax
//Jump if any combination of the triggers/bumpers also includes RT
cmp byte [regAfterBitmask],02
je testForHold
cmp byte [regAfterBitmask],06
je testForHold
cmp byte [regAfterBitmask],0x0A
je testForHold
cmp byte [regAfterBitmask],0x0F
je testForHold
cmp byte [regAfterBitmask],0x0E
je testForHold
cmp byte [regAfterBitmask],03
je testForHold
cmp byte [regAfterBitmask],07
je testForHold
jmp returnhere

L3SwordRotation:
//Apply a bitmask to the currently held inputs to get only the first value
push eax
mov eax, [inputpressed-1]
and eax, 0x00000F00
mov [regAfterBitmask], eax
pop eax
cmp [regAfterBitmask],0x200
je testForHold
jmp returnhere

//Duplicate code from sword switcher
amuletTestForHold:
push eax
mov eax, [lastUsedInput+1]
and eax, 0xFFFFFFF0
mov [regAfterBitmask], eax
pop eax
//check for duplicate d-pad inputs
cmp [regAfterBitmask],0x80
je returnhere
cmp [regAfterBitmask],0x10
je returnhere
cmp [regAfterBitmask],0x20
je returnhere
cmp [regAfterBitmask],0x40
je returnhere
jmp checkAmuletToRotate

checkAmuletToRotate:
//This is awful. Clean it up later?
//Re-do the bitmask for checking D-Pad inputs
push eax
mov eax, [inputpressed]
and eax, 0xFFFFFFF0
mov [regAfterBitmask], eax
pop eax
cmp byte [regAfterBitmask],0x80
je rotateLeftAmulet
cmp byte [regAfterBitmask],0x10
je rotateTopAmulet
cmp byte [regAfterBitmask],0x20
je rotateRightAmulet
jmp returnhere

//Rotates right amulet between Quick and Aerial hearts.
//Aqua Heart is ignored for obvious reasons.
rotateRightAmulet:
cmp byte ptr [dmc2.exe+158A849], 2
je setRightAmuletToQuick
mov byte ptr [dmc2.exe+158A849], 2
jmp returnhere

setRightAmuletToQuick:
mov byte ptr [dmc2.exe+158A849], 3
jmp returnhere

//Rotates left amulet between Chrono/Healing/Offence.
//Maybe add option to ignore Healing Heart?
rotateLeftAmulet:
cmp byte ptr [dmc2.exe+158A84B], 1
je setLeftAmuletToHealing
cmp byte ptr [dmc2.exe+158A84B], 2
je setLeftAmuletToOffence
mov byte ptr [dmc2.exe+158A84B], 1
jmp returnhere

setLeftAmuletToHealing:
mov byte ptr [dmc2.exe+158A84B], 2
jmp returnhere

setLeftAmuletToOffence:
mov byte ptr [dmc2.exe+158A84B], 3
jmp returnhere

//Rotates top amulet between Flame/Frost/Electro.
rotateTopAmulet:
cmp byte ptr [dmc2.exe+158A84A], 1
je setTopAmuletToFrost
cmp byte ptr [dmc2.exe+158A84A], 2
je setTopAmuletToElectro
mov byte ptr [dmc2.exe+158A84A], 1
jmp returnhere

setTopAmuletToFrost:
mov byte ptr [dmc2.exe+158A84A], 2
jmp returnhere

setTopAmuletToElectro:
mov byte ptr [dmc2.exe+158A84A], 3
jmp returnhere

//Blocks swords rotating by holding button
testForHold:
//Apply a bitmask to the currently held inputs to get only the first value
push eax
mov eax, [lastUsedInput]
and eax, 0x0000000F
mov [regAfterBitmask], eax
pop eax
//messy shit
//Check for duplicate RT inputs
cmp [regAfterBitmask],0x0F
je returnhere
cmp [regAfterBitmask],06
je returnhere
cmp [regAfterBitmask],0x0A
je returnhere
cmp [regAfterBitmask],0x0E
je returnhere
cmp [regAfterBitmask],03
je returnhere
cmp [regAfterBitmask],02
je returnhere
cmp [regAfterBitmask],07
je returnhere
push eax
mov eax, [lastUsedInput]
and eax, 0x00000F00
mov [regAfterBitmask], eax
pop eax
cmp [regAfterBitmask],0x200
je returnhere
//If no duped inputs, rotate sword
jmp rotateSword

//Rotates sword to next value
rotateSword:
//Ignore this section if playing as Trish
//This avoids a crash if you try to swap her sword
cmp byte ptr [CurrentCharacter], 0x02
je returnhere
//Swap Swords
cmp byte ptr [CurrentSword],00
je cycleToMerciless
cmp byte ptr [CurrentSword],01
je cycleToVendetta
cmp byte ptr [CurrentSword],02
je cycleToRebellion
jmp returnhere

cycleToMerciless:
mov byte ptr [CurrentSword],01
jmp returnhere

cycleToVendetta:
mov byte ptr [CurrentSword],02
jmp returnhere

cycleToRebellion:
mov byte ptr [CurrentSword],00
jmp returnhere

testForCharacter:
//check if dodge offset is enabled
cmp byte ptr [dmc2.exe+158A86E], 0
jne returnhere
cmp [allowDodgeOffset], 1
jne returnhere
//fixes softlock in underwater sections
cmp byte ptr [dmc2.exe+158A716], 4
je returnhere
//check if current character is Lucia, otherwise end
//cmp [dmc2.exe+1588B30],0100
//je testForHold_DodgeOffset
//cmp [dmc2.exe+1588B30],0501
//je testForHold_DodgeOffset
//cmp [dmc2.exe+1588B30],0301
//je testForHold_DodgeOffset
//cmp [dmc2.exe+1588B30],0701
//je testForHold_DodgeOffset
jmp testForHold_DodgeOffset

testForHold_DodgeOffset:
//Apply a bitmask to the currently held inputs to get only the first value
push eax
mov eax, [lastUsedInput]
and eax, 0x0000000F
mov [regAfterBitmask], eax
pop eax
//messy shit
//Check for duplicate inputs
//Dodge Offset Input (Attack + Dodge)
cmp byte [regAfterBitmask],0x20
je returnhere
//Free Dodge
cmp byte [regAfterBitmask],0x28
je returnhere
cmp byte [regAfterBitmask],0x30
je returnhere
cmp byte [regAfterBitmask],0x38
je returnhere
jmp tryFreeDodge

tryFreeDodge:
//god i hope the last action ID is updated by now
//lol of course it isnt
//disable dodge offset when in DT
cmp byte ptr [dmc2.exe+158A848],0x1
je returnhere
jmp executeFreeDodge

executeFreeDodge:
mov [dodgeOffsetContinueOK], 0
mov [dmc2.exe+158A714],0x0
//dodge offset needs raw value
push ebx
mov ebx, [inputpressed-1]
and ebx, 0x000000FF
mov [regAfterBitmask], ebx
pop ebx
//Dodge Offset Input (Attack + Dodge)
cmp byte [regAfterBitmask],0x30
je executeDodgeOffset
cmp byte [regAfterBitmask],0x38
je executeDodgeOffset
jmp returnhere

executeDodgeOffset:
mov [dodgeOffsetContinueOK], 0x1
jmp returnhere

testDupeInputsJC:
//Apply a bitmask to the currently held inputs to get only the first value
push eax
mov eax, [lastUsedInput]
and eax, 0x0000000F
mov [regAfterBitmask], eax
pop eax
//messy shit
//Check for duplicate inputs
//JC Input is just jump
cmp byte [regAfterBitmask],0x40
je returnhere
//Free Dodge
cmp byte [regAfterBitmask],0x48
je returnhere
cmp byte [regAfterBitmask],0x49
je returnhere
//cmp byte [regAfterBitmask],0x50
//je returnhere
//cmp byte [regAfterBitmask],0x58
//je returnhere
jmp tryJankCancel

tryJankCancel:
//disable jank cancel when in DT
//might not need this since there's always an action tied to jump
cmp [allowJankCancel],1
jne returnhere
//Disable JCs in DT/SDT because fuck
cmp byte ptr [dmc2.exe+158A848],0x0
jne returnhere
jmp executeJankCancel

executeJankCancel:
//cmp byte ptr [dmc2.exe+158A354],1
//jne returnhere
mov [dmc2.exe+158A872],1
//mov [dmc2.exe+158A3C4],999.0
mov [dmc2.exe+158A714],0x2
mov [jankCancelSaveInertia],1
mov [jankCancelTimer],0
mov [allowJankCancel],0
jmp returnhere

returnhere:
  push eax
  mov eax, [inputpressed-1]
  mov [lastUsedInput], eax
  pop eax
  mov [rcx+08],rax
  mov [rcx+10],rax
  //decrement the jank cancel timer by 1
  jmp jankCancelTimerHandler
  //jmp finished

jankCancelTimerHandler:
cmp [jankCancelTimer],0
jg decrementJCTimer
cmp byte ptr [dmc2.exe+158A872],2
je removeJCJump
mov [allowJankCancel],0
mov [jankCancelTimer],0
jmp finished

removeJCJump:
mov byte ptr [dmc2.exe+158A872],0
mov [allowJankCancel],0
mov [jankCancelTimer],0
jmp finished

decrementJCTimer:
sub [jankCancelTimer],1
jmp finished

//Duplicate code from sword switcher
sdtTestForHold:
push eax
mov eax, [lastUsedInput+1]
and eax, 0xFFFFFFF0
mov [regAfterBitmask], eax
pop eax
//check for duplicate d-pad inputs
cmp [regAfterBitmask],0x40
je returnhere
jmp tryInstantSDT

tryInstantSDT:
cmp byte ptr [dmc2.exe+158A848],2
je executeSDTCancel
jmp returnhere

executeSDT:
mov [useInstantSDT],1
call dmc2.exe+230FB0
jmp returnhere

executeSDTCancel:
push eax
mov eax, [dmc2.exe+158A84E]
mov [dmc2.exe+158A84E],0
//slightly boost DT when cancelling SDT to mimic 5's Quadruple S
//cvtsi2ss xmm0,eax
//mulss xmm0,[const_useInstantSDT]
//cvttss2si eax,xmm0
cmp eax,0x12C0
jge quadSPrep
mov [useInstantSDT],eax
mov [restore_useInstantSDT],1
//mov [dmc2.exe+158A84E],eax
pop eax
jmp returnhere

quadSPrep:
mov [useInstantSDT],0x17A0
mov [restore_useInstantSDT],1
pop eax
jmp returnhere

restoreDT:
mov [restore_useInstantSDT],0
push eax
mov eax, [useInstantSDT]
mov [dmc2.exe+158A84E],eax
pop eax
mov [useInstantSDT],0
jmp newmem

styleswitchinglol+01:
jmp newmem
nop
nop
nop
finished:
registersymbol(styleswitchinglol)

[DISABLE]
dealloc(newmem)
dealloc(lastUsedInput)
dealloc(regAfterBitmask)
dealloc(allowDodgeOffset)
dealloc(dodgeOffsetMoveID)
dealloc(setSwordRotBind)
unregistersymbol(lastUsedInput)
unregistersymbol(styleswitchinglol)
unregistersymbol(regAfterBitmask)
unregistersymbol(allowDodgeOffset)
unregistersymbol(dodgeOffsetContinueOK)
unregistersymbol(inputpressed)
unregistersymbol(setSwordRotBind)
styleswitchinglol+01:
  db 48 89 41 08 48 89 41 10

{
// ORIGINAL CODE - INJECTION POINT: "dmc2.exe"+19372

"dmc2.exe"+19367: CC                    -  int 3
"dmc2.exe"+19368: CC                    -  int 3
"dmc2.exe"+19369: CC                    -  int 3
"dmc2.exe"+1936A: CC                    -  int 3
"dmc2.exe"+1936B: CC                    -  int 3
"dmc2.exe"+1936C: CC                    -  int 3
"dmc2.exe"+1936D: CC                    -  int 3
"dmc2.exe"+1936E: CC                    -  int 3
"dmc2.exe"+1936F: CC                    -  int 3
"dmc2.exe"+19370: 33 C0                 -  xor eax,eax
// ---------- INJECTING HERE ----------
"dmc2.exe"+19372: 48 89 41 08           -  mov [rcx+08],rax
"dmc2.exe"+19376: 48 89 41 10           -  mov [rcx+10],rax
// ---------- DONE INJECTING  ----------
"dmc2.exe"+1937A: 48 89 41 18           -  mov [rcx+18],rax
"dmc2.exe"+1937E: 48 89 41 20           -  mov [rcx+20],rax
"dmc2.exe"+19382: 48 89 41 28           -  mov [rcx+28],rax
"dmc2.exe"+19386: 48 89 41 30           -  mov [rcx+30],rax
"dmc2.exe"+1938A: C3                    -  ret
"dmc2.exe"+1938B: CC                    -  int 3
"dmc2.exe"+1938C: CC                    -  int 3
"dmc2.exe"+1938D: CC                    -  int 3
"dmc2.exe"+1938E: CC                    -  int 3
"dmc2.exe"+1938F: CC                    -  int 3
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1126</ID>
                  <Description>"Allow Dodge Cancels"</Description>
                  <DropDownList>1:Enable
0:Disable
</DropDownList>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>4 Bytes</VariableType>
                  <Address>allowDodgeOffset</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1133</ID>
                  <Description>"Lucia - Unique Sword Movesets"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"dmc2.exe"+23D547) 
label(returnhere)
label(originalcode)
label(exit)
alloc(moveswapalloc,8)
alloc(previousMoveID,64)
define(CurrentSword,dmc2.exe+158A80F)
registersymbol(previousMoveID)
registersymbol(moveswapalloc)
moveswapalloc:
db 0

newmem:
//Before we do any move swaps, check to see what sword
//is currently equipped so we can declone the swords.
//
//Need to change the moveID in ebx directly
//so Dodge Offset doesn't need hardcoding for each sword
//
//oh how wrong i was
//
//Check for Dodge Offset
//comically stupid workaround for guns getting swapped
push eax
mov eax, [inputpressed-1]
and eax, 0x000000FF
mov [regAfterBitmask], eax
pop eax
cmp byte [regAfterBitmask],0x80
je originalcode
cmp byte [regAfterBitmask],0xC0
je originalcode
cmp byte [regAfterBitmask],0xA0
je originalcode
cmp byte [regAfterBitmask],0x88
je originalcode
cmp [dodgeOffsetContinueOK], 1
je dodgeOffsetOverride
push ebx
mov ebx, [moveswapalloc]
mov [previousMoveID], ebx
pop ebx
cmp byte ptr [CurrentSword],00
je cutlaseerMoveSwaps
cmp byte ptr [CurrentSword],01
je klyamoorMoveSwaps
cmp byte ptr [CurrentSword],02
je zambakMoveSwaps
//just in case this SOMEHOW breaks
jmp originalcode
//

//replaces the incoming moveID with the
//last one read by moveswapalloc,
//then calls the original moveswap code (yes it's recursive im sorry)
dodgeOffsetOverride:
//Ignore Dodge Offset if player is in standing/running state
mov [dodgeOffsetContinueOK],0
push eax
mov eax, [dmc2.exe+158A71C]
cmp eax, 0x00000000
pop eax
jne newmem
//cmp byte ptr [CurrentSword],00
jmp cutlaseerDodgeOffset
//cmp byte ptr [CurrentSword],01
//je klyamoorDodgeOffset
//cmp byte ptr [CurrentSword],02
//je zambakDodgeOffset
jmp newmem

klyamoorDodgeOffset:
//Jab 1 -&gt; Jab 2
cmp [moveswapalloc], 0x00000000
je klj1j2
//Jab 2 -&gt; Jab 3
cmp [moveswapalloc], 0x00000002
je klj2j3
//TiltJab 1 -&gt; TiltJab2
cmp [moveswapalloc], 0x00000001
je kltj1tj2
//TiltJab 2 -&gt; TiltJab3
cmp [moveswapalloc], 0x00000009
je kltj2tj3
mov al, [moveswapalloc]
jmp newmem

//klya j1 to j2
klj1j2:
//check if tilt input, if so then go to tilt 2
mov [moveswapalloc], eax
cmp [moveswapalloc], 0x00000001
je kltj1tj2
mov [moveswapalloc], 0x00000002
mov al, [moveswapalloc]
jmp newmem

//klya j2 to j3
klj2j3:
mov [moveswapalloc], 0x00000003
mov al, [moveswapalloc]
jmp newmem

//klya tilt j1 to tilt j2
kltj1tj2:
//check if non-tilt input, if so then go to non-tilt 2
mov [moveswapalloc], eax
cmp [moveswapalloc], 0x00000000
je klj1j2
//replace with tj2
mov [moveswapalloc], 0x00000009
mov al, [moveswapalloc]
jmp newmem

//klay tilt j2 to tilt j3
kltj2tj3:
mov [moveswapalloc], 0x0000000A
mov al, [moveswapalloc]
jmp newmem

cutlaseerDodgeOffset:
//Jab 1 -&gt; Jab 2
cmp [moveswapalloc], 0x00000000
je csj1j2
//Jab 2 -&gt; Jab 3
cmp [moveswapalloc], 0x00000002
je csj2j3
//TiltJab 1 -&gt; TiltJab2
cmp [moveswapalloc], 0x00000001
je cstj1tj2
//TiltJab 2 -&gt; TiltJab3
cmp [moveswapalloc], 0x00000009
je cstj2tj3
mov al, [moveswapalloc]
jmp newmem

//cutlass j1 to j2
csj1j2:
//check if tilt input, if so then go to tilt 2
mov [moveswapalloc], eax
cmp [moveswapalloc], 0x00000001
je cstj1tj2
mov [moveswapalloc], 0x00000002
mov al, [moveswapalloc]
jmp newmem

//cutlass j2 to j3
csj2j3:
mov [moveswapalloc], 0x00000003
mov al, [moveswapalloc]
jmp newmem

//cutlass tilt j1 to tilt j2
cstj1tj2:
//check if non-tilt input, if so then go to non-tilt 2
mov [moveswapalloc], eax
cmp [moveswapalloc], 0x00000000
je csj1j2
//replace with tj2
mov [moveswapalloc], 0x00000009
mov al, [moveswapalloc]
jmp newmem

//cutlass tilt j2 to tilt j3
cstj2tj3:
mov [moveswapalloc], 0x0000000A
mov al, [moveswapalloc]
jmp newmem

zambakDodgeOffset:

//Move Swaps Legend:
// ^: Tilt Input

//Cutlaseer is pretty strong as-is.
//note: cmov doesn't support what we're doing so we need a label for each swap
cutlaseerMoveSwaps:
mov [moveswapalloc],eax
//cmp [moveswapalloc],0x00000010
//je cutlaseer_airraveHelmBreaker
cmp [moveswapalloc],0x00000010
je tryAirHighTime
cmp [moveswapalloc],0x00000011
je tryAirHighTime
//always end with a jump to originalcode
jmp originalcode

cutlaseer_airraveHelmBreaker:
mov byte ptr [r10+00003EC],0x13
jmp originalcode

tryAirHighTime:
//Dodge inputs
cmp byte [regAfterBitmask],0x20
je doAirHighTime
cmp byte [regAfterBitmask],0x28
je doAirHighTime
//Dodge Offset Inputs (Attack + Dodge [LOCK-ON OK])
cmp byte [regAfterBitmask],0x30
je doAirHighTime
cmp byte [regAfterBitmask],0x38
je doAirHighTime
jmp originalcode

doAirHighTime:
mov byte ptr [r10+000003EC],0x0F
jmp returnhere

//Klyamoor is pretty useless for Lucia. Let's give it a
//similar treatment to Merciless and make it a light-weight
//but low damage alternative to Cutlaseer.

//C
klyamoorMoveSwaps:
mov [moveswapalloc],eax
cmp [moveswapalloc],0x0000000A
je klyamoor_tilt3topspin
cmp [moveswapalloc],0x00000009
je klyamoor_tilt2standard2
cmp [moveswapalloc],0x0000000E
je klyamoor_stingerRapidFireKick
cmp [moveswapalloc],0x00000002
je klyamoor_jab2dtdouble
cmp [moveswapalloc],0x00000010
je klyamoor_airraveAirStinger
jmp originalcode

klyamoor_airraveAirStinger:
mov byte ptr [r10+000003EC],0x12
jmp returnhere

klyamoor_stingerRapidFireKick:
mov byte ptr [r10+000003EC],0x17
jmp returnhere

klyamoor_tilt3topspin:
mov byte ptr [r10+000003EC],0x17
jmp returnhere

klyamoor_tilt2standard2:
mov byte ptr [r10+000003EC],0x2
jmp returnhere

klyamoor_jab2dtdouble:
mov byte ptr [r10+000003EC],0xC
jmp returnhere


//Give Zambak the DT moveset outside of DT, and
//remove most of the kicks for increased damage.
//18, 19
zambakMoveSwaps:
mov [moveswapalloc],eax
cmp [moveswapalloc],0x0000000E
je zambak_stingerCTDoubleSlash
cmp [moveswapalloc],0x00000009
je zambak_12Overhead
cmp [moveswapalloc],0x0000000A
je zambak_123RapidSlash
cmp [moveswapalloc],0x00000004
je zambak_12doublekick
cmp [moveswapalloc],0x00000007
je zambak_dtrapidAerialCross1
cmp [moveswapalloc],0x00000008
je zambak_dtrapidfinishAerialCross2
cmp [moveswapalloc],0x00000010
je zambak_aerialCross1
cmp [moveswapalloc],0x00000011
je zambak_aerialCross2
cmp [moveswapalloc],0x0000000f
je zambak_launcher
jmp originalcode

zambak_launcher:
mov word ptr [r10+000003EC],0x08
jmp returnhere

zambak_aerialCross1:
mov byte ptr [r10+000003EC],0x18
jmp returnhere

zambak_aerialCross2:
mov byte ptr [r10+000003EC],0x19
jmp returnhere

zambak_dtrapidAerialCross1:
cmp byte ptr [dmc2.exe+158A848],0x01
jne originalcode
mov byte ptr [r10+000003EC],0x18
jmp returnhere

zambak_dtrapidfinishAerialCross2:
cmp byte ptr [dmc2.exe+158A848],0x01
jne originalcode
mov byte ptr [r10+000003EC],0x19
jmp returnhere

zambak_stingerCTDoubleSlash:
mov byte ptr [r10+000003EC],0x06
jmp returnhere

zambak_12Overhead:
mov byte ptr [r10+000003EC],0x0B
jmp returnhere

zambak_123RapidSlash:
mov byte ptr [r10+000003EC],0x0D
jmp returnhere

zambak_12doublekick:
mov byte ptr [r10+000003EC],0x07
jmp returnhere

zambak_airraveAirStinger:
mov byte ptr [r10+000003EC],0x12
jmp returnhere



//the al register holds the ID of the original move being executed.
//by comparing it to a move ID, we can then intercept this call
//and insert a different move ID instead.

originalcode:
mov [r10+000003EC],al
jmp returnhere

exit:
jmp returnhere

"dmc2.exe"+23D547:
jmp newmem
nop
nop
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+23D547:
mov [r10+000003EC],al
//Alt: db 41 88 82 EC 03 00 00

dealloc(moveswapalloc)
dealloc(previousMoveID)
unregistersymbol(previousMoveID)
unregistersymbol(moveswapalloc)
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1134</ID>
                      <Description>"Allow Dodge Offset?"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Byte</VariableType>
                      <Address>dodgeOffsetContinueOK</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1135</ID>
                      <Description>"Show Debug Info"</Description>
                      <Options moHideChildren="1"/>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>1136</ID>
                          <Description>"Move ID"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>dmc2.exe+158A71C</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1137</ID>
                          <Description>"Move Swap Mem"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <VariableType>4 Bytes</VariableType>
                          <Address>moveswapalloc</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1138</ID>
                          <Description>"move swap alloc"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <VariableType>4 Bytes</VariableType>
                          <Address>moveswapalloc</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1139</ID>
                          <Description>"premoveid"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>previousMoveID</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>1140</ID>
                  <Description>"Show Loadout Debug Info"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1141</ID>
                      <Description>"Equipped Sword"</Description>
                      <DropDownList>0:Rebellion
1:Merciless
2:Vendetta
</DropDownList>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Byte</VariableType>
                      <Address>dmc2.exe+158A80F</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1142</ID>
                      <Description>"DEBUG: LAST INPUT"</Description>
                      <ShowAsHex>1</ShowAsHex>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>4 Bytes</VariableType>
                      <Address>lastUsedInput</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1143</ID>
                      <Description>"regafterbitmask"</Description>
                      <ShowAsHex>1</ShowAsHex>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>4 Bytes</VariableType>
                      <Address>regAfterBitmask</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1144</ID>
                      <Description>"InputPressed"</Description>
                      <ShowAsHex>1</ShowAsHex>
                      <VariableType>4 Bytes</VariableType>
                      <Address>dmc2.exe+7DD68C</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1145</ID>
                      <Description>"Amulet Equip 1"</Description>
                      <DropDownList ReadOnly="1" DisplayValueAsItem="1">2:Aerial Heart
3:Quick Heart
</DropDownList>
                      <VariableType>Byte</VariableType>
                      <Address>dmc2.exe+158A849</Address>
                      <Hotkeys>
                        <Hotkey>
                          <Action>Toggle Activation</Action>
                          <Keys/>
                          <ID>0</ID>
                        </Hotkey>
                        <Hotkey>
                          <Action>Set Value</Action>
                          <Keys>
                            <Key>112</Key>
                          </Keys>
                          <Value>1</Value>
                          <ID>1</ID>
                        </Hotkey>
                      </Hotkeys>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1146</ID>
                      <Description>"Amulet Equip 2"</Description>
                      <DropDownList ReadOnly="1" DisplayValueAsItem="1">1:Flame Heart
2:Frost Heart
3:Electro Heart
</DropDownList>
                      <VariableType>Byte</VariableType>
                      <Address>dmc2.exe+158A84A</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1147</ID>
                      <Description>"Amulet Equip 3"</Description>
                      <DropDownList ReadOnly="1" DisplayValueAsItem="1">1:Chrono Heart
2:Healing Heart
3:Offence Heart
</DropDownList>
                      <VariableType>Byte</VariableType>
                      <Address>dmc2.exe+158A84B</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1148</ID>
                      <Description>"char"</Description>
                      <ShowAsHex>1</ShowAsHex>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Byte</VariableType>
                      <Address>dmc2.exe+1588B31</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>1626</ID>
                  <Description>"Weapon Switch Bind"</Description>
                  <DropDownList DisplayValueAsItem="1">0:Right Trigger
1:LS Click (L3)
</DropDownList>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Byte</VariableType>
                  <Address>setSwordRotBind</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1243</ID>
              <Description>"Swap Guns While Attacking"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
dmc2.exe+2306A0:
jmp dmc2.exe+2306B2

[DISABLE]
dmc2.exe+2306A0:
je dmc2.exe+2306B2
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1244</ID>
                  <Description>"This lets you swap guns while doing any action"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{
}
[ENABLE]
[DISABLE]
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1245</ID>
                      <Description>"Swapping during gun actions cancels those actions"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{
}
[ENABLE]
[DISABLE]
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>1246</ID>
                  <Description>"Customize your gun loadout below:"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{
}
[ENABLE]
[DISABLE]
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1247</ID>
                      <Description>"Skip Pistols"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+2306C5) 
label(returnhere)
label(originalcode)
label(nopistols)
label(exit)
alloc(weaponstore,4)
registersymbol(weaponstore)
weaponstore:
  db 0

newmem:
mov [weaponstore],al
cmp byte ptr [weaponstore],00
je nopistols
jmp originalcode

originalcode:
mov [rcx+000004DC],al
jmp returnhere

nopistols:
mov byte ptr [rcx+000004DC+2],01
jmp returnhere

exit:
jmp returnhere

"dmc2.exe"+2306C5:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+2306C5:
mov [rcx+000004DC],al
//Alt: db 88 81 DC 04 00 00

dealloc(weaponstore)
unregistersymbol(weaponstore)
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1248</ID>
                      <Description>"Skip Machine Guns"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+2306C5) 
label(returnhere)
label(originalcode)
label(nomachineguns)
label(exit)
alloc(weaponstore,4)
registersymbol(weaponstore)
weaponstore:
  db 0

newmem:
mov [weaponstore],al
cmp byte ptr [weaponstore],01
je nomachineguns
jmp originalcode

originalcode:
mov [rcx+000004DC],al
jmp returnhere

nomachineguns:
mov byte ptr [rcx+000004DC+2],02
jmp returnhere

exit:
jmp returnhere

"dmc2.exe"+2306C5:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+2306C5:
mov [rcx+000004DC],al
//Alt: db 88 81 DC 04 00 00

dealloc(weaponstore)
unregistersymbol(weaponstore)
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1249</ID>
                      <Description>"Skip Shotgun"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+2306C5) 
label(returnhere)
label(originalcode)
label(noshotgun)
label(exit)
alloc(weaponstore,4)
registersymbol(weaponstore)
weaponstore:
  db 0

newmem:
mov [weaponstore],al
cmp byte ptr [weaponstore],02
je noshotgun
jmp originalcode

originalcode:
mov [rcx+000004DC],al
jmp returnhere

noshotgun:
mov byte ptr [rcx+000004DC+2],03
jmp returnhere

exit:
jmp returnhere

"dmc2.exe"+2306C5:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+2306C5:
mov [rcx+000004DC],al
//Alt: db 88 81 DC 04 00 00

dealloc(weaponstore)
unregistersymbol(weaponstore)
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1250</ID>
                      <Description>"Skip Rocket Launcher"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+2306C5) 
label(returnhere)
label(originalcode)
label(norpg)
label(exit)
alloc(weaponstore,4)
registersymbol(weaponstore)
weaponstore:
  db 0

newmem:
mov [weaponstore],al
cmp byte ptr [weaponstore],03
je norpg
jmp originalcode

originalcode:
mov [rcx+000004DC],al
jmp returnhere

norpg:
mov byte ptr [rcx+000004DC+2],00
jmp returnhere

exit:
jmp returnhere

"dmc2.exe"+2306C5:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+2306C5:
mov [rcx+000004DC],al
//Alt: db 88 81 DC 04 00 00

dealloc(weaponstore)
unregistersymbol(weaponstore)
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1251</ID>
                      <Description>"Skip Machine Gun &amp; Rocket Launcher"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+2306C5) 
label(returnhere)
label(originalcode)
label(nomachinegun)
label(norpg)
label(exit)
alloc(weaponstore,4)
registersymbol(weaponstore)
weaponstore:
  db 0

newmem:
mov [weaponstore],al
cmp byte ptr [weaponstore],03
je norpg
cmp byte ptr [weaponstore],01
je nomachinegun
jmp originalcode

originalcode:
mov [rcx+000004DC],al
jmp returnhere

norpg:
mov byte ptr [rcx+000004DC+2],00
jmp returnhere

nomachinegun:
mov byte ptr [rcx+000004DC+2],02
jmp returnhere

exit:
jmp returnhere

"dmc2.exe"+2306C5:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+2306C5:
mov [rcx+000004DC],al
//Alt: db 88 81 DC 04 00 00

dealloc(weaponstore)
unregistersymbol(weaponstore)
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>1252</ID>
                  <Description>"Debug: Current Gun Equip"</Description>
                  <DropDownList ReadOnly="1" DisplayValueAsItem="1">0:Pistols
1:Machine Gun
2:Shotgun
3:Rocket Launcher
</DropDownList>
                  <VariableType>Byte</VariableType>
                  <Address>dmc2.exe+158A80E </Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1356</ID>
              <Description>"Run Speed Modifier?"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+23A9BA)
label(returnhere)
label(originalcode)
label(exit)
alloc(runMult,128,"dmc2.exe"+23A9BA)
registersymbol(runMult)
runMult:
dd (float)1.5

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mulss xmm8,[runMult]
jmp originalcode

originalcode:
movss [rdi+40],xmm8

exit:
jmp returnhere

"dmc2.exe"+23A9BA:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(runMult)
unregistersymbol(runMult)
"dmc2.exe"+23A9BA:
movss [rdi+40],xmm8
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1357</ID>
                  <Description>"Running Speed Multiplier"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>runMult</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1358</ID>
              <Description>"SMGS Don't Change Gravity"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+219F5A)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
jmp returnhere

originalcode:
movss [rbx+24],xmm0

exit:
jmp returnhere

"dmc2.exe"+219F5A:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+219F5A:
movss [rbx+24],xmm0
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1359</ID>
              <Description>"SMGS Don't Push Up"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+219D9B)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
jmp returnhere

originalcode:
mov [rbx+24],41300000

exit:
jmp returnhere

"dmc2.exe"+219D9B:
jmp newmem
nop 2
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+219D9B:
mov [rbx+24],41300000
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1360</ID>
              <Description>"Gravity Mods"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+241AF4)
alloc(gravityChange,64)
label(returnhere)
label(originalcode)
label(exit)
registersymbol(gravityChange)
gravityChange:
dd (float)0.0
post_gravityChange:
dd (float)0.0
negation_gravityChange:
dd (float)-1.0
const_gravityChange:
dd (float)0.0
smgs_gravityChange:
dd (float)0.33
fullhouse_gravityChange:
dd (float)6.0

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
movss xmm3,[rdi+34]
movss [gravityChange],xmm3
//movss xmm4, [dmc2.exe+158A354]
//push eax
//cvttss2si eax, xmm4
//cmp eax,0
//pop eax
//jle fallSpeedFix
//divss xmm3,[dmc2.exe+158A3C4]
//divss xmm3,[dmc2.exe+158A3C4]
//mulss xmm2,xmm3
//mulss xmm2,[negation_gravityChange]
//movss [post_gravityChange],xmm2
cmp dword ptr [dmc2.exe+158A71C],0x0000205
je smgfix
cmp dword ptr [dmc2.exe+158A71C],0x0000204
je smgfix
cmp dword ptr [dmc2.exe+158A71C],0x000021B
je smgfix
cmp dword ptr [dmc2.exe+158A71C],0x000011C
je fullhouse
jmp originalcode

smgfix:
mulss xmm3,[smgs_gravityChange]
movss xmm4, [dmc2.exe+158A354]
//push eax
//cvttss2si eax, xmm4
//cmp eax,0
//pop eax
//jl smgfallfix
jmp execute

smgfallfix:
mulss xmm3,[smgs_gravityChange]
//mulss xmm3,[smgs_gravityChange]
jmp execute

fullhouse:
mulss xmm3,[fullhouse_gravityChange]
add dword ptr [dmc2.exe+158A370],11
jmp execute

execute:
mulss xmm2,xmm3
//mulss xmm2,[negation_gravityChange]
movss [post_gravityChange],xmm2
jmp returnhere

fallSpeedFix:
divss xmm3,[dmc2.exe+158A3C4]
divss xmm3,[dmc2.exe+158A3C4]
divss xmm3,[dmc2.exe+158A3C4]
mulss xmm2,xmm3
movss xmm3,[dmc2.exe+158A3C4]
movss [gravityChange],xmm3
mulss xmm2,[negation_gravityChange]
movss [post_gravityChange],xmm2
jmp originalcode

originalcode:
mulss xmm2,[rdi+34]

exit:
jmp returnhere

"dmc2.exe"+241AF4:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(gravityChange)
unregistersymbol(gravityChange)
"dmc2.exe"+241AF4:
mulss xmm2,[rdi+34]
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1361</ID>
                  <Description>"gravityChange"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>gravityChange</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1362</ID>
                  <Description>"No description"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>gravityChange+4</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1363</ID>
              <Description>"Air State"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Byte</VariableType>
              <Address>dmc2.exe+161BEFC</Address>
              <CheatEntries>
                <CheatEntry>
                  <ID>1365</ID>
                  <Description>"Lucia Other Air State??"</Description>
                  <ShowAsSigned>1</ShowAsSigned>
                  <VariableType>Byte</VariableType>
                  <Address>dmc2.exe+158A86E</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1364</ID>
              <Description>"Lucia Air State"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Byte</VariableType>
              <Address>dmc2.exe+161BEEC</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1574</ID>
          <Description>"Air Raid Doesn't Eat DJ"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+231132)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
jmp returnhere

originalcode:
mov word ptr [rbx+00000541],0001

exit:
jmp returnhere

"dmc2.exe"+231132:
jmp newmem
nop 4
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+231132:
mov word ptr [rbx+00000541],0001
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>159</ID>
      <Description>"----------------------------------------"</Description>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>1055</ID>
      <Description>"Trish"</Description>
      <Options moHideChildren="1" moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>1111</ID>
          <Description>"Fine Tuning - Advanced Users Only"</Description>
          <Options moHideChildren="1" moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>1067</ID>
              <Description>"Damage Dealt/Taken Modifier"</Description>
              <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,3096,"dmc2.exe"+5431B)
alloc(damagemult,64)
alloc(enemydamagemult,64)
alloc(muststylethresh,64)
alloc(enemydeathfixer,64)
alloc(bayoinstakilltoggle,64)
alloc(incomingdamage,64)
alloc(weapondamagemult,64)
alloc(jankCancelTimer,64)
alloc(allowJankCancel,64)
alloc(jankCancelSaveInertia,64)
define(CurrentSword,dmc2.exe+158A80F)
registersymbol(weapondamagemult)
weapondamagemult:
dd (float)1.0
merciless_weapondamagemult:
dd (float)0.85
vendetta_weapondamagemult:
dd (float)1.2
label(returnhere)
label(originalcode)
label(exit)
label(enemycase)
label(bayohealth)
label(saveplayer)
label(bayohealthfailcheck)
registersymbol(damagemult)
registersymbol(enemydamagemult)
registersymbol(muststylethresh)
registersymbol(bayoinstakilltoggle)
registersymbol(incomingdamage)
registersymbol(jankCancelTimer)
registersymbol(allowJankCancel)
registersymbol(jankCancelSaveInertia)
jankCancelSaveInertia:
dd (int)0

allowJankCancel:
dd (int)0

jankCancelTimer:
dd (int)0

damagemult:
dd (float)3.0

enemydamagemult:
dd (float)1.0

enemydeathfixer:
dd (float)1.0

bayoinstakilltoggle:
dd (int)1

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
//before we do ANYTHING, check if this is applying damage and not healing
cmp si, 0
jnle originalcode //jump to original code if this is healing something
//overrides go here
//test if the target's health is the player's health
push ebx
mov ebx,[rdi+00000140]
cmp ebx, ["dmc2.exe"+158a470]
pop ebx
jne enemycase //jump to enemy damage case if values don't match
//prepare ecx for float mult
push eax
xor eax, eax //clear eax
neg si
mov ax, si //move incoming damage to cx register
cvtsi2ss xmm0, eax //convert incoming damage to float
mulss xmm0, [damagemult] //multiply incoming damage by player damage modifier
cvttss2si eax, xmm0 //convert to int again
neg eax
mov si, ax
pop eax
cmp [bayoinstakilltoggle], 1 //survive with 1 hp if health &gt; 1 when taking lethal damage
je bayohealth
add ax, si //continue with original code
mov [rdi+00000140],ax
jmp exit

enemycase:
//prime JC timer
mov [jankCancelTimer],7
push ebx
mov ebx,[dmc2.exe+158A968]
cmp ebx, [muststylethresh]
pop ebx
jnge exit //ignore damage dealt if player has fewer than specified style pts
//apply outgoing damage modifiers
cmp eax, F //fixes enemies not dying if outgoing damage &lt; 1.0
jle enemyoverride
push eax
xor eax, eax //clear eax
neg si
mov ax, si //move incoming damage to ax register
cvtsi2ss xmm0, eax //convert incoming damage to float
mulss xmm0, [enemydamagemult] //multiply incoming damage by player damage modifier
cmp byte ptr [CurrentSword],00
je rebellionDamage
//Merciless
cmp byte ptr [CurrentSword],01
je mercilessDamage
//Vendetta
cmp byte ptr [CurrentSword],02
je vendettaDamage
cvttss2si eax, xmm0 //convert to int again
neg eax
mov si, ax
pop eax
add ax, si
mov [rdi+00000140],ax
jmp exit

rebellionDamage:
mulss xmm0, [weapondamagemult]
jmp convertFloatToInt

mercilessDamage:
mulss xmm0, [merciless_weapondamagemult]
jmp convertFloatToInt

vendettaDamage:
mulss xmm0, [vendetta_weapondamagemult]
jmp convertFloatToInt

convertFloatToInt:
cvttss2si eax, xmm0 //convert to int again
neg eax
mov si, ax
pop eax
add ax, si
mov [rdi+00000140],ax
jmp exit

enemyoverride:
push eax
xor eax, eax //clear eax
neg si
mov ax, si //move incoming damage to ax register
cvtsi2ss xmm0, eax //convert incoming damage to float
mulss xmm0, [enemydeathfixer] //multiply incoming damage by player damage modifier
cvttss2si eax, xmm0 //convert to int again
neg eax
mov si, ax
pop eax
add ax, si
mov [rdi+00000140],ax
jmp exit

bayohealth:
push ebx
xor ebx, ebx
mov ebx, eax
add bx, si
cmp bx, ["dmc2.exe"+158a470] //checks if any damage is occurring
jge bayohealthfailcheck
mov [incomingdamage], bx
cmp bx, 1 //checks if incoming damage &gt;= player's health
pop ebx
//mov [incomingdamage], 776
jnle originalcode
push ebx
xor ebx, ebx
mov ebx, ["dmc2.exe"+158a470]
cmp bx, 1 //check if player's health &gt; 1
pop ebx
jg saveplayer
jmp originalcode

saveplayer:
mov [incomingdamage], 5
mov [rdi+00000140], 1 //sets player's health to 1
jmp exit

bayohealthfailcheck:
pop ebx
jmp originalcode

originalcode:
add ax, si
mov [rdi+00000140],ax
jmp exit

exit:
cmp [jankCancelTimer],7
je jankCancelWindow
jmp returnhere

jankCancelWindow:
cmp byte ptr [dmc2.exe+161BEEC],1
je initJankCancel
cmp byte ptr [dmc2.exe+158A86E],0
jne initJankCancel
//cmp [dmc2.exe+158A354],0
//jne allowJankCancel
//cmp dword ptr [dmc2.exe+158A71C],0x0000011D
//je allowJankCancel
mov [jankCancelTimer],0
mov [allowJankCancel],0
jmp returnhere

initJankCancel:
mov [allowJankCancel],1
mov [jankCancelTimer],0xFF
cmp byte ptr [dmc2.exe+158A872],0
jne refreshJumpForJC
jmp returnhere

refreshJumpForJC:
mov byte ptr [dmc2.exe+158A872],2
jmp returnhere

"dmc2.exe"+5431B:
jmp newmem
nop 5
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(damagemult)
dealloc(muststylethresh)
dealloc(incomingdamage)
dealloc(bayoinstakilltoggle)
dealloc(weapondamagemult)
unregistersymbol(damagemult)
unregistersymbol(enemydamagemult)
unregistersymbol(muststylethresh)
unregistersymbol(incomingdamage)
unregistersymbol(bayoinstakilltoggle)
unregistersymbol(weapondamagemult)
"dmc2.exe"+5431B:
add ax,si
mov [rdi+00000140],ax
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1664</ID>
                  <Description>"Correct End-of-Mission Damage Tally"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+5435D)
label(returnhere)
label(originalcode)
label(exit)

newmem:
cmp [damagemult], 0
je nodamage
cvtsi2ss xmm0, esi //convert incoming damage to float
divss xmm0, [damagemult] //multiply incoming damage by player damage modifier
cvttss2si esi, xmm0 //convert to int again
jmp originalcode

nodamage:
mov esi,0
jmp originalcode

originalcode:
sub [rcx+000000C4],esi

exit:
jmp returnhere

"dmc2.exe"+5435D:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+5435D:
sub [rcx+000000C4],esi
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1665</ID>
                      <Description>"Damage Taken In Mission"</Description>
                      <VariableType>4 Bytes</VariableType>
                      <Address>dmc2.exe+1588BF4</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>1672</ID>
                  <Description>"Damage Options"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1673</ID>
                      <Description>"Damage Taken Multiplier"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>damagemult</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1674</ID>
                      <Description>"Damage Dealt Multiplier"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>enemydamagemult</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1675</ID>
                      <Description>"Bayonetta Magic Pixel"</Description>
                      <DropDownList>0:Disable
1:Enable
</DropDownList>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>4 Bytes</VariableType>
                      <Address>bayoinstakilltoggle</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1676</ID>
                      <Description>"NOTE: Must Style Mode requires Damage Dealt/Taken Modifier!!"</Description>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>1677</ID>
                          <Description>"Must Style Mode (See Values)"</Description>
                          <DropDownList>0:Disable Must Style
1500:[D]on't Worry
5000:[C]ome On!
10000:[B]ingo!
15000:[A]re You Ready?
20000:[S]howtime!!
</DropDownList>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>2 Bytes</VariableType>
                          <Address>muststylethresh</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1678</ID>
                      <Description>"Weapon-Specific Multipliers"</Description>
                      <Options moHideChildren="1"/>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>1679</ID>
                          <Description>"Rebellion/Cutlaseer/Sparda Damage"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>weapondamagemult</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1680</ID>
                          <Description>"Merciless/Klyamoor Damage"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>weapondamagemult+4</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1681</ID>
                          <Description>"Vendetta / Zambak Damage"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>weapondamagemult+8</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>1662</ID>
                  <Description>"Correct End-of-Mission Damage Tally"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+5435D)
label(returnhere)
label(originalcode)
label(exit)

newmem:
cmp [damagemult], 0
je nodamage
cvtsi2ss xmm0, esi //convert incoming damage to float
divss xmm0, [damagemult] //multiply incoming damage by player damage modifier
cvttss2si esi, xmm0 //convert to int again
jmp originalcode

nodamage:
mov esi,0
jmp originalcode

originalcode:
sub [rcx+000000C4],esi

exit:
jmp returnhere

"dmc2.exe"+5435D:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+5435D:
sub [rcx+000000C4],esi
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1663</ID>
                      <Description>"Damage Taken In Mission"</Description>
                      <VariableType>4 Bytes</VariableType>
                      <Address>dmc2.exe+1588BF4</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1077</ID>
              <Description>"Adjustable Enemy Stun"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+5872C)
alloc(stunmult,64)
alloc(handgunnerf,64)
alloc(dtstunmult,64)
label(returnhere)
label(originalcode)
label(exit)
label(movespecificstun)
label(stunmodifier)
label(dtstunmodifier)
registersymbol(stunmult)
registersymbol(handgunnerf)
registersymbol(dtstunmult)
stunmult:
dd (float)1.5

handgunnerf:
dd (float)1.0

dtstunmult:
dd (float)3.0

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
//check if this is hitting the player
//dont think a scalar for that is needed, everything breaks armor in like 1 hit
push ebx
mov ebx, [rcx+00000146]
cmp ebx, [dmc2.exe+158A476]
pop ebx
je originalcode
//check if current moveID is firing handguns
//if true, jump to handgun nerf
push ebx
mov ebx, [dmc2.exe+158A71C]
cmp ebx, 0x00000300
je movespecificstun
cmp ebx, 0x00000202
je movespecificstun
pop ebx
//check if player is in DT
cmp byte ptr [dmc2.exe+158A848],1
je dtstunmodifier
cmp byte ptr [dmc2.exe+158A848],2
je dtstunmodifier
jmp stunmodifier

stunmodifier:
cvtsi2ss xmm0, eax
mulss xmm0, [stunmult]
cvttss2si eax, xmm0
sub [rcx+00000146],ax
jmp exit

dtstunmodifier:
cvtsi2ss xmm0, eax
mulss xmm0, [dtstunmult]
cvttss2si eax, xmm0
sub [rcx+00000146],ax
jmp exit

//allows user to set special stun multiplier for the handguns
movespecificstun:
pop ebx
cmp [handgunnerf],1.0
je stunmodifier
cvtsi2ss xmm0, eax
mulss xmm0, [handgunnerf]
cvttss2si eax, xmm0
sub [rcx+00000146],ax
jmp exit

//incoming stun is in RAX
//need to intercept it and apply scalar
//optional: ignore scalar if in handguns action?
originalcode:
sub [rcx+00000146],ax
jmp exit

exit:
jmp returnhere

"dmc2.exe"+5872C:
jmp newmem
nop 2
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(stunmult)
dealloc(handgunnerf)
dealloc(dtstunmult)
unregistersymbol(stunmult)
unregistersymbol(handgunnerf)
unregistersymbol(dtstunmult)
"dmc2.exe"+5872C:
sub [rcx+00000146],ax

</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1078</ID>
                  <Description>"Stun Multiplier"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>stunmult</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1079</ID>
                  <Description>"DT Stun Multiplier"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>dtstunmult</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1080</ID>
                  <Description>"OPTIONAL: Handgun Stun Multiplier"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>handgunnerf</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1083</ID>
              <Description>"Adjustable Hitlag"</Description>
              <Options moHideChildren="1"/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : dmc2.exe
  Version: 
  Date   : 2020-12-04
  Author : sssiy

  This script does blah blah blah
}

[ENABLE]
aobscanmodule(HitStopDanteAdjust,dmc2.exe,F3 0F 11 83 94 00 00 00 F3 0F 10 83 A0 01 00 00 0F 57 F6) // should be unique
alloc(adjustablehitstop,$1000,"dmc2.exe"+23DD53)
label(code)
label(return)

registersymbol(adjustablehitstop)
adjustablehitstop:
  dd (float)0.85

code:
  movss xmm0,[adjustablehitstop]
  movss [rbx+00000094],xmm0
  jmp return

HitStopDanteAdjust:
  jmp code
  nop
  nop
  nop
return:
registersymbol(HitStopDanteAdjust)

[DISABLE]
HitStopDanteAdjust:
  db F3 0F 11 83 94 00 00 00
unregistersymbol(HitStopDanteAdjust)
dealloc(adjustablehitstop)
unregistersymbol(adjustablehitstop)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1084</ID>
                  <Description>"On-Hit Speed Multiplier"</Description>
                  <VariableType>Float</VariableType>
                  <Address>adjustablehitstop</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1081</ID>
              <Description>"Adjustable Enemy DT Armor Bonus"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+A4B28)
alloc(enemyDTArmorBonus,64)
alloc(restorearmorconst,64)
label(returnhere)
label(originalcode)
label(exit)
registersymbol(enemyDTArmorBonus)

restorearmorconst:
dd (float)0.1

enemyDTArmorBonus:
dd (float)3

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cvtsi2ss xmm0, ecx
//Divide by 10 to restore enemy's original armor value
mulss xmm0, [restorearmorconst]
//Apply user's specified armor bonus
mulss xmm0, [enemyDTArmorBonus]
cvttss2si ecx, xmm0
mov [rbx+00000146],cx
//This second address is the value the enemy's armor resets to after recovering
mov [rbx+00000148],cx
jmp exit

originalcode:
mov [rbx+00000146],cx

exit:
jmp returnhere

"dmc2.exe"+A4B28:
jmp newmem
nop 2
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(enemyDTArmorBonus)
dealloc(restorearmorconst)
unregistersymbol(enemyDTArmorBonus)

"dmc2.exe"+A4B28:
mov [rbx+00000146],cx
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1082</ID>
                  <Description>"Enemy DT Armor Multiplier"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>enemyDTArmorBonus</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1020</ID>
              <Description>"[TRISH] USF"</Description>
              <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+2D3C70)
label(returnhere)
label(originalcode)
label(exit)
alloc(speedmultalloc,64)
alloc(movemultalloc,64)
alloc(weaponmultalloc,64)
alloc(lastCharState,64)
registersymbol(lastCharState)
lastCharState:
dd (byte)0
speedActive_lastcharstate:
dd (byte)0
isSprinting_lastcharstate:
dd (byte)0
sprintSpeed_lastcharstate:
dd (float)2.0
lastAction_lastcharstate:
dd (dword)0
define(CurrentSword,dmc2.exe+158A80F)
define(InputPressed02,dmc2.exe+7DD68C)
registersymbol(weaponmultalloc)
weaponmultalloc:
dd (float)1.0
merciless_weaponmultalloc:
dd (float)1.0
vendetta_weaponmultalloc:
dd (float)1.0
registersymbol(movemultalloc)
movemultalloc:
dd (float)1.0
spardaplant_movemultalloc:
dd (float)2.0
fullhousecharge_movemultalloc:
dd (float)1.6
highpunchtrans_movemultalloc:
dd (float)1.6
highpunchrelease_movemultalloc:
dd (float)1.6
fullhouseland_movemultalloc:
dd (float)1.6
kick13_movemultalloc:
dd (float)1.5
bareknucklekick1_movemultalloc:
dd (float)1.6
bareknucklekick2_movemultalloc:
dd (float)1.8
stingerhit_movemultalloc:
dd (float)1.6
stingerfinish_movemultalloc:
dd (float)1.6
stingerprep_movemultalloc:
dd (float)1.6
roundtriptoss_movemultalloc:
dd (float)1.6
helmsplitterland_movemultalloc:
dd (float)1.5
dttoggle_movemultalloc:
dd (float)4.0
registersymbol(speedmultalloc)
speedmultalloc:
dd (float)1.2
dtspeedmultalloc:
dd (float)1.4
sdtspeedmultalloc:
dd (float)1.4

newmem:
cmp [rcx+08],1
je dantespeed
jmp originalcode

dantespeed:
//move-specific speed mods
cmp dword ptr [dmc2.exe+158A71C],0x00000102
je trishCheckVortex
cmp dword ptr [dmc2.exe+158A71C],0x01000103
je trishSpardaPlant
cmp dword ptr [dmc2.exe+158A71C],0x0000113
je trishFullHouseCharge
cmp dword ptr [dmc2.exe+158A71C],0x0000114
je trishHighPunchTrans
cmp dword ptr [dmc2.exe+158A71C],0x0000214
je trishHighPunchRelease
cmp dword ptr [dmc2.exe+158A71C],0x0000313
je trishFullHouseLand
cmp dword ptr [dmc2.exe+158A71C],0x0000115
je trishKick13
cmp dword ptr [dmc2.exe+158A71c],0x0000312
je trishBareKnuckleKick1
cmp dword ptr [dmc2.exe+158A71c],0x0000412
je trishBareKnuckleKick2
cmp dword ptr [dmc2.exe+158A71C],0x0000408
je trishStingerHit
cmp dword ptr [dmc2.exe+158A71C],0x0000208
je trishStingerPrep
cmp dword ptr [dmc2.exe+158A71C],0x0000100
je trishRoundTripToss
cmp dword ptr [dmc2.exe+158A71C],0x0000308
je trishPMQuickDraw
cmp dword ptr [dmc2.exe+158A71C],0x01020209
je trishHelmSplitterLand
//Other DT Toggle Anims
cmp dword ptr [dmc2.exe+158A718],0x16001616
je luciaDTButtonOK
cmp dword ptr [dmc2.exe+158A718],0x15001515
je luciaDTButtonOK
cmp dword ptr [dmc2.exe+158A718],0x19001919
je luciaDTButtonOK
//DT speed mods
cmp byte ptr [dmc2.exe+158A848],1
je dantedt
cmp byte ptr [dmc2.exe+158A848],2
je dantesdt
//Base speed mod
mulss xmm0,[speedmultalloc]
jmp weaponCheck

trishCheckVortex:
cmp byte ptr [dmc2.exe+158A870], 0
jne trishVortexStartup
cmp byte ptr [dmc2.exe+158A871], 0
jne trishVortexStartup
jmp originalcode

trishVortexStartup:
mulss xmm0,[dttoggle_movemultalloc]
jmp weaponCheck

trishPMQuickDraw:
mulss xmm0,[helmsplitterland_movemultalloc]
mov [allowJankCancel],1
mov [jankCancelTimer],0x1F
jmp weaponCheck

luciaDTActivation:
cmp byte ptr [lastCharState], 0
je luciaDTCheckAir
cmp byte ptr [speedActive_lastcharstate], 1
je luciaDTCheckAir
cmp byte ptr [lastCharState], 0
jge luciaDTEnemyFuckery
jmp originalcode

luciaDTEnemyFuckery:
cmp dword ptr [dmc2.exe+158A71c], 0x0000001
je fixthisalready
jmp originalcode

fixthisalready:
cmp dword ptr [dmc2.exe+158A71c], 0x0000000
jne luciaDTCheckButton
jmp originalcode

luciaDTCheckButton:
cmp dword ptr [InputPressed02],0x000000C0
je originalcode
cmp dword ptr [InputPressed02],0x00000040
je originalcode
cmp dword ptr [InputPressed02],0x00000060
je originalcode
cmp dword ptr [InputPressed02],0x00000050
je originalcode
cmp dword ptr [InputPressed02],0x00000048
je originalcode
cmp dword ptr [InputPressed02],0x00000041
je originalcode
cmp dword ptr [InputPressed02],0x00000042
je originalcode
cmp dword ptr [InputPressed02],0x00000044
je originalcode
jmp luciaDTCheckAir

luciaDTCheckAir:
cmp byte ptr [dmc2.exe+158A870], 0
jne luciaDTButtonOK
cmp byte ptr [dmc2.exe+158A714], 2
je luciaDTButtonOK
cmp byte ptr [dmc2.exe+158A871], 0
jne luciaDTButtonOK
jmp originalcode

luciaDTButtonOK:
mov [speedActive_lastcharstate], 1
mulss xmm0,[dttoggle_movemultalloc]
jmp originalcode

trishHelmSplitterLand:
mulss xmm0,[helmsplitterland_movemultalloc]
jmp weaponCheck

trishRoundTripToss:
mulss xmm0,[roundtriptoss_movemultalloc]
jmp weaponCheck

trishStingerFinish:
mulss xmm0,[stingerfinish_movemultalloc]
jmp weaponCheck

trishStingerPrep:
mulss xmm0,[stingerprep_movemultalloc]
jmp weaponCheck

trishStingerHit:
mulss xmm0,[stingerhit_movemultalloc]
jmp weaponCheck

trishBareKnuckleKick2:
mulss xmm0,[bareknucklekick2_movemultalloc]
jmp weaponCheck

trishBareKnuckleKick1:
mulss xmm0,[bareknucklekick1_movemultalloc]
jmp weaponCheck

trishKick13:
mulss xmm0,[kick13_movemultalloc]
jmp weaponCheck

trishFullHouseLand:
mulss xmm0,[fullhouseland_movemultalloc]
jmp weaponCheck

trishHighPunchRelease:
mulss xmm0,[highpunchrelease_movemultalloc]
jmp weaponCheck

trishHighPunchTrans:
mulss xmm0,[highpunchtrans_movemultalloc]
jmp weaponCheck

trishFullHouseCharge:
mulss xmm0,[fullhousecharge_movemultalloc]
jmp weaponCheck

trishSpardaPlant:
mulss xmm0,[spardaplant_movemultalloc]
jmp weaponCheck

dantedt:
mulss xmm0,[dtspeedmultalloc]
cmp dword ptr [dmc2.exe+158A718],0x19001919
je luciaDTCheckAir
cmp dword ptr [dmc2.exe+158A718],0x15001515
je luciaDTCheckAir
mov [speedActive_lastcharstate],0
jmp weaponCheck
dantesdt:
mulss xmm0,[sdtspeedmultalloc]
jmp weaponCheck

weaponCheck:
cmp dword ptr [dmc2.exe+158A71C],0x00000001
je playerSprint
jmp originalcode

playerSprint:
cmp dword ptr [InputPressed02],0x00000400
je executePlayerSprint
jmp originalcode

executePlayerSprint:
mulss xmm0,[sprintSpeed_lastcharstate]
jmp originalcode

originalcode:
push eax
mov eax, [dmc2.exe+158A848]
mov [lastCharState], eax
mov eax, [dmc2.exe+158A71C]
mov [lastAction_lastcharstate], eax
pop eax
movss [rcx+00000094],xmm0
jmp returnhere

exit:
jmp returnhere

"dmc2.exe"+2D3C70:
jmp newmem
nop
nop
nop
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+2D3C70:
movss [rcx+00000094],xmm0
//Alt: db F3 0F 11 81 94 00 00 00

dealloc(movemultalloc)
dealloc(speedmultalloc)
dealloc(weaponmultalloc)
dealloc(lastCharState)
unregistersymbol(lastCharState)
unregistersymbol(weaponmultalloc)
unregistersymbol(movemultalloc)
unregistersymbol(speedmultalloc)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1021</ID>
                  <Description>"Speed Mult"</Description>
                  <VariableType>Float</VariableType>
                  <Address>speedmultalloc</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1022</ID>
                  <Description>"DT Speed Mult"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>speedmultalloc+4</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1023</ID>
                  <Description>"SDT Speed Mult"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>speedmultalloc+8</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1024</ID>
                  <Description>"Move Speed Adjustments"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1025</ID>
                      <Description>"Sparda Plant"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+4</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1026</ID>
                      <Description>"Full House Windup"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+8</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1027</ID>
                      <Description>"Uppercut Charge"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+C</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1028</ID>
                      <Description>"Uppercut Release"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+10</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1029</ID>
                      <Description>"Full House Landing"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+14</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1030</ID>
                      <Description>"Kick 13"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+18</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1031</ID>
                      <Description>"Bare Knuckle Kick 1"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+1C</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1032</ID>
                      <Description>"Bare Knuckle Kick 2"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+20</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1033</ID>
                      <Description>"Stinger Hit"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+24</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1034</ID>
                      <Description>"Stinger Finish"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+28</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1035</ID>
                      <Description>"Stinger Draw"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+2C</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1036</ID>
                      <Description>"Round Trip Toss"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+30</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1037</ID>
                      <Description>"Helm Splitter Landing"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+34</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1046</ID>
                      <Description>"Air Raid Activation"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+38</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1110</ID>
          <Description>"Settings"</Description>
          <Options moHideChildren="1" moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>1056</ID>
              <Description>"Disable DT Cooldown (See values dropdown)"</Description>
              <DropDownList>30:Safe Disable
0:Aggressive Disable
</DropDownList>
              <VariableType>2 Bytes</VariableType>
              <Address>dmc2.exe+158A85E</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1375</ID>
              <Description>"[Trish] Infinite Round Trip"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
dmc2.exe+2E8377:
nop 4

[DISABLE]
dmc2.exe+2E8377:
dec word ptr [rdi+0C]
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1057</ID>
              <Description>"DT Gain Multiplier"</Description>
              <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+588E0)
alloc(dtmultalloc,64)
label(returnhere)
label(originalcode)
label(exit)
registersymbol(dtmultalloc)
dtmultalloc:
dd (float)1.5

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push eax //prepare eax
xor eax,eax //clear eax
mov ax, r9w //move build dt to eax register
cvtsi2ss xmm0,eax //convert to float
mulss xmm0, [dtmultalloc] //multiply by dt multiplier specified in table
cvttss2si eax,xmm0 //convert back to int
//imul r9w,[dtmultalloc]
mov r9w, ax
add cx,r9w
pop eax
cmp cx,ax

originalcode:
add cx,r9w
cmp cx,ax

exit:
jmp returnhere

"dmc2.exe"+588E0:
jmp newmem
nop 2
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(dtmultalloc)
unregistersymbol(dtmultalloc)
"dmc2.exe"+588e0:
add cx,r9w
cmp cx,ax
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1058</ID>
                  <Description>"DT Gain Multiplier Value"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>dtmultalloc</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1059</ID>
              <Description>"Modern Style Loss System"</Description>
              <Options moHideChildren="1"/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//Reworks aspects of the Style system to match DMC3/4/5's system.
alloc(newmem,2048,"dmc2.exe"+5A4CF)
alloc(newmem02,2048,"dmc2.exe"+23206E)
alloc(stylelosshandler,2048,"dmc2.exe"+23DF64)
//
label(returnhere)
label(hitlossdone)
label(originalcode)
label(exit)
label(decaycomp)
label(removeStyleRating)
label(styletest)
label(setStyleRatingToA)
label(setStyleRatingToB)
label(setStyleRatingToC)
label(setStyleRatingToD)
label(resetStyleDecayTimer)
//
alloc(stylelosstimer,64)
alloc(xmholder,64)
alloc(onhitstylelossscalar,64)
alloc(styleptstoloseondecay,64)
//
registersymbol(stylelosstimer)
registersymbol(onhitstylelossscalar)
registersymbol(styleptstoloseondecay)
//
stylelosstimer:
dd (float)180
xmholder:
dd (float)0
onhitstylelossscalar:
dd (float)2.0 //default: lose half of your style points
//don't go below 1.0 or else you gain style for being hit

newmem: //Overrides the game's original starting timer for style decay.
//For some reason the game uses a float here.
movss [xmholder],xmm0
movss xmm0,[stylelosstimer]
movss [r8+00000634],xmm0
movss xmm0,[xmholder]
jmp exit
//
//
newmem02: //On-Hit Style Loss overrides
push eax
xor eax,eax
mov eax, ["dmc2.exe"+158A968] //places player's style points in eax
cvtsi2ss xmm0, eax
divss xmm0, [onhitstylelossscalar] //Divides style points by scalar specified in CT
cvttss2si eax,xmm0
cmp eax, 5DC
jle hlpRemoveStyle
mov ["dmc2.exe"+158A968], eax
pop eax
//Reset style decay timer to what's specified in CT
movss [xmholder],xmm0
movss xmm0,[stylelosstimer]
movss [dmc2.exe+158A964],xmm0
movss xmm0,[xmholder]
jmp hitlossdone
//
//
stylelosshandler: //Custom behavior when the style loss timer runs out
//Remove all style pts if timer expires on D rank
push eax
xor eax, eax
//mov eax, [rbx+00000638]
//mov [styleptstoloseondecay], eax
mov ax, 4E20
//mov [styleptstoloseondecay], 20000
//Modern DMC system from here, lose 1 rank every time timer hits 0
cmp dword ["dmc2.exe"+158A968], eax
jge setStyleRatingToA
mov ax, 3A98
cmp dword ["dmc2.exe"+158A968], eax
jge setStyleRatingToB
mov ax, 2710
cmp dword ["dmc2.exe"+158A968], eax
jge setStyleRatingToC
mov ax, 1388
cmp dword ["dmc2.exe"+158A968], eax
jge setStyleRatingToD
pop eax
jmp removeStyleRating
//done
jmp decaycomp
//
//
resetStyleDecayTimer:
movss [xmholder],xmm0
movss xmm0,[stylelosstimer]
movss [dmc2.exe+158A964],xmm0
movss xmm0,[xmholder]
ret
//
//
hlpRemoveStyle:
pop eax
mov ["dmc2.exe"+158A968], 0
jmp hitlossdone
//
//
removeStyleRating: //helper function to reset player's style using vanilla call
mov [dmc2.exe+158A968], 0
jmp decaycomp
//
//
setStyleRatingToA: //S returns to A rank
pop eax
mov [styleptstoloseondecay], 10F2C
mov dword [dmc2.exe+158A968], 3A98
movss [xmholder],xmm0
movss xmm0,[stylelosstimer]
movss [dmc2.exe+158A964],xmm0
movss xmm0,[xmholder]
jmp decaycomp
//
//
setStyleRatingToB: //S returns to A rank
pop eax
mov [styleptstoloseondecay], 4
mov dword [dmc2.exe+158A968], 2710
movss [xmholder],xmm0
movss xmm0,[stylelosstimer]
movss [dmc2.exe+158A964],xmm0
movss xmm0,[xmholder]
jmp decaycomp
//
//
setStyleRatingToC: //S returns to A rank
pop eax
mov [styleptstoloseondecay], 3
mov dword [dmc2.exe+158A968], 1388
movss [xmholder],xmm0
movss xmm0,[stylelosstimer]
movss [dmc2.exe+158A964],xmm0
movss xmm0,[xmholder]
jmp decaycomp
//
//
setStyleRatingToD: //S returns to A rank
pop eax
mov [styleptstoloseondecay], 2
mov dword [dmc2.exe+158A968], 5DC
movss [xmholder],xmm0
movss xmm0,[stylelosstimer]
movss [dmc2.exe+158A964],xmm0
movss xmm0,[xmholder]
jmp decaycomp
//
//
styletest:
mov [rbx+00000638],esi
//
//
originalcode: //original timer code
mov [r8+00000634],42DC0000 //default timer value is 110.0
//
//
exit:
jmp returnhere
//
//
"dmc2.exe"+5A4CF: //style point timer
jmp newmem
nop 6
returnhere:
//
//
"dmc2.exe"+23206E: //on-hit style loss
jmp newmem02
nop 5
hitlossdone:
//
//
"dmc2.exe"+23DF64: //called when style point timer empties
//mov [rbx+00000638],esi
jmp stylelosshandler
nop
decaycomp:
//
//
[DISABLE]
dealloc(newmem)
dealloc(newmem02)
dealloc(stylelosshandler)
dealloc(stylelosstimer)
dealloc(xmholder)
dealloc(onhitstylelossscalar)
dealloc(styleptstoloseondecay)
unregistersymbol(stylelosstimer)
unregistersymbol(onhitstylelossscalar)
unregistersymbol(styleptstoloseondecay)
"dmc2.exe"+5a4cf:
mov [r8+00000634],42DC0000
"dmc2.exe"+23206E:
mov [rbx+00000634],3A83126F
"dmc2.exe"+23DF64:
mov [rbx+00000638],esi
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1060</ID>
                  <Description>"Time Before a Style Rank Is Lost"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>stylelosstimer</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1061</ID>
                  <Description>"Divide Style Points by (value) When Hit"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>onhitstylelossscalar</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1062</ID>
                  <Description>"DEBUG: Last style rank when timer hit 0"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>2 Bytes</VariableType>
                  <Address>styleptstoloseondecay</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1063</ID>
                  <Description>"DEBUG: Time Remaining in Combo"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>dmc2.exe+158A964</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1064</ID>
                  <Description>"DEBUG: Style Pts HUD Time"</Description>
                  <VariableType>2 Bytes</VariableType>
                  <Address>dmc2.exe+158A966</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1065</ID>
              <Description>"Style Point Gain Multiplier"</Description>
              <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+5A4BC)
label(returnhere)
label(originalcode)
label(exit)
alloc(styleptsscalar,64)
registersymbol(styleptsscalar)
styleptsscalar:
dd (float)1.5

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
mulss xmm1,[styleptsscalar]
cvttss2si eax,xmm1
test r10d,r10d

exit:
jmp returnhere

"dmc2.exe"+5A4BC:
jmp newmem
nop 2
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(styleptsscalar)
"dmc2.exe"+5a4bc:
cvttss2si eax,xmm1
test r10d,r10d
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1066</ID>
                  <Description>"Style Points Gain Multiplier Value"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>styleptsscalar</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1085</ID>
              <Description>"Loadout Hotswapper - Use D-Pad and Right Trigger"</Description>
              <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>//Thank you Siyan!
[ENABLE]
aobscanmodule(styleswitchinglol,dmc2.exe,C0 48 89 41 08 48 89 41 10) // should be unique
alloc(newmem,$1000,"dmc2.exe"+19372)
alloc(lastUsedInput,64)
alloc(regAfterBitmask,64)
alloc(allowDodgeOffset,64)
alloc(dodgeOffsetContinueOK,64)
alloc(useInstantSDT,64)
alloc(setSwordRotBind,64)
define(CurrentCharacter,dmc2.exe+1588B31)
label(rotateSword)
label(returnhere)
label(finished)
label(testForHold)
label(amuletTestForHold)
label(checkAmuletToRotate)
label(rotateLeftAmulet)
label(rotateRightAmulet)
label(rotateTopAmulet)
label(setRightAmuletToQuick)
label(setLeftAmuletToHealing)
label(setLeftAmuletToOffence)
label(setTopAmuletToFrost)
label(setTopAmuletToElectro)
label(cycleToMerciless)
label(cycleToVendetta)
label(cycleToRebellion)
label(L3SwordRotation)
define(inputpressed,dmc2.exe+7DD68D)
define(CurrentSword,dmc2.exe+158A80F)
registersymbol(inputpressed)
registersymbol(lastUsedInput)
registersymbol(regAfterBitmask)
registersymbol(allowDodgeOffset)
registersymbol(dodgeOffsetContinueOK)
registersymbol(useInstantSDT)
registersymbol(setSwordRotBind)
useInstantSDT:
dw (int)0

const_useInstantSDT:
dd (float)1.2

restore_useInstantSDT:
db (int)0

allowDodgeOffset:
db (int)0

lastUsedInput:
dw (int)0

setSwordRotBind:
db (int)0

//Check to see if current button input is Right Trigger (Disable Lock-on)
newmem:
//check if an SDT cancel was done last cycle
cmp [restore_useInstantSDT],1
je restoreDT
//Re-do the bitmask for checking D-Pad inputs
push eax
mov eax, [inputpressed]
and eax, 0xFFFFFFF0
mov [regAfterBitmask], eax
pop eax
cmp byte [regAfterBitmask],0x80
je amuletTestForHold
cmp byte [regAfterBitmask],0x10
je amuletTestForHold
cmp byte [regAfterBitmask],0x20
je amuletTestForHold
//Trish - Plant Sparda instantly with DPAD DWN
cmp byte [regAfterBitmask],0x40
je sdtTestForHold
//dodge offset needs raw value
push eax
mov eax, [inputpressed-1]
and eax, 0x000000FF
mov [regAfterBitmask], eax
pop eax
//Dodge Inputs
cmp byte [regAfterBitmask],0x20
je testForCharacter
cmp byte [regAfterBitmask],0x28
je testForCharacter
//Dodge Offset Inputs (Attack + Dodge [LOCK-ON OK])
cmp byte [regAfterBitmask],0x30
je testForCharacter
cmp byte [regAfterBitmask],0x38
je testForCharacter
//jank cancel inputs
cmp byte [regAfterBitmask],0x40
je testDupeInputsJC
cmp byte [regAfterBitmask],0x48
je testDupeInputsJC
cmp byte [regAfterBitmask],0x50
je testDupeInputsJC
cmp byte [regAfterBitmask],0x58
je testDupeInputsJC
//L3 Weapon Swap Rebind
cmp byte [setSwordRotBind],0x1
je L3SwordRotation
//Apply a bitmask to the currently held inputs to get only the first value
push eax
mov eax, [inputpressed-1]
and eax, 0x0000000F
mov [regAfterBitmask], eax
pop eax
//Jump if any combination of the triggers/bumpers also includes RT
cmp byte [regAfterBitmask],02
je testForHold
cmp byte [regAfterBitmask],06
je testForHold
cmp byte [regAfterBitmask],0x0A
je testForHold
cmp byte [regAfterBitmask],0x0F
je testForHold
cmp byte [regAfterBitmask],0x0E
je testForHold
cmp byte [regAfterBitmask],03
je testForHold
cmp byte [regAfterBitmask],07
je testForHold
jmp returnhere

L3SwordRotation:
//Apply a bitmask to the currently held inputs to get only the first value
push eax
mov eax, [inputpressed-1]
and eax, 0x00000F00
mov [regAfterBitmask], eax
pop eax
cmp [regAfterBitmask],0x200
je testForHold
jmp returnhere

//Duplicate code from sword switcher
amuletTestForHold:
push eax
mov eax, [lastUsedInput+1]
and eax, 0xFFFFFFF0
mov [regAfterBitmask], eax
pop eax
//check for duplicate d-pad inputs
cmp [regAfterBitmask],0x80
je returnhere
cmp [regAfterBitmask],0x10
je returnhere
cmp [regAfterBitmask],0x20
je returnhere
cmp [regAfterBitmask],0x40
je returnhere
jmp checkAmuletToRotate

checkAmuletToRotate:
//This is awful. Clean it up later?
//Re-do the bitmask for checking D-Pad inputs
push eax
mov eax, [inputpressed]
and eax, 0xFFFFFFF0
mov [regAfterBitmask], eax
pop eax
cmp byte [regAfterBitmask],0x80
je rotateLeftAmulet
cmp byte [regAfterBitmask],0x10
je rotateTopAmulet
cmp byte [regAfterBitmask],0x20
je rotateRightAmulet
jmp returnhere

//Rotates right amulet between Quick and Aerial hearts.
//Aqua Heart is ignored for obvious reasons.
rotateRightAmulet:
cmp byte ptr [dmc2.exe+158A849], 2
je setRightAmuletToQuick
mov byte ptr [dmc2.exe+158A849], 2
jmp returnhere

setRightAmuletToQuick:
mov byte ptr [dmc2.exe+158A849], 3
jmp returnhere

//Rotates left amulet between Chrono/Healing/Offence.
//Maybe add option to ignore Healing Heart?
rotateLeftAmulet:
cmp byte ptr [dmc2.exe+158A84B], 1
je setLeftAmuletToHealing
cmp byte ptr [dmc2.exe+158A84B], 2
je setLeftAmuletToOffence
mov byte ptr [dmc2.exe+158A84B], 1
jmp returnhere

setLeftAmuletToHealing:
mov byte ptr [dmc2.exe+158A84B], 2
jmp returnhere

setLeftAmuletToOffence:
mov byte ptr [dmc2.exe+158A84B], 3
jmp returnhere

//Rotates top amulet between Flame/Frost/Electro.
rotateTopAmulet:
cmp byte ptr [dmc2.exe+158A84A], 1
je setTopAmuletToFrost
cmp byte ptr [dmc2.exe+158A84A], 2
je setTopAmuletToElectro
mov byte ptr [dmc2.exe+158A84A], 1
jmp returnhere

setTopAmuletToFrost:
mov byte ptr [dmc2.exe+158A84A], 2
jmp returnhere

setTopAmuletToElectro:
mov byte ptr [dmc2.exe+158A84A], 3
jmp returnhere

//Blocks swords rotating by holding button
testForHold:
//Apply a bitmask to the currently held inputs to get only the first value
push eax
mov eax, [lastUsedInput]
and eax, 0x0000000F
mov [regAfterBitmask], eax
pop eax
//messy shit
//Check for duplicate RT inputs
cmp [regAfterBitmask],0x0F
je returnhere
cmp [regAfterBitmask],06
je returnhere
cmp [regAfterBitmask],0x0A
je returnhere
cmp [regAfterBitmask],0x0E
je returnhere
cmp [regAfterBitmask],03
je returnhere
cmp [regAfterBitmask],02
je returnhere
cmp [regAfterBitmask],07
je returnhere
push eax
mov eax, [lastUsedInput]
and eax, 0x00000F00
mov [regAfterBitmask], eax
pop eax
cmp [regAfterBitmask],0x200
je returnhere
//If no duped inputs, rotate sword
jmp rotateSword

//Rotates sword to next value
rotateSword:
//Trish - Instant Round Trip on RT
//This avoids a crash if you try to swap her sword
cmp byte ptr [CurrentCharacter], 0x02
je instantRT
//Swap Swords
cmp byte ptr [CurrentSword],00
je cycleToMerciless
cmp byte ptr [CurrentSword],01
je cycleToVendetta
cmp byte ptr [CurrentSword],02
je cycleToRebellion
jmp returnhere

cycleToMerciless:
mov byte ptr [CurrentSword],01
jmp returnhere

cycleToVendetta:
mov byte ptr [CurrentSword],02
jmp returnhere

cycleToRebellion:
mov byte ptr [CurrentSword],00
jmp returnhere

testForCharacter:
//check if dodge offset is enabled
cmp [allowDodgeOffset], 1
jne returnhere
//fixes softlock in underwater sections
cmp byte ptr [dmc2.exe+158A716], 4
je returnhere
//check if current character is Lucia, otherwise end
//cmp [dmc2.exe+1588B30],0100
//je testForHold_DodgeOffset
//cmp [dmc2.exe+1588B30],0501
//je testForHold_DodgeOffset
//cmp [dmc2.exe+1588B30],0301
//je testForHold_DodgeOffset
//cmp [dmc2.exe+1588B30],0701
//je testForHold_DodgeOffset
jmp testForHold_DodgeOffset

testForHold_DodgeOffset:
//Apply a bitmask to the currently held inputs to get only the first value
push eax
mov eax, [lastUsedInput]
and eax, 0x0000000F
mov [regAfterBitmask], eax
pop eax
//messy shit
//Check for duplicate inputs
//Dodge Offset Input (Attack + Dodge)
cmp byte [regAfterBitmask],0x20
je returnhere
//Free Dodge
cmp byte [regAfterBitmask],0x28
je returnhere
cmp byte [regAfterBitmask],0x30
je returnhere
cmp byte [regAfterBitmask],0x38
je returnhere
jmp tryFreeDodge

tryFreeDodge:
//god i hope the last action ID is updated by now
//lol of course it isnt
//disable dodge offset when in DT
cmp byte ptr [dmc2.exe+158A848],0x1
je returnhere
jmp executeFreeDodge

executeFreeDodge:
mov [dodgeOffsetContinueOK], 0
mov [dmc2.exe+158A714],0x0
//dodge offset needs raw value
push ebx
mov ebx, [inputpressed-1]
and ebx, 0x000000FF
mov [regAfterBitmask], ebx
pop ebx
//Dodge Offset Input (Attack + Dodge)
cmp byte [regAfterBitmask],0x30
je executeDodgeOffset
cmp byte [regAfterBitmask],0x38
je executeDodgeOffset
jmp returnhere

executeDodgeOffset:
mov [dodgeOffsetContinueOK], 0x1
jmp returnhere

testDupeInputsJC:
//Apply a bitmask to the currently held inputs to get only the first value
push eax
mov eax, [lastUsedInput]
and eax, 0x0000000F
mov [regAfterBitmask], eax
pop eax
//messy shit
//Check for duplicate inputs
//JC Input is just jump
cmp byte [regAfterBitmask],0x40
je returnhere
//Free Dodge
cmp byte [regAfterBitmask],0x48
je returnhere
cmp byte [regAfterBitmask],0x49
je returnhere
//cmp byte [regAfterBitmask],0x50
//je returnhere
//cmp byte [regAfterBitmask],0x58
//je returnhere
jmp tryJankCancel

tryJankCancel:
//disable jank cancel when in DT
//might not need this since there's always an action tied to jump
cmp [allowJankCancel],1
jne returnhere
//Disable JCs in DT/SDT because fuck
cmp byte ptr [dmc2.exe+158A848],0x0
jne returnhere
jmp executeJankCancel

executeJankCancel:
//cmp byte ptr [dmc2.exe+158A354],1
//jne returnhere
mov [dmc2.exe+158A872],1
//mov [dmc2.exe+158A3C4],999.0
mov [dmc2.exe+158A714],0x2
mov [jankCancelSaveInertia],1
mov [jankCancelTimer],0
mov [allowJankCancel],0
jmp returnhere

returnhere:
  push eax
  mov eax, [inputpressed-1]
  mov [lastUsedInput], eax
  pop eax
  mov [rcx+08],rax
  mov [rcx+10],rax
  //decrement the jank cancel timer by 1
  jmp jankCancelTimerHandler
  //jmp finished

jankCancelTimerHandler:
cmp [jankCancelTimer],0
jg decrementJCTimer
cmp byte ptr [dmc2.exe+158A872],2
je removeJCJump
mov [allowJankCancel],0
mov [jankCancelTimer],0
jmp finished

removeJCJump:
mov byte ptr [dmc2.exe+158A872],0
mov [allowJankCancel],0
mov [jankCancelTimer],0
jmp finished

decrementJCTimer:
sub [jankCancelTimer],1
jmp finished

//Duplicate code from sword switcher
sdtTestForHold:
push eax
mov eax, [lastUsedInput+1]
and eax, 0xFFFFFFF0
mov [regAfterBitmask], eax
pop eax
//check for duplicate d-pad inputs
cmp [regAfterBitmask],0x40
je returnhere
jmp instantSpardaPlant

instantSpardaPlant:
cmp byte ptr [dmc2.exe+158A8C2],0
jne instantSpardaPickup
mov byte ptr [dmc2.exe+158A8C2],10
jmp returnhere

instantRT:
cmp byte ptr [dmc2.exe+158A8C2],0
jne instantSpardaPickup
mov byte ptr [dmc2.exe+158A8C2],1
jmp returnhere

instantSpardaPickup:
mov byte ptr [dmc2.exe+158A8C2],0
jmp returnhere

executeSDT:
mov [useInstantSDT],1
call dmc2.exe+230FB0
jmp returnhere

executeSDTCancel:
push eax
mov eax, [dmc2.exe+158A84E]
mov [dmc2.exe+158A84E],0
//slightly boost DT when cancelling SDT to mimic 5's Quadruple S
//cvtsi2ss xmm0,eax
//mulss xmm0,[const_useInstantSDT]
//cvttss2si eax,xmm0
cmp eax,0x12C0
jge quadSPrep
mov [useInstantSDT],eax
mov [restore_useInstantSDT],1
//mov [dmc2.exe+158A84E],eax
pop eax
jmp returnhere

quadSPrep:
mov [useInstantSDT],0x17A0
mov [restore_useInstantSDT],1
pop eax
jmp returnhere

restoreDT:
mov [restore_useInstantSDT],0
push eax
mov eax, [useInstantSDT]
mov [dmc2.exe+158A84E],eax
pop eax
mov [useInstantSDT],0
jmp newmem

styleswitchinglol+01:
jmp newmem
nop
nop
nop
finished:
registersymbol(styleswitchinglol)

[DISABLE]
dealloc(newmem)
dealloc(lastUsedInput)
dealloc(regAfterBitmask)
dealloc(allowDodgeOffset)
dealloc(dodgeOffsetMoveID)
dealloc(setSwordRotBind)
unregistersymbol(lastUsedInput)
unregistersymbol(styleswitchinglol)
unregistersymbol(regAfterBitmask)
unregistersymbol(allowDodgeOffset)
unregistersymbol(dodgeOffsetContinueOK)
unregistersymbol(inputpressed)
unregistersymbol(setSwordRotBind)
styleswitchinglol+01:
  db 48 89 41 08 48 89 41 10

{
// ORIGINAL CODE - INJECTION POINT: "dmc2.exe"+19372

"dmc2.exe"+19367: CC                    -  int 3
"dmc2.exe"+19368: CC                    -  int 3
"dmc2.exe"+19369: CC                    -  int 3
"dmc2.exe"+1936A: CC                    -  int 3
"dmc2.exe"+1936B: CC                    -  int 3
"dmc2.exe"+1936C: CC                    -  int 3
"dmc2.exe"+1936D: CC                    -  int 3
"dmc2.exe"+1936E: CC                    -  int 3
"dmc2.exe"+1936F: CC                    -  int 3
"dmc2.exe"+19370: 33 C0                 -  xor eax,eax
// ---------- INJECTING HERE ----------
"dmc2.exe"+19372: 48 89 41 08           -  mov [rcx+08],rax
"dmc2.exe"+19376: 48 89 41 10           -  mov [rcx+10],rax
// ---------- DONE INJECTING  ----------
"dmc2.exe"+1937A: 48 89 41 18           -  mov [rcx+18],rax
"dmc2.exe"+1937E: 48 89 41 20           -  mov [rcx+20],rax
"dmc2.exe"+19382: 48 89 41 28           -  mov [rcx+28],rax
"dmc2.exe"+19386: 48 89 41 30           -  mov [rcx+30],rax
"dmc2.exe"+1938A: C3                    -  ret
"dmc2.exe"+1938B: CC                    -  int 3
"dmc2.exe"+1938C: CC                    -  int 3
"dmc2.exe"+1938D: CC                    -  int 3
"dmc2.exe"+1938E: CC                    -  int 3
"dmc2.exe"+1938F: CC                    -  int 3
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1093</ID>
                  <Description>"Trish - Extended Moveset"</Description>
                  <Options moHideChildren="1"/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"dmc2.exe"+23D547) 
label(returnhere)
label(originalcode)
label(exit)
alloc(moveswapalloc,8)
alloc(previousMoveID,64)
define(CurrentSword,dmc2.exe+158A80F)
registersymbol(previousMoveID)
registersymbol(moveswapalloc)
moveswapalloc:
db 0

newmem:
//Before we do any move swaps, check to see what sword
//is currently equipped so we can declone the swords.
//
//Need to change the moveID in ebx directly
//so Dodge Offset doesn't need hardcoding for each sword
//
//oh how wrong i was
//
//Check for Dodge Offset
//comically stupid workaround for guns getting swapped
push eax
mov eax, [inputpressed-1]
and eax, 0x000000FF
mov [regAfterBitmask], eax
pop eax
cmp byte [regAfterBitmask],0x80
je originalcode
cmp byte [regAfterBitmask],0xC0
je originalcode
cmp byte [regAfterBitmask],0xA0
je originalcode
cmp byte [regAfterBitmask],0x88
je originalcode
push ebx
mov ebx, [moveswapalloc]
mov [previousMoveID], ebx
pop ebx
cmp byte ptr [dmc2.exe+158A8C2],00
je spardaMoveSwaps
//just in case this SOMEHOW breaks
jmp bareknuckleMoveSwaps
//

//universal air launcher input
spardaMoveSwaps:
mov [moveswapalloc],eax
cmp [moveswapalloc],0x00000009
je trySpardaAirHighTime
//always end with a jump to originalcode
jmp originalcode

bareknuckleMoveSwaps:
mov [moveswapalloc],eax
cmp [moveswapalloc],0x00000009
je tryBKAirHighTime
cmp [moveswapalloc],0x00000113
je tryBKAirHighTime
cmp [moveswapalloc],0x00000114
je tryBKAirHighTime
cmp [moveswapalloc],0x00000014
je tryBKAirHighTime
cmp [moveswapalloc],0x00000013
je tryBKAirHighTime
//always end with a jump to originalcode
jmp originalcode

trySpardaAirHighTime:
//Dodge inputs
cmp byte [regAfterBitmask],0x20
je doSpardaAirHighTime
cmp byte [regAfterBitmask],0x28
je doSpardaAirHighTime
//Dodge Offset Inputs (Attack + Dodge [LOCK-ON OK])
cmp byte [regAfterBitmask],0x30
je doSpardaAirHighTime
cmp byte [regAfterBitmask],0x38
je doSpardaAirHighTime
jmp originalcode

doSpardaAirHighTime:
mov byte ptr [r10+000003EC],0x06
jmp returnhere

tryBKAirHighTime:
//Dodge inputs
cmp byte [regAfterBitmask],0x20
je doBKAirHighTime
cmp byte [regAfterBitmask],0x28
je doBKAirHighTime
//Dodge Offset Inputs (Attack + Dodge [LOCK-ON OK])
cmp byte [regAfterBitmask],0x30
je doBKAirHighTime
cmp byte [regAfterBitmask],0x38
je doBKAirHighTime
jmp originalcode

doBKAirHighTime:
mov byte ptr [r10+000003EC],0x14
jmp returnhere

//the al register holds the ID of the original move being executed.
//by comparing it to a move ID, we can then intercept this call
//and insert a different move ID instead.

originalcode:
mov [r10+000003EC],al
jmp returnhere

exit:
jmp returnhere

"dmc2.exe"+23D547:
jmp newmem
nop
nop
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+23D547:
mov [r10+000003EC],al
//Alt: db 41 88 82 EC 03 00 00

dealloc(moveswapalloc)
dealloc(previousMoveID)
unregistersymbol(previousMoveID)
unregistersymbol(moveswapalloc)
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1086</ID>
                      <Description>"Allow Dodge Cancels"</Description>
                      <DropDownList>1:Enable
0:Disable
</DropDownList>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>4 Bytes</VariableType>
                      <Address>allowDodgeOffset</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1094</ID>
                      <Description>"Allow Dodge Offset?"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Byte</VariableType>
                      <Address>dodgeOffsetContinueOK</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1095</ID>
                      <Description>"Show Debug Info"</Description>
                      <Options moHideChildren="1"/>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>1096</ID>
                          <Description>"Move ID"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>dmc2.exe+158A71C</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1097</ID>
                          <Description>"Move Swap Mem"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <VariableType>4 Bytes</VariableType>
                          <Address>moveswapalloc</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1098</ID>
                          <Description>"move swap alloc"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <VariableType>4 Bytes</VariableType>
                          <Address>moveswapalloc</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1099</ID>
                          <Description>"premoveid"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>previousMoveID</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1100</ID>
                      <Description>"Show Loadout Debug Info"</Description>
                      <Options moHideChildren="1"/>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>1101</ID>
                          <Description>"Equipped Sword"</Description>
                          <DropDownList>0:Rebellion
1:Merciless
2:Vendetta
</DropDownList>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Byte</VariableType>
                          <Address>dmc2.exe+158A80F</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1102</ID>
                          <Description>"DEBUG: LAST INPUT"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>lastUsedInput</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1103</ID>
                          <Description>"regafterbitmask"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>regAfterBitmask</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1104</ID>
                          <Description>"InputPressed"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <VariableType>4 Bytes</VariableType>
                          <Address>dmc2.exe+7DD68C</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1105</ID>
                          <Description>"Amulet Equip 1"</Description>
                          <DropDownList ReadOnly="1" DisplayValueAsItem="1">2:Aerial Heart
3:Quick Heart
</DropDownList>
                          <VariableType>Byte</VariableType>
                          <Address>dmc2.exe+158A849</Address>
                          <Hotkeys>
                            <Hotkey>
                              <Action>Toggle Activation</Action>
                              <Keys/>
                              <ID>0</ID>
                            </Hotkey>
                            <Hotkey>
                              <Action>Set Value</Action>
                              <Keys>
                                <Key>112</Key>
                              </Keys>
                              <Value>1</Value>
                              <ID>1</ID>
                            </Hotkey>
                          </Hotkeys>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1106</ID>
                          <Description>"Amulet Equip 2"</Description>
                          <DropDownList ReadOnly="1" DisplayValueAsItem="1">1:Flame Heart
2:Frost Heart
3:Electro Heart
</DropDownList>
                          <VariableType>Byte</VariableType>
                          <Address>dmc2.exe+158A84A</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1107</ID>
                          <Description>"Amulet Equip 3"</Description>
                          <DropDownList ReadOnly="1" DisplayValueAsItem="1">1:Chrono Heart
2:Healing Heart
3:Offence Heart
</DropDownList>
                          <VariableType>Byte</VariableType>
                          <Address>dmc2.exe+158A84B</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1108</ID>
                          <Description>"char"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Byte</VariableType>
                          <Address>dmc2.exe+1588B31</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>1627</ID>
                  <Description>"Instant Round Trip Bind"</Description>
                  <DropDownList DisplayValueAsItem="1">0:Right Trigger
1:LS Click (L3)
</DropDownList>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Byte</VariableType>
                  <Address>setSwordRotBind</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1368</ID>
              <Description>"Run Speed Modifier?"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+23A9BA)
label(returnhere)
label(originalcode)
label(exit)
alloc(runMult,128,"dmc2.exe"+23A9BA)
registersymbol(runMult)
runMult:
dd (float)1.5

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mulss xmm8,[runMult]
jmp originalcode

originalcode:
movss [rdi+40],xmm8

exit:
jmp returnhere

"dmc2.exe"+23A9BA:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(runMult)
unregistersymbol(runMult)
"dmc2.exe"+23A9BA:
movss [rdi+40],xmm8
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1369</ID>
                  <Description>"Running Speed Multiplier"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>runMult</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1370</ID>
              <Description>"SMGS Don't Change Gravity"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+219F5A)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
jmp returnhere

originalcode:
movss [rbx+24],xmm0

exit:
jmp returnhere

"dmc2.exe"+219F5A:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+219F5A:
movss [rbx+24],xmm0
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1371</ID>
              <Description>"SMGS Don't Push Up"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+219D9B)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
jmp returnhere

originalcode:
mov [rbx+24],41300000

exit:
jmp returnhere

"dmc2.exe"+219D9B:
jmp newmem
nop 2
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+219D9B:
mov [rbx+24],41300000
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1372</ID>
              <Description>"Gravity Mods"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+241AF4)
alloc(gravityChange,64)
label(returnhere)
label(originalcode)
label(exit)
registersymbol(gravityChange)
gravityChange:
dd (float)0.0
post_gravityChange:
dd (float)0.0
negation_gravityChange:
dd (float)-1.0
const_gravityChange:
dd (float)0.0
smgs_gravityChange:
dd (float)0.33
fullhouse_gravityChange:
dd (float)6.0

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
movss xmm3,[rdi+34]
movss [gravityChange],xmm3
//movss xmm4, [dmc2.exe+158A354]
//push eax
//cvttss2si eax, xmm4
//cmp eax,0
//pop eax
//jle fallSpeedFix
//divss xmm3,[dmc2.exe+158A3C4]
//divss xmm3,[dmc2.exe+158A3C4]
//mulss xmm2,xmm3
//mulss xmm2,[negation_gravityChange]
//movss [post_gravityChange],xmm2
cmp dword ptr [dmc2.exe+158A71C],0x0000205
je smgfix
cmp dword ptr [dmc2.exe+158A71C],0x0000204
je smgfix
cmp dword ptr [dmc2.exe+158A71C],0x000021B
je smgfix
cmp dword ptr [dmc2.exe+158A71C],0x000011C
je fullhouse
jmp originalcode

smgfix:
mulss xmm3,[smgs_gravityChange]
movss xmm4, [dmc2.exe+158A354]
//push eax
//cvttss2si eax, xmm4
//cmp eax,0
//pop eax
//jl smgfallfix
jmp execute

smgfallfix:
mulss xmm3,[smgs_gravityChange]
//mulss xmm3,[smgs_gravityChange]
jmp execute

fullhouse:
mulss xmm3,[fullhouse_gravityChange]
add dword ptr [dmc2.exe+158A370],11
jmp execute

execute:
mulss xmm2,xmm3
//mulss xmm2,[negation_gravityChange]
movss [post_gravityChange],xmm2
jmp returnhere

fallSpeedFix:
divss xmm3,[dmc2.exe+158A3C4]
divss xmm3,[dmc2.exe+158A3C4]
divss xmm3,[dmc2.exe+158A3C4]
mulss xmm2,xmm3
movss xmm3,[dmc2.exe+158A3C4]
movss [gravityChange],xmm3
mulss xmm2,[negation_gravityChange]
movss [post_gravityChange],xmm2
jmp originalcode

originalcode:
mulss xmm2,[rdi+34]

exit:
jmp returnhere

"dmc2.exe"+241AF4:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(gravityChange)
unregistersymbol(gravityChange)
"dmc2.exe"+241AF4:
mulss xmm2,[rdi+34]
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1373</ID>
                  <Description>"gravityChange"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>gravityChange</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1374</ID>
                  <Description>"No description"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>gravityChange+4</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1575</ID>
          <Description>"Air Raid Doesn't Eat DJ"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+231132)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
jmp returnhere

originalcode:
mov word ptr [rbx+00000541],0001

exit:
jmp returnhere

"dmc2.exe"+231132:
jmp newmem
nop 4
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+231132:
mov word ptr [rbx+00000541],0001
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>180</ID>
      <Description>"----------------------------------------"</Description>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>1383</ID>
      <Description>"DMC1 Dante"</Description>
      <Options moHideChildren="1" moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>1384</ID>
          <Description>"Fine Tuning - Advanced Users Only"</Description>
          <Options moHideChildren="1" moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>1385</ID>
              <Description>"Damage Dealt/Taken Modifier"</Description>
              <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,3096,"dmc2.exe"+5431B)
alloc(damagemult,64)
alloc(enemydamagemult,64)
alloc(muststylethresh,64)
alloc(enemydeathfixer,64)
alloc(bayoinstakilltoggle,64)
alloc(incomingdamage,64)
alloc(weapondamagemult,64)
alloc(jankCancelTimer,64)
alloc(allowJankCancel,64)
alloc(jankCancelSaveInertia,64)
define(CurrentSword,dmc2.exe+158A80F)
registersymbol(weapondamagemult)
weapondamagemult:
dd (float)1.0
merciless_weapondamagemult:
dd (float)1.0
vendetta_weapondamagemult:
dd (float)1.0
label(returnhere)
label(originalcode)
label(exit)
label(enemycase)
label(bayohealth)
label(saveplayer)
label(bayohealthfailcheck)
registersymbol(damagemult)
registersymbol(enemydamagemult)
registersymbol(muststylethresh)
registersymbol(bayoinstakilltoggle)
registersymbol(incomingdamage)
registersymbol(jankCancelTimer)
registersymbol(allowJankCancel)
registersymbol(jankCancelSaveInertia)
jankCancelSaveInertia:
dd (int)0

allowJankCancel:
dd (int)0

jankCancelTimer:
dd (int)0

damagemult:
dd (float)6.0

enemydamagemult:
dd (float)2.0

enemydeathfixer:
dd (float)1.0

bayoinstakilltoggle:
dd (int)0

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
//before we do ANYTHING, check if this is applying damage and not healing
cmp si, 0
jnle originalcode //jump to original code if this is healing something
//overrides go here
//test if the target's health is the player's health
push ebx
mov ebx,[rdi+00000140]
cmp ebx, ["dmc2.exe"+158a470]
pop ebx
jne enemycase //jump to enemy damage case if values don't match
//prepare ecx for float mult
push eax
xor eax, eax //clear eax
neg si
mov ax, si //move incoming damage to cx register
cvtsi2ss xmm0, eax //convert incoming damage to float
mulss xmm0, [damagemult] //multiply incoming damage by player damage modifier
cvttss2si eax, xmm0 //convert to int again
neg eax
mov si, ax
pop eax
cmp [bayoinstakilltoggle], 1 //survive with 1 hp if health &gt; 1 when taking lethal damage
je bayohealth
add ax, si //continue with original code
mov [rdi+00000140],ax
jmp exit

enemycase:
//prime JC timer
mov [jankCancelTimer],7
push ebx
mov ebx,[dmc2.exe+158A968]
cmp ebx, [muststylethresh]
pop ebx
jnge exit //ignore damage dealt if player has fewer than specified style pts
//apply outgoing damage modifiers
cmp eax, F //fixes enemies not dying if outgoing damage &lt; 1.0
jle enemyoverride
push eax
xor eax, eax //clear eax
neg si
mov ax, si //move incoming damage to ax register
cvtsi2ss xmm0, eax //convert incoming damage to float
mulss xmm0, [enemydamagemult] //multiply incoming damage by player damage modifier
cmp byte ptr [CurrentSword],00
je rebellionDamage
//Merciless
cmp byte ptr [CurrentSword],01
je mercilessDamage
//Vendetta
cmp byte ptr [CurrentSword],02
je vendettaDamage
cvttss2si eax, xmm0 //convert to int again
neg eax
mov si, ax
pop eax
add ax, si
mov [rdi+00000140],ax
jmp exit

rebellionDamage:
mulss xmm0, [weapondamagemult]
jmp convertFloatToInt

mercilessDamage:
mulss xmm0, [merciless_weapondamagemult]
jmp convertFloatToInt

vendettaDamage:
mulss xmm0, [vendetta_weapondamagemult]
jmp convertFloatToInt

convertFloatToInt:
cvttss2si eax, xmm0 //convert to int again
neg eax
mov si, ax
pop eax
add ax, si
mov [rdi+00000140],ax
jmp exit

enemyoverride:
push eax
xor eax, eax //clear eax
neg si
mov ax, si //move incoming damage to ax register
cvtsi2ss xmm0, eax //convert incoming damage to float
mulss xmm0, [enemydeathfixer] //multiply incoming damage by player damage modifier
cvttss2si eax, xmm0 //convert to int again
neg eax
mov si, ax
pop eax
add ax, si
mov [rdi+00000140],ax
jmp exit

bayohealth:
push ebx
xor ebx, ebx
mov ebx, eax
add bx, si
cmp bx, ["dmc2.exe"+158a470] //checks if any damage is occurring
jge bayohealthfailcheck
mov [incomingdamage], bx
cmp bx, 1 //checks if incoming damage &gt;= player's health
pop ebx
//mov [incomingdamage], 776
jnle originalcode
push ebx
xor ebx, ebx
mov ebx, ["dmc2.exe"+158a470]
cmp bx, 1 //check if player's health &gt; 1
pop ebx
jg saveplayer
jmp originalcode

saveplayer:
mov [incomingdamage], 5
mov [rdi+00000140], 1 //sets player's health to 1
jmp exit

bayohealthfailcheck:
pop ebx
jmp originalcode

originalcode:
add ax, si
mov [rdi+00000140],ax
jmp exit

exit:
cmp [jankCancelTimer],7
je jankCancelWindow
jmp returnhere

jankCancelWindow:
cmp byte ptr [dmc2.exe+161BEEC],1
je initJankCancel
cmp byte ptr [dmc2.exe+158A86E],0
jne initJankCancel
//cmp [dmc2.exe+158A354],0
//jne allowJankCancel
//cmp dword ptr [dmc2.exe+158A71C],0x0000011D
//je allowJankCancel
mov [jankCancelTimer],0
mov [allowJankCancel],0
jmp returnhere

initJankCancel:
mov [allowJankCancel],1
mov [jankCancelTimer],0xFF
cmp byte ptr [dmc2.exe+158A872],0
jne refreshJumpForJC
jmp returnhere

refreshJumpForJC:
mov byte ptr [dmc2.exe+158A872],2
jmp returnhere

"dmc2.exe"+5431B:
jmp newmem
nop 5
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(damagemult)
dealloc(muststylethresh)
dealloc(incomingdamage)
dealloc(bayoinstakilltoggle)
dealloc(weapondamagemult)
unregistersymbol(damagemult)
unregistersymbol(enemydamagemult)
unregistersymbol(muststylethresh)
unregistersymbol(incomingdamage)
unregistersymbol(bayoinstakilltoggle)
unregistersymbol(weapondamagemult)
"dmc2.exe"+5431B:
add ax,si
mov [rdi+00000140],ax	
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1666</ID>
                  <Description>"Correct End-of-Mission Damage Tally"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+5435D)
label(returnhere)
label(originalcode)
label(exit)

newmem:
cmp [damagemult], 0
je nodamage
cvtsi2ss xmm0, esi //convert incoming damage to float
divss xmm0, [damagemult] //multiply incoming damage by player damage modifier
cvttss2si esi, xmm0 //convert to int again
jmp originalcode

nodamage:
mov esi,0
jmp originalcode

originalcode:
sub [rcx+000000C4],esi

exit:
jmp returnhere

"dmc2.exe"+5435D:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+5435D:
sub [rcx+000000C4],esi
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1667</ID>
                      <Description>"Damage Taken In Mission"</Description>
                      <VariableType>4 Bytes</VariableType>
                      <Address>dmc2.exe+1588BF4</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>1671</ID>
                  <Description>"Damage Options"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1386</ID>
                      <Description>"Damage Taken Multiplier"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>damagemult</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1387</ID>
                      <Description>"Damage Dealt Multiplier"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>enemydamagemult</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1388</ID>
                      <Description>"Bayonetta Magic Pixel"</Description>
                      <DropDownList>0:Disable
1:Enable
</DropDownList>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>4 Bytes</VariableType>
                      <Address>bayoinstakilltoggle</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1389</ID>
                      <Description>"NOTE: Must Style Mode requires Damage Dealt/Taken Modifier!!"</Description>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>1390</ID>
                          <Description>"Must Style Mode (See Values)"</Description>
                          <DropDownList>0:Disable Must Style
1500:[D]on't Worry
5000:[C]ome On!
10000:[B]ingo!
15000:[A]re You Ready?
20000:[S]howtime!!
</DropDownList>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>2 Bytes</VariableType>
                          <Address>muststylethresh</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1391</ID>
                      <Description>"Weapon-Specific Multipliers"</Description>
                      <Options moHideChildren="1"/>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>1392</ID>
                          <Description>"Rebellion/Cutlaseer/Sparda Damage"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>weapondamagemult</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1393</ID>
                          <Description>"Merciless/Klyamoor Damage"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>weapondamagemult+4</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1394</ID>
                          <Description>"Vendetta / Zambak Damage"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>weapondamagemult+8</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1395</ID>
              <Description>"Adjustable Enemy Stun"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+5872C)
alloc(stunmult,64)
alloc(handgunnerf,64)
alloc(dtstunmult,64)
label(returnhere)
label(originalcode)
label(exit)
label(movespecificstun)
label(stunmodifier)
label(dtstunmodifier)
registersymbol(stunmult)
registersymbol(handgunnerf)
registersymbol(dtstunmult)
stunmult:
dd (float)2.5

handgunnerf:
dd (float)0.1

dtstunmult:
dd (float)5.0

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
//check if this is hitting the player
//dont think a scalar for that is needed, everything breaks armor in like 1 hit
push ebx
mov ebx, [rcx+00000146]
cmp ebx, [dmc2.exe+158A476]
pop ebx
je originalcode
//check if current moveID is firing handguns
//if true, jump to handgun nerf
push ebx
mov ebx, [dmc2.exe+158A71C]
cmp ebx, 0x00000300
je movespecificstun
cmp ebx, 0x00000202
je movespecificstun
pop ebx
//check if player is in DT
cmp byte ptr [dmc2.exe+158A848],1
je dtstunmodifier
cmp byte ptr [dmc2.exe+158A848],2
je dtstunmodifier
jmp stunmodifier

stunmodifier:
cvtsi2ss xmm0, eax
mulss xmm0, [stunmult]
cvttss2si eax, xmm0
sub [rcx+00000146],ax
jmp exit

dtstunmodifier:
cvtsi2ss xmm0, eax
mulss xmm0, [dtstunmult]
cvttss2si eax, xmm0
sub [rcx+00000146],ax
jmp exit

//allows user to set special stun multiplier for the handguns
movespecificstun:
pop ebx
cmp [handgunnerf],1.0
je stunmodifier
cvtsi2ss xmm0, eax
mulss xmm0, [handgunnerf]
cvttss2si eax, xmm0
sub [rcx+00000146],ax
jmp exit

//incoming stun is in RAX
//need to intercept it and apply scalar
//optional: ignore scalar if in handguns action?
originalcode:
sub [rcx+00000146],ax
jmp exit

exit:
jmp returnhere

"dmc2.exe"+5872C:
jmp newmem
nop 2
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(stunmult)
dealloc(handgunnerf)
dealloc(dtstunmult)
unregistersymbol(stunmult)
unregistersymbol(handgunnerf)
unregistersymbol(dtstunmult)
"dmc2.exe"+5872C:
sub [rcx+00000146],ax

</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1396</ID>
                  <Description>"Stun Multiplier"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>stunmult</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1397</ID>
                  <Description>"DT Stun Multiplier"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>dtstunmult</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1398</ID>
                  <Description>"OPTIONAL: Handgun Stun Multiplier"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>handgunnerf</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1399</ID>
              <Description>"Adjustable Hitlag"</Description>
              <Options moHideChildren="1"/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : dmc2.exe
  Version: 
  Date   : 2020-12-04
  Author : sssiy

  This script does blah blah blah
}

[ENABLE]
aobscanmodule(HitStopDanteAdjust,dmc2.exe,F3 0F 11 83 94 00 00 00 F3 0F 10 83 A0 01 00 00 0F 57 F6) // should be unique
alloc(adjustablehitstop,$1000,"dmc2.exe"+23DD53)
label(code)
label(return)

registersymbol(adjustablehitstop)
adjustablehitstop:
  dd (float)0.9

code:
  movss xmm0,[adjustablehitstop]
  movss [rbx+00000094],xmm0
  jmp return

HitStopDanteAdjust:
  jmp code
  nop
  nop
  nop
return:
registersymbol(HitStopDanteAdjust)

[DISABLE]
HitStopDanteAdjust:
  db F3 0F 11 83 94 00 00 00
unregistersymbol(HitStopDanteAdjust)
dealloc(adjustablehitstop)
unregistersymbol(adjustablehitstop)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1400</ID>
                  <Description>"On-Hit Speed Multiplier"</Description>
                  <VariableType>Float</VariableType>
                  <Address>adjustablehitstop</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1401</ID>
              <Description>"Adjustable Enemy DT Armor Bonus"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+A4B28)
alloc(enemyDTArmorBonus,64)
alloc(restorearmorconst,64)
label(returnhere)
label(originalcode)
label(exit)
registersymbol(enemyDTArmorBonus)

restorearmorconst:
dd (float)0.1

enemyDTArmorBonus:
dd (float)5.0

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cvtsi2ss xmm0, ecx
//Divide by 10 to restore enemy's original armor value
mulss xmm0, [restorearmorconst]
//Apply user's specified armor bonus
mulss xmm0, [enemyDTArmorBonus]
cvttss2si ecx, xmm0
mov [rbx+00000146],cx
//This second address is the value the enemy's armor resets to after recovering
mov [rbx+00000148],cx
jmp exit

originalcode:
mov [rbx+00000146],cx

exit:
jmp returnhere

"dmc2.exe"+A4B28:
jmp newmem
nop 2
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(enemyDTArmorBonus)
dealloc(restorearmorconst)
unregistersymbol(enemyDTArmorBonus)

"dmc2.exe"+A4B28:
mov [rbx+00000146],cx
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1402</ID>
                  <Description>"Enemy DT Armor Multiplier"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>enemyDTArmorBonus</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1403</ID>
              <Description>"[DMC1 Dante] USF"</Description>
              <Options moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+2D3C70) 
label(returnhere)
label(originalcode)
label(exit)
alloc(speedmultalloc,64)
alloc(movemultalloc,64)
alloc(weaponmultalloc,128)
alloc(dtMul,64)
define(CurrentSword,dmc2.exe+158A80F)
define(InputPressed02,dmc2.exe+7DD68C)
alloc(lastCharState,128,"dmc2.exe"+2D3C70)
registersymbol(lastCharState)
lastCharState:
dd (byte)0
speedActive_lastcharstate:
dd (byte)0
isSprinting_lastcharstate:
dd (byte)0
sprintSpeed_lastcharstate:
dd (float)2.0
lastAction_lastcharstate:
dd (dword)0
actiondb_lastcharstate:
dd (byte)0
registersymbol(weaponmultalloc)
weaponmultalloc:
dd (float)1.4
merciless_weaponmultalloc:
dd (float)1.2
vendetta_weaponmultalloc:
dd (float)1.2
registersymbol(movemultalloc)
movemultalloc:
dd (float)1.0
sweepkick_movemultalloc:
dd (float)2.2
stinger_movemultalloc:
dd (float)1.6
fireworks_movemultalloc:
dd (float)1.5
shotgunflip_movemultalloc:
dd (float)1.5
shotgunsweep_movemultalloc:
dd (float)1.8
rocketlauncher_movemultalloc:
dd (float)1.4
mscharge_movemultalloc:
dd (float)1.6
gravedigger_movemultalloc:
dd (float)1.6
gravediggerkick_movemultalloc:
dd (float)1.6
overhead_movemultalloc:
dd (float)1.6
smashything1_movemultalloc:
dd (float)1.6
smashything2_movemultalloc:
dd (float)2.0
dtsplitter_movemultalloc:
dd (float)2.0
dttoggle_movemultalloc:
dd (float)2.0
airshotgun_movemultalloc:
dd (float)1.5
registersymbol(speedmultalloc)
speedmultalloc:
dd (float)1.0
dtspeedmultalloc:
dd (float)1.2
sdtspeedmultalloc:
dd (float)1.2

registersymbol(dtMul)
dtMul:
dd (float)6.0

newmem:
cmp [rcx+08],1
je dantespeed
jmp originalcode

dantespeed:
//oh no
//cmp [jankCancelSaveInertia],1
//jne jankCancelSpeed
//move-specific speed mods
cmp byte ptr [dmc2.exe+158A71C],0x0000025
je danteFireworks
cmp byte ptr [dmc2.exe+158A71C],0x0000024
je danteShotgunFlip
cmp byte ptr [dmc2.exe+158A71C],0x0000314
je danteStinger
cmp byte ptr [dmc2.exe+158A71C],0x0000126
je danteShotgunSweep
cmp byte ptr [dmc2.exe+158A71C],0x000021E
je danteSweepKick
cmp dword ptr [dmc2.exe+158A71c],0x000030A
je danteRocketLauncher
cmp dword ptr [dmc2.exe+158A71c],0x0000109
je danteMSCharge
cmp dword ptr [dmc2.exe+158A71C],0x0010109
je weaponCheck
cmp dword ptr [dmc2.exe+158A71C],0x000010E
je danteGravedigger
cmp dword ptr [dmc2.exe+158A71C],0x000010F
je danteGravediggerKick
cmp dword ptr [dmc2.exe+158A71C],0x0000106
je danteOverhead
cmp dword ptr [dmc2.exe+158A71C],0x0000110
je danteSmashyThing1
cmp dword ptr [dmc2.exe+158A71C],0x0000111
je danteSmashyThing2
cmp dword ptr [dmc2.exe+158A71C],0x000011C
je danteDTSplitter
cmp dword ptr [dmc2.exe+158A71C],0x000011D
je danteDTSplitter
cmp dword ptr [dmc2.exe+158A71C],0x0000208
je danteAirShotgun
cmp dword ptr [dmc2.exe+158A71C],0x0000314
je danteStingerLunge
cmp dword ptr [dmc2.exe+158A71C],0x000010A
je danteRPG
cmp dword ptr [dmc2.exe+158A71C],0x000030A
je danteRPG
cmp dword ptr [dmc2.exe+158A71C],0x000020A
je danteRPG
//cmp dword ptr [dmc2.exe+158A71C],0x0000105
//je danteSMGStart
cmp dword ptr [dmc2.exe+158A71C],0x0000205
je danteSMGStart
cmp dword ptr [dmc2.exe+158A71c],0x000021B
je danteSMGStart
cmp dword ptr [dmc2.exe+158A718],0x17001717
je SDTActivation
//cmp dword ptr [dmc2.exe+158A718],0x18001818
//je SDTActivation
cmp dword ptr [dmc2.exe+158A718],0x16001616
je luciaDTButtonOK
cmp dword ptr [dmc2.exe+158A718],0x15001515
je luciaDTButtonOK
//DT speed mods
cmp byte ptr [dmc2.exe+158A848],1
je dantedt
cmp byte ptr [dmc2.exe+158A848],2
je dantesdt
//Base speed mod
mulss xmm0,[speedmultalloc]
jmp weaponCheck

danteStingerLunge:
mulss xmm0,[merciless_weaponmultalloc]
jmp originalcode

danteRPG:
mov [jankCancelTimer],0x1F
mov [allowJankCancel],1
jmp weaponCheck

SDTActivation:
mulss xmm0,[dtMul]
jmp originalcode

danteSMGStart:
mulss xmm0,[airshotgun_movemultalloc]
jmp originalcode

danteAirShotgun:
mulss xmm0,[airshotgun_movemultalloc]
jmp originalcode

luciaDTActivation:
cmp byte ptr [lastCharState], 0
je luciaDTCheckAir
cmp byte ptr [speedActive_lastcharstate], 1
je luciaDTCheckAir
cmp byte ptr [lastCharState], 0
jge luciaDTEnemyFuckery
jmp originalcode

luciaDTEnemyFuckery:
cmp dword ptr [dmc2.exe+158A71c], 0x0000001
je fixthisalready
jmp originalcode

fixthisalready:
cmp dword ptr [dmc2.exe+158A71c], 0x0000000
jne luciaDTCheckButton
jmp originalcode

luciaDTCheckButton:
cmp dword ptr [InputPressed02],0x000000C0
je originalcode
cmp dword ptr [InputPressed02],0x00000040
je originalcode
cmp dword ptr [InputPressed02],0x00000060
je originalcode
cmp dword ptr [InputPressed02],0x00000050
je originalcode
cmp dword ptr [InputPressed02],0x00000048
je originalcode
cmp dword ptr [InputPressed02],0x00000041
je originalcode
cmp dword ptr [InputPressed02],0x00000042
je originalcode
cmp dword ptr [InputPressed02],0x00000044
je originalcode
jmp luciaDTCheckAir

luciaDTCheckAir:
cmp byte ptr [dmc2.exe+158A870], 0
jne luciaDTButtonOK
cmp byte ptr [dmc2.exe+158A714], 2
je luciaDTButtonOK
cmp byte ptr [dmc2.exe+158A871], 0
jne luciaDTButtonOK
jmp originalcode

luciaDTButtonOK:
mov [speedActive_lastcharstate], 1
mulss xmm0,[dttoggle_movemultalloc]
jmp originalcode

danteDTSplitter:
mulss xmm0,[dtsplitter_movemultalloc]
jmp weaponCheck

danteSmashyThing2:
mulss xmm0,[smashything2_movemultalloc]
jmp weaponCheck

danteSmashyThing1:
mulss xmm0,[smashything1_movemultalloc]
jmp weaponCheck

danteOverhead:
mulss xmm0,[overhead_movemultalloc]
jmp weaponCheck

danteGravediggerKick:
mulss xmm0,[gravediggerkick_movemultalloc]
jmp weaponCheck

danteGravedigger:
mulss xmm0,[gravedigger_movemultalloc]
jmp weaponCheck

danteMSCharge:
mulss xmm0,[mscharge_movemultalloc]
jmp weaponCheck

danteRocketLauncher:
mulss xmm0,[rocketlauncher_movemultalloc]
jmp weaponCheck

danteSweepKick:
mulss xmm0,[sweepkick_movemultalloc]
jmp weaponCheck

danteShotgunSweep:
mulss xmm0,[shotgunsweep_movemultalloc]
jmp weaponCheck

danteStinger:
mulss xmm0,[stinger_movemultalloc]
jmp weaponCheck

danteShotgunFlip:
mulss xmm0,[shotgunflip_movemultalloc]
jmp weaponCheck

danteFireworks:
mulss xmm0,[fireworks_movemultalloc]
jmp weaponCheck

dantedt:
mulss xmm0,[dtspeedmultalloc]
cmp dword ptr [dmc2.exe+158A718],0x19001919
je luciaDTCheckAir
cmp dword ptr [dmc2.exe+158A718],0x15001515
je luciaDTCheckAir
mov [speedActive_lastcharstate],0
jmp weaponCheck
dantesdt:
mulss xmm0,[sdtspeedmultalloc]
jmp weaponCheck

weaponCheck:
//Sprint by holding RightThumbstick
cmp dword ptr [dmc2.exe+158A71C],0x00000001
je playerSprint
cmp byte ptr [CurrentSword],00
je rebellionSpeed
//Merciless
cmp byte ptr [CurrentSword],01
je mercilessSpeed
//Vendetta
cmp byte ptr [CurrentSword],02
je vendettaSpeed

playerSprint:
cmp dword ptr [InputPressed02],0x00000400
je executePlayerSprint
jmp originalcode

executePlayerSprint:
mulss xmm0,[sprintSpeed_lastcharstate]
jmp originalcode

rebellionSpeed:
mulss xmm0,[weaponmultalloc]
jmp originalcode

mercilessSpeed:
mulss xmm0,[merciless_weaponmultalloc]
jmp originalcode

vendettaSpeed:
mulss xmm0,[vendetta_weaponmultalloc]
jmp originalcode

originalcode:
push ecx
mov ecx, [lastCharState]
mov [actiondb_lastcharstate], ecx
mov ecx, [dmc2.exe+158A848]
mov [lastCharState], ecx
mov ecx, [dmc2.exe+158A71C]
mov [lastAction_lastcharstate], ecx
pop ecx
movss [rcx+00000094],xmm0
jmp returnhere

exit:
jmp returnhere

"dmc2.exe"+2D3C70:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
dealloc(newmem)
"dmc2.exe"+2D3C70:
movss [rcx+00000094],xmm0
//Alt: db F3 0F 11 81 94 00 00 00

dealloc(movemultalloc)
dealloc(speedmultalloc)
dealloc(weaponmultalloc)
dealloc(lastCharState)
unregistersymbol(lastCharState)
unregistersymbol(weaponmultalloc)
unregistersymbol(movemultalloc)
unregistersymbol(speedmultalloc)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1404</ID>
                  <Description>"No description"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Byte</VariableType>
                  <Address>lastcharstate+14</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1405</ID>
                  <Description>"No description"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Byte</VariableType>
                  <Address>lastcharstate+4</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1406</ID>
                  <Description>"Speed Mult"</Description>
                  <VariableType>Float</VariableType>
                  <Address>speedmultalloc</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1407</ID>
                  <Description>"DT Speed Mult"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>speedmultalloc+4</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1408</ID>
                  <Description>"SDT Speed Mult"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>speedmultalloc+8</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1409</ID>
                  <Description>"Move Speed Adjustments"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1410</ID>
                      <Description>"Sweep Kick"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+4</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1411</ID>
                      <Description>"Stinger"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+8</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1412</ID>
                      <Description>"Fireworks"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+C</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1413</ID>
                      <Description>"Shotgun Cartwheel"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+10</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1414</ID>
                      <Description>"Shotgun Sweep"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+14</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1415</ID>
                      <Description>"Rocket Launcher Shoot"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+18</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1416</ID>
                      <Description>"Million Stabs Charge"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+1C</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1417</ID>
                      <Description>"Gravedigger Slam"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+20</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1418</ID>
                      <Description>"Gravedigger Double Kick"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+24</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1419</ID>
                      <Description>"DT Combo Overtop"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+28</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1420</ID>
                      <Description>"Weird Smashy Thing Part 1"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+2C</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1421</ID>
                      <Description>"Weird Smashy Thing Part 2"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+30</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1422</ID>
                      <Description>"Helm Splitter Startup"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+34</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1423</ID>
                      <Description>"Air Raid Activation"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+38</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1424</ID>
                      <Description>"Air Shotgun"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+3C</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>1425</ID>
                  <Description>"Weapon-Specific Modifiers"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1426</ID>
                      <Description>"Rebellion Speed Modifier"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>weaponmultalloc</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1427</ID>
                      <Description>"Merciless Speed Modifier"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>weaponmultalloc+4</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1428</ID>
                      <Description>"Vendetta Speed Modifier"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>weaponmultalloc+8</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1429</ID>
          <Description>"Settings"</Description>
          <Options moHideChildren="1" moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>1430</ID>
              <Description>"Disable DT Cooldown (See values dropdown)"</Description>
              <DropDownList>30:Safe Disable
0:Aggressive Disable
</DropDownList>
              <VariableType>2 Bytes</VariableType>
              <Address>dmc2.exe+158A85E</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1431</ID>
              <Description>"DT Gain Multiplier"</Description>
              <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+588E0)
alloc(dtmultalloc,64)
label(returnhere)
label(originalcode)
label(exit)
registersymbol(dtmultalloc)
dtmultalloc:
dd (float)0.8

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push eax //prepare eax
xor eax,eax //clear eax
mov ax, r9w //move build dt to eax register
cvtsi2ss xmm0,eax //convert to float
mulss xmm0, [dtmultalloc] //multiply by dt multiplier specified in table
cvttss2si eax,xmm0 //convert back to int
//imul r9w,[dtmultalloc]
mov r9w, ax
add cx,r9w
pop eax
cmp cx,ax

originalcode:
add cx,r9w
cmp cx,ax

exit:
jmp returnhere

"dmc2.exe"+588E0:
jmp newmem
nop 2
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(dtmultalloc)
unregistersymbol(dtmultalloc)
"dmc2.exe"+588e0:
add cx,r9w
cmp cx,ax
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1432</ID>
                  <Description>"DT Gain Multiplier Value"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>dtmultalloc</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1433</ID>
              <Description>"DMC1 Style Loss System"</Description>
              <Options moHideChildren="1"/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//Reworks aspects of the Style system to match DMC3/4/5's system.
alloc(newmem,2048,"dmc2.exe"+5A4CF)
alloc(newmem02,2048,"dmc2.exe"+23206E)
alloc(stylelosshandler,2048,"dmc2.exe"+23DF64)
//
label(returnhere)
label(hitlossdone)
label(originalcode)
label(exit)
label(decaycomp)
label(removeStyleRating)
label(styletest)
label(setStyleRatingToA)
label(setStyleRatingToB)
label(setStyleRatingToC)
label(setStyleRatingToD)
label(resetStyleDecayTimer)
//
alloc(stylelosstimer,64)
alloc(xmholder,64)
alloc(onhitstylelossscalar,64)
alloc(styleptstoloseondecay,64)
//
registersymbol(stylelosstimer)
registersymbol(onhitstylelossscalar)
registersymbol(styleptstoloseondecay)
//
stylelosstimer:
dd (float)110
xmholder:
dd (float)0
onhitstylelossscalar:
dd (float)10.0 //default: lose half of your style points
//don't go below 1.0 or else you gain style for being hit

newmem: //Overrides the game's original starting timer for style decay.
//For some reason the game uses a float here.
movss [xmholder],xmm0
movss xmm0,[stylelosstimer]
movss [r8+00000634],xmm0
movss xmm0,[xmholder]
jmp exit
//
//
newmem02: //On-Hit Style Loss overrides
push eax
xor eax,eax
mov eax, ["dmc2.exe"+158A968] //places player's style points in eax
cvtsi2ss xmm0, eax
divss xmm0, [onhitstylelossscalar] //Divides style points by scalar specified in CT
cvttss2si eax,xmm0
cmp eax, 5DC
jle hlpRemoveStyle
mov ["dmc2.exe"+158A968], eax
pop eax
//Reset style decay timer to what's specified in CT
movss [xmholder],xmm0
movss xmm0,[stylelosstimer]
movss [dmc2.exe+158A964],xmm0
movss xmm0,[xmholder]
jmp hitlossdone
//
//
stylelosshandler: //Custom behavior when the style loss timer runs out
//Remove all style pts if timer expires
//mov [styleptstoloseondecay], 20000
//Completely drop combo on time depletion
jmp removeStyleRating
//done
jmp decaycomp
//
//
resetStyleDecayTimer:
movss [xmholder],xmm0
movss xmm0,[stylelosstimer]
movss [dmc2.exe+158A964],xmm0
movss xmm0,[xmholder]
ret
//
//
hlpRemoveStyle:
pop eax
mov ["dmc2.exe"+158A968], 0
jmp hitlossdone
//
//
removeStyleRating: //helper function to reset player's style using vanilla call
mov [dmc2.exe+158A968], 0
jmp decaycomp
//
//
setStyleRatingToA: //S returns to A rank
pop eax
mov [styleptstoloseondecay], 10F2C
mov dword [dmc2.exe+158A968], 3A98
movss [xmholder],xmm0
movss xmm0,[stylelosstimer]
movss [dmc2.exe+158A964],xmm0
movss xmm0,[xmholder]
jmp decaycomp
//
//
setStyleRatingToB: //S returns to A rank
pop eax
mov [styleptstoloseondecay], 4
mov dword [dmc2.exe+158A968], 2710
movss [xmholder],xmm0
movss xmm0,[stylelosstimer]
movss [dmc2.exe+158A964],xmm0
movss xmm0,[xmholder]
jmp decaycomp
//
//
setStyleRatingToC: //S returns to A rank
pop eax
mov [styleptstoloseondecay], 3
mov dword [dmc2.exe+158A968], 1388
movss [xmholder],xmm0
movss xmm0,[stylelosstimer]
movss [dmc2.exe+158A964],xmm0
movss xmm0,[xmholder]
jmp decaycomp
//
//
setStyleRatingToD: //S returns to A rank
pop eax
mov [styleptstoloseondecay], 2
mov dword [dmc2.exe+158A968], 5DC
movss [xmholder],xmm0
movss xmm0,[stylelosstimer]
movss [dmc2.exe+158A964],xmm0
movss xmm0,[xmholder]
jmp decaycomp
//
//
styletest:
mov [rbx+00000638],esi
//
//
originalcode: //original timer code
mov [r8+00000634],42DC0000 //default timer value is 110.0
//
//
exit:
jmp returnhere
//
//
"dmc2.exe"+5A4CF: //style point timer
jmp newmem
nop 6
returnhere:
//
//
"dmc2.exe"+23206E: //on-hit style loss
jmp newmem02
nop 5
hitlossdone:
//
//
"dmc2.exe"+23DF64: //called when style point timer empties
//mov [rbx+00000638],esi
jmp stylelosshandler
nop
decaycomp:
//
//
[DISABLE]
dealloc(newmem)
dealloc(newmem02)
dealloc(stylelosshandler)
dealloc(stylelosstimer)
dealloc(xmholder)
dealloc(onhitstylelossscalar)
dealloc(styleptstoloseondecay)
unregistersymbol(stylelosstimer)
unregistersymbol(onhitstylelossscalar)
unregistersymbol(styleptstoloseondecay)
"dmc2.exe"+5a4cf:
mov [r8+00000634],42DC0000
"dmc2.exe"+23206E:
mov [rbx+00000634],3A83126F
"dmc2.exe"+23DF64:
mov [rbx+00000638],esi
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1434</ID>
                  <Description>"Time Before a Style Rank Is Lost"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>stylelosstimer</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1435</ID>
                  <Description>"Divide Style Points by (value) When Hit"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>onhitstylelossscalar</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1436</ID>
                  <Description>"DEBUG: Last style rank when timer hit 0"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>2 Bytes</VariableType>
                  <Address>styleptstoloseondecay</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1437</ID>
                  <Description>"DEBUG: Time Remaining in Combo"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>dmc2.exe+158A964</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1438</ID>
                  <Description>"DEBUG: Style Pts HUD Time"</Description>
                  <VariableType>2 Bytes</VariableType>
                  <Address>dmc2.exe+158A966</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1439</ID>
              <Description>"Style Point Gain Multiplier"</Description>
              <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+5A4BC)
label(returnhere)
label(originalcode)
label(exit)
alloc(styleptsscalar,64)
registersymbol(styleptsscalar)
styleptsscalar:
dd (float)4.0

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
mulss xmm1,[styleptsscalar]
cvttss2si eax,xmm1
test r10d,r10d

exit:
jmp returnhere

"dmc2.exe"+5A4BC:
jmp newmem
nop 2
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(styleptsscalar)
"dmc2.exe"+5a4bc:
cvttss2si eax,xmm1
test r10d,r10d
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1440</ID>
                  <Description>"Style Points Gain Multiplier Value"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>styleptsscalar</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1441</ID>
              <Description>"Loadout Hotswapper - Use D-Pad and Right Trigger"</Description>
              <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>//Thank you Siyan!
[ENABLE]
aobscanmodule(styleswitchinglol,dmc2.exe,C0 48 89 41 08 48 89 41 10) // should be unique
alloc(newmem,$1000,"dmc2.exe"+19372)
alloc(lastUsedInput,64)
alloc(regAfterBitmask,64)
alloc(allowDodgeOffset,64)
alloc(dodgeOffsetContinueOK,64)
alloc(useInstantSDT,64)
alloc(setSwordRotBind,64)
define(CurrentCharacter,dmc2.exe+1588B31)
label(rotateSword)
label(returnhere)
label(finished)
label(testForHold)
label(amuletTestForHold)
label(checkAmuletToRotate)
label(rotateLeftAmulet)
label(rotateRightAmulet)
label(rotateTopAmulet)
label(setRightAmuletToQuick)
label(setLeftAmuletToHealing)
label(setLeftAmuletToOffence)
label(setTopAmuletToFrost)
label(setTopAmuletToElectro)
label(cycleToMerciless)
label(cycleToVendetta)
label(cycleToRebellion)
label(L3SwordRotation)
define(inputpressed,dmc2.exe+7DD68D)
define(CurrentSword,dmc2.exe+158A80F)
registersymbol(inputpressed)
registersymbol(lastUsedInput)
registersymbol(regAfterBitmask)
registersymbol(allowDodgeOffset)
registersymbol(dodgeOffsetContinueOK)
registersymbol(useInstantSDT)
registersymbol(setSwordRotBind)
useInstantSDT:
dw (int)0

const_useInstantSDT:
dd (float)1.2

restore_useInstantSDT:
db (int)0

allowDodgeOffset:
db (int)0

lastUsedInput:
dw (int)0

setSwordRotBind:
db (int)0

//Check to see if current button input is Right Trigger (Disable Lock-on)
newmem:
//check if an SDT cancel was done last cycle
cmp [restore_useInstantSDT],1
je restoreDT
//Re-do the bitmask for checking D-Pad inputs
push eax
mov eax, [inputpressed]
and eax, 0xFFFFFFF0
mov [regAfterBitmask], eax
pop eax
cmp byte [regAfterBitmask],0x80
je amuletTestForHold
cmp byte [regAfterBitmask],0x10
je amuletTestForHold
cmp byte [regAfterBitmask],0x20
je amuletTestForHold
cmp byte [regAfterBitmask],0x40
je sdtTestForHold
//dodge offset needs raw value
push eax
mov eax, [inputpressed-1]
and eax, 0x000000FF
mov [regAfterBitmask], eax
pop eax
//Dodge Inputs
cmp byte [regAfterBitmask],0x20
je testForCharacter
cmp byte [regAfterBitmask],0x28
je testForCharacter
//Dodge Offset Inputs (Attack + Dodge [LOCK-ON OK])
cmp byte [regAfterBitmask],0x30
je testForCharacter
cmp byte [regAfterBitmask],0x38
je testForCharacter
//jank cancel inputs
cmp byte [regAfterBitmask],0x40
je testDupeInputsJC
cmp byte [regAfterBitmask],0x48
je testDupeInputsJC
cmp byte [regAfterBitmask],0x50
je testDupeInputsJC
cmp byte [regAfterBitmask],0x58
je testDupeInputsJC
//L3 Weapon Swap Rebind
cmp byte [setSwordRotBind],0x1
je L3SwordRotation
//Placing original bind functionality afterwards lets us skip checking RT
//Apply a bitmask to the currently held inputs to get only the first value
push eax
mov eax, [inputpressed-1]
and eax, 0x0000000F
mov [regAfterBitmask], eax
pop eax
//Jump if any combination of the triggers/bumpers also includes RT
cmp byte [regAfterBitmask],02
je testForHold
cmp byte [regAfterBitmask],06
je testForHold
cmp byte [regAfterBitmask],0x0A
je testForHold
cmp byte [regAfterBitmask],0x0F
je testForHold
cmp byte [regAfterBitmask],0x0E
je testForHold
cmp byte [regAfterBitmask],03
je testForHold
cmp byte [regAfterBitmask],07
je testForHold
jmp returnhere

L3SwordRotation:
//Apply a bitmask to the currently held inputs to get only the first value
push eax
mov eax, [inputpressed-1]
and eax, 0x00000F00
mov [regAfterBitmask], eax
pop eax
cmp [regAfterBitmask],0x200
je testForHold
jmp returnhere

//Duplicate code from sword switcher
amuletTestForHold:
push eax
mov eax, [lastUsedInput+1]
and eax, 0xFFFFFFF0
mov [regAfterBitmask], eax
pop eax
//check for duplicate d-pad inputs
cmp [regAfterBitmask],0x80
je returnhere
cmp [regAfterBitmask],0x10
je returnhere
cmp [regAfterBitmask],0x20
je returnhere
cmp [regAfterBitmask],0x40
je returnhere
jmp checkAmuletToRotate

checkAmuletToRotate:
//This is awful. Clean it up later?
//Re-do the bitmask for checking D-Pad inputs
push eax
mov eax, [inputpressed]
and eax, 0xFFFFFFF0
mov [regAfterBitmask], eax
pop eax
cmp byte [regAfterBitmask],0x80
je rotateLeftAmulet
cmp byte [regAfterBitmask],0x10
je rotateTopAmulet
cmp byte [regAfterBitmask],0x20
je rotateRightAmulet
jmp returnhere

//Rotates right amulet between Quick and Aerial hearts.
//Aqua Heart is ignored for obvious reasons.
rotateRightAmulet:
cmp byte ptr [dmc2.exe+158A849], 2
je setRightAmuletToQuick
mov byte ptr [dmc2.exe+158A849], 2
jmp returnhere

setRightAmuletToQuick:
mov byte ptr [dmc2.exe+158A849], 3
jmp returnhere

//Rotates left amulet between Chrono/Healing/Offence.
//Maybe add option to ignore Healing Heart?
rotateLeftAmulet:
cmp byte ptr [dmc2.exe+158A84B], 1
je setLeftAmuletToHealing
cmp byte ptr [dmc2.exe+158A84B], 2
je setLeftAmuletToOffence
mov byte ptr [dmc2.exe+158A84B], 1
jmp returnhere

setLeftAmuletToHealing:
mov byte ptr [dmc2.exe+158A84B], 2
jmp returnhere

setLeftAmuletToOffence:
mov byte ptr [dmc2.exe+158A84B], 3
jmp returnhere

//Rotates top amulet between Flame/Frost/Electro.
rotateTopAmulet:
cmp byte ptr [dmc2.exe+158A84A], 1
je setTopAmuletToFrost
cmp byte ptr [dmc2.exe+158A84A], 2
je setTopAmuletToElectro
mov byte ptr [dmc2.exe+158A84A], 1
jmp returnhere

setTopAmuletToFrost:
mov byte ptr [dmc2.exe+158A84A], 2
jmp returnhere

setTopAmuletToElectro:
mov byte ptr [dmc2.exe+158A84A], 3
jmp returnhere

//Blocks swords rotating by holding button
testForHold:
//Apply a bitmask to the currently held inputs to get only the first value
push eax
mov eax, [lastUsedInput]
and eax, 0x0000000F
mov [regAfterBitmask], eax
pop eax
//messy shit
//Check for duplicate RT inputs
cmp [regAfterBitmask],0x0F
je returnhere
cmp [regAfterBitmask],06
je returnhere
cmp [regAfterBitmask],0x0A
je returnhere
cmp [regAfterBitmask],0x0E
je returnhere
cmp [regAfterBitmask],03
je returnhere
cmp [regAfterBitmask],02
je returnhere
cmp [regAfterBitmask],07
je returnhere
push eax
mov eax, [lastUsedInput]
and eax, 0x00000F00
mov [regAfterBitmask], eax
pop eax
cmp [regAfterBitmask],0x200
je returnhere
//If no duped inputs, rotate sword
jmp rotateSword

//Rotates sword to next value
rotateSword:
//Ignore this section if playing as Trish
//This avoids a crash if you try to swap her sword
cmp byte ptr [CurrentCharacter], 0x02
je returnhere
//Swap Swords
cmp byte ptr [CurrentSword],00
je cycleToMerciless
cmp byte ptr [CurrentSword],01
je cycleToVendetta
cmp byte ptr [CurrentSword],02
je cycleToRebellion
jmp returnhere

cycleToMerciless:
mov byte ptr [CurrentSword],01
jmp returnhere

cycleToVendetta:
mov byte ptr [CurrentSword],02
jmp returnhere

cycleToRebellion:
mov byte ptr [CurrentSword],00
jmp returnhere

testForCharacter:
//check if dodge offset is enabled
cmp [allowDodgeOffset], 1
jne returnhere
//check if current character is Lucia, otherwise end
//cmp [dmc2.exe+1588B30],0100
//je testForHold_DodgeOffset
//cmp [dmc2.exe+1588B30],0501
//je testForHold_DodgeOffset
//cmp [dmc2.exe+1588B30],0301
//je testForHold_DodgeOffset
//cmp [dmc2.exe+1588B30],0701
//je testForHold_DodgeOffset
jmp testForHold_DodgeOffset

testForHold_DodgeOffset:
//Apply a bitmask to the currently held inputs to get only the first value
push eax
mov eax, [lastUsedInput]
and eax, 0x0000000F
mov [regAfterBitmask], eax
pop eax
//messy shit
//Check for duplicate inputs
//Dodge Offset Input (Attack + Dodge)
cmp byte [regAfterBitmask],0x20
je returnhere
//Free Dodge
cmp byte [regAfterBitmask],0x28
je returnhere
cmp byte [regAfterBitmask],0x30
je returnhere
cmp byte [regAfterBitmask],0x38
je returnhere
jmp tryFreeDodge

tryFreeDodge:
//god i hope the last action ID is updated by now
//lol of course it isnt
//disable dodge offset when in DT
cmp byte ptr [dmc2.exe+158A848],0x1
je returnhere
jmp executeFreeDodge

executeFreeDodge:
mov [dodgeOffsetContinueOK], 0
mov [dmc2.exe+158A714],0x0
//dodge offset needs raw value
push ebx
mov ebx, [inputpressed-1]
and ebx, 0x000000FF
mov [regAfterBitmask], ebx
pop ebx
//Dodge Offset Input (Attack + Dodge)
cmp byte [regAfterBitmask],0x30
je executeDodgeOffset
cmp byte [regAfterBitmask],0x38
je executeDodgeOffset
jmp returnhere

executeDodgeOffset:
mov [dodgeOffsetContinueOK], 0x1
jmp returnhere

testDupeInputsJC:
//Apply a bitmask to the currently held inputs to get only the first value
push eax
mov eax, [lastUsedInput]
and eax, 0x0000000F
mov [regAfterBitmask], eax
pop eax
//messy shit
//Check for duplicate inputs
//JC Input is just jump
cmp byte [regAfterBitmask],0x40
je returnhere
//Free Dodge
cmp byte [regAfterBitmask],0x48
je returnhere
cmp byte [regAfterBitmask],0x49
je returnhere
//cmp byte [regAfterBitmask],0x50
//je returnhere
//cmp byte [regAfterBitmask],0x58
//je returnhere
jmp tryJankCancel

tryJankCancel:
//disable jank cancel when in DT
//might not need this since there's always an action tied to jump
cmp [allowJankCancel],1
jne returnhere
//Disable JCs in DT/SDT because fuck
cmp byte ptr [dmc2.exe+158A848],0x0
jne returnhere
jmp executeJankCancel

executeJankCancel:
//cmp byte ptr [dmc2.exe+158A354],1
//jne returnhere
mov [dmc2.exe+158A872],1
//mov [dmc2.exe+158A3C4],999.0
mov [dmc2.exe+158A714],0x2
mov [jankCancelSaveInertia],1
mov [jankCancelTimer],0
mov [allowJankCancel],0
jmp returnhere

returnhere:
  push eax
  mov eax, [inputpressed-1]
  mov [lastUsedInput], eax
  pop eax
  mov [rcx+08],rax
  mov [rcx+10],rax
  //decrement the jank cancel timer by 1
  jmp jankCancelTimerHandler
  //jmp finished

jankCancelTimerHandler:
cmp [jankCancelTimer],0
jg decrementJCTimer
cmp byte ptr [dmc2.exe+158A872],2
je removeJCJump
mov [allowJankCancel],0
mov [jankCancelTimer],0
jmp finished

removeJCJump:
mov byte ptr [dmc2.exe+158A872],0
mov [allowJankCancel],0
mov [jankCancelTimer],0
jmp finished

decrementJCTimer:
sub [jankCancelTimer],1
jmp finished

//Duplicate code from sword switcher
sdtTestForHold:
push eax
mov eax, [lastUsedInput+1]
and eax, 0xFFFFFFF0
mov [regAfterBitmask], eax
pop eax
//check for duplicate d-pad inputs
cmp [regAfterBitmask],0x40
je returnhere
jmp tryInstantSDT

tryInstantSDT:
cmp byte ptr [dmc2.exe+158A848],2
je executeSDTCancel
jmp returnhere

executeSDT:
mov [useInstantSDT],1
call dmc2.exe+230FB0
jmp returnhere

executeSDTCancel:
push eax
mov eax, [dmc2.exe+158A84E]
mov [dmc2.exe+158A84E],0
//slightly boost DT when cancelling SDT to mimic 5's Quadruple S
//cvtsi2ss xmm0,eax
//mulss xmm0,[const_useInstantSDT]
//cvttss2si eax,xmm0
cmp eax,0x12C0
jge quadSPrep
mov [useInstantSDT],eax
mov [restore_useInstantSDT],1
//mov [dmc2.exe+158A84E],eax
pop eax
jmp returnhere

quadSPrep:
mov [useInstantSDT],0x17A0
mov [restore_useInstantSDT],1
pop eax
jmp returnhere

restoreDT:
mov [restore_useInstantSDT],0
push eax
mov eax, [useInstantSDT]
mov [dmc2.exe+158A84E],eax
pop eax
//mov [useInstantSDT],0
jmp newmem

styleswitchinglol+01:
jmp newmem
nop
nop
nop
finished:
registersymbol(styleswitchinglol)

[DISABLE]
dealloc(newmem)
dealloc(lastUsedInput)
dealloc(regAfterBitmask)
dealloc(allowDodgeOffset)
dealloc(dodgeOffsetMoveID)
dealloc(setSwordRotBind)
unregistersymbol(lastUsedInput)
unregistersymbol(styleswitchinglol)
unregistersymbol(regAfterBitmask)
unregistersymbol(allowDodgeOffset)
unregistersymbol(dodgeOffsetContinueOK)
unregistersymbol(inputpressed)
unregistersymbol(setSwordRotBind)
styleswitchinglol+01:
  db 48 89 41 08 48 89 41 10

{
// ORIGINAL CODE - INJECTION POINT: "dmc2.exe"+19372

"dmc2.exe"+19367: CC                    -  int 3
"dmc2.exe"+19368: CC                    -  int 3
"dmc2.exe"+19369: CC                    -  int 3
"dmc2.exe"+1936A: CC                    -  int 3
"dmc2.exe"+1936B: CC                    -  int 3
"dmc2.exe"+1936C: CC                    -  int 3
"dmc2.exe"+1936D: CC                    -  int 3
"dmc2.exe"+1936E: CC                    -  int 3
"dmc2.exe"+1936F: CC                    -  int 3
"dmc2.exe"+19370: 33 C0                 -  xor eax,eax
// ---------- INJECTING HERE ----------
"dmc2.exe"+19372: 48 89 41 08           -  mov [rcx+08],rax
"dmc2.exe"+19376: 48 89 41 10           -  mov [rcx+10],rax
// ---------- DONE INJECTING  ----------
"dmc2.exe"+1937A: 48 89 41 18           -  mov [rcx+18],rax
"dmc2.exe"+1937E: 48 89 41 20           -  mov [rcx+20],rax
"dmc2.exe"+19382: 48 89 41 28           -  mov [rcx+28],rax
"dmc2.exe"+19386: 48 89 41 30           -  mov [rcx+30],rax
"dmc2.exe"+1938A: C3                    -  ret
"dmc2.exe"+1938B: CC                    -  int 3
"dmc2.exe"+1938C: CC                    -  int 3
"dmc2.exe"+1938D: CC                    -  int 3
"dmc2.exe"+1938E: CC                    -  int 3
"dmc2.exe"+1938F: CC                    -  int 3
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1442</ID>
                  <Description>"DMC1 Dante - Unique Sword Movesets"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"dmc2.exe"+23D547)
label(returnhere)
label(originalcode)
label(exit)
label(rebellionMoveSwaps)
label(mercilessMoveSwaps)
label(vendettaMoveSwaps)
alloc(moveswapalloc,8)
alloc(previousMoveID,64)
define(CurrentSword,dmc2.exe+158A80F)
registersymbol(previousMoveID)
registersymbol(moveswapalloc)
moveswapalloc:
db 0

newmem:
//Before we do any move swaps, check to see what sword
//is currently equipped so we can declone the swords.
//Rebellion
//update previous move id before it can get changed
//comically stupid workaround for guns getting swapped
push eax
mov eax, [inputpressed-1]
and eax, 0x000000FF
mov [regAfterBitmask], eax
pop eax
cmp byte [regAfterBitmask],0x80
je originalcode
cmp byte [regAfterBitmask],0xC0
je originalcode
cmp byte [regAfterBitmask],0xA0
je originalcode
cmp byte [regAfterBitmask],0x88
je originalcode
push ebx
mov ebx, [moveswapalloc]
mov [previousMoveID], ebx
pop ebx
cmp byte ptr [CurrentSword],00
je rebellionMoveSwaps
//Merciless
cmp byte ptr [CurrentSword],01
je mercilessMoveSwaps
//Vendetta
cmp byte ptr [CurrentSword],02
je vendettaMoveSwaps
//just in case this SOMEHOW breaks
jmp originalcode
//

//Move Swaps Legend:
// ^: Tilt Input
// }: Shotgun String

//Rebellion is pretty good already. Nice blend of range and power.
//Let's give it easier access to some DT moves for DMC1 nostalgia.
//note: cmov doesn't support what we're doing so we need a label for each swap
rebellionMoveSwaps:
mov [moveswapalloc],eax
//1-2^3 --&gt; Million Stabs
cmp [moveswapalloc],0x0000000A
je rebellion_123ClassicMS
cmp [moveswapalloc],0x0000000B
je rebellion_123ClassicMS2
cmp [moveswapalloc],0x0000000C
je rebellion_123ClassicMS3
cmp [moveswapalloc],0x0000000D
je rebellion_123ClassicMS4
cmp [moveswapalloc],0x00000008
je rebellion_123QuickSidewinder
//Force Edge has custom finisher
cmp [moveswapalloc],0x00000010
je forceedge_123tilt
cmp [moveswapalloc],0x00000011
je forceedge_123tiltfinish
cmp [moveswapalloc],0x0000001A
je forceedge_alwaysSplitter
//always end with a jump to originalcode
jmp originalcode

forceedge_alwaysSplitter:
mov byte ptr [r10+000003EC],0x11D
jmp returnhere

forceedge_123tilt:
cmp [previousMoveID], 0x03
jne originalcode
mov byte ptr [r10+000003EC],0x2
jmp returnhere

forceedge_123tiltfinish:
//cmp [previousMoveID], 0x2
//jne originalcode
mov byte ptr [r10+000003EC],0x10
jmp returnhere

rebellion_123ClassicMS:
//For maximum compatibility, check and see if dante's current action
//corresponds with the actions that can lead into the one being replaced
cmp [previousMoveID], 0x02
jne originalcode
mov byte ptr [r10+000003EC],0x09
jmp returnhere

rebellion_123ClassicMS2:
cmp [previousMoveID], 0x0A
jne originalcode
mov byte ptr [r10+000003EC],0x05
jmp returnhere

rebellion_123ClassicMS3:
cmp [previousMoveID], 0x0B
jne originalcode
cmp byte ptr [dmc2.exe+158A848],0x01
je originalcode
mov byte ptr [r10+000003EC],0x05
jmp returnhere

rebellion_123ClassicMS4:
cmp [previousMoveID], 0x0C
jne originalcode
cmp byte ptr [dmc2.exe+158A848],0x01
je originalcode
mov byte ptr [r10+000003EC],0x11D
jmp returnhere

rebellion_123QuickSidewinder:
cmp [previousMoveID], 0x07
jne originalcode
mov byte ptr [r10+000003EC],0x0D
jmp returnhere

mercilessMoveSwaps:
mov [moveswapalloc],eax
//Round Trip -&gt; Air Combo
cmp [moveswapalloc],0x00000020
je merciless_roundtripAirCombo
cmp [moveswapalloc],0x00000021
je merciless_roundtripAirCombo2
//Gravedigger -&gt; Sidewinder
cmp [moveswapalloc],0x0000000E
je merciless_gravediggerSidewinder
cmp [moveswapalloc],0x00000004
je merciless_overhead
cmp [moveswapalloc],0x00000010
je merciless_smashything
cmp [moveswapalloc],0x00000009
je merciless_millionstabRoundTrip
cmp [moveswapalloc],0x00000001
je merciless_lowstarterSweep
jmp originalcode

merciless_roundtripAirCombo:
mov byte ptr [r10+000003EC],0x0C
jmp returnhere

merciless_roundtripAirCombo2:
mov byte ptr [r10+000003EC],0x0D
jmp returnhere

merciless_gravediggerSidewinder:
cmp [previousMoveID], 0x03
jne originalcode
cmp byte ptr [dmc2.exe+158A848],0x01
je originalcode
mov byte ptr [r10+000003EC],0x0D
jmp returnhere

merciless_overhead:
cmp byte ptr [dmc2.exe+158A848],0x01
jne merciless_overhead_noDT
mov byte ptr [r10+000003EC],0x06
jmp returnhere

merciless_overhead_noDT:
cmp [previousMoveID], 0x03
jne originalcode
mov byte ptr [r10+000003EC],0x10
jmp returnhere

merciless_smashything:
mov byte ptr [r10+000003EC],0x1E
jmp returnhere

merciless_millionstabRoundTrip:
mov byte ptr [r10+000003EC],0x20
jmp returnhere

merciless_lowstarterSweep:
mov byte ptr [r10+000003EC],0x1E
jmp returnhere

vendettaMoveSwaps:
mov [moveswapalloc],eax
cmp [moveswapalloc],0x00000010
je vendetta_123Gravedigger
cmp [moveswapalloc],0x00000011
je vendetta_123GravediggerExtension
cmp [moveswapalloc],0x00000007
je vendetta_123ToDT
cmp [moveswapalloc],0x00000008
je vendetta_123ToDTFinish
cmp [moveswapalloc],0x0000000A
je vendetta_12MillionStabs
cmp [moveswapalloc],0x00000004
je vendetta_1234ShoulderCheck
//cmp rax,0x0000001A
//mov [moveswapalloc],rax
//je vendetta_airrave1
//cmp rax,0x0000001B
//je vendetta_airrave2
cmp [moveswapalloc],0x0000001D
je vendetta_fullhouse
jmp originalcode

//bookmark

vendetta_fullhouse:
//mov word ptr[dmc2.exe+158A71C],538
mov byte ptr[r10+000003EC],0x11C
//mov dword ptr [dmc2.exe+158A354],50.0
//mov byte ptr [dmc2.exe+158A714],2
//mov byte ptr [dmc2.exe+158A86E],255
jmp returnhere

vendetta_airrave1:
mov byte [dmc2.exe+161BEFC],0x1
mov byte ptr[r10+000003EC],0x10F
mov dword ptr [dmc2.exe+158A370],15.0
jmp returnhere

vendetta_airrave2:
mov byte ptr[r10+000003EC],0x127
jmp returnhere

vendetta_123Gravedigger:
mov byte ptr [r10+000003EC],0x0E
jmp returnhere

vendetta_123GravediggerExtension:
mov byte ptr [r10+000003EC],0x0F
jmp returnhere

vendetta_123ToDT:
mov byte ptr [r10+000003EC],0x05
jmp returnhere

vendetta_123ToDTFinish:
cmp [previousMoveID], 0x07
jne originalcode
mov byte ptr [r10+000003EC],0x06
jmp returnhere

vendetta_12MillionStabs:
cmp [previousMoveID], 0x02
jne originalcode
mov byte ptr [r10+000003EC],0x09
jmp returnhere

vendetta_1234ShoulderCheck:
cmp [previousMoveID], 0x03
jne originalcode
mov byte ptr [r10+000003EC],0x1F
jmp returnhere

//the al register holds the ID of the original move being executed.
//by comparing it to a move ID, we can then intercept this call
//and insert a different move ID instead.

originalcode:
mov [r10+000003EC],al
jmp returnhere

exit:
jmp returnhere

"dmc2.exe"+23D547:
jmp newmem
nop
nop
returnhere:


[DISABLE]
dealloc(newmem)
"dmc2.exe"+23D547:
mov [r10+000003EC],al
//Alt: db 41 88 82 EC 03 00 00

dealloc(moveswapalloc)
dealloc(previousMoveID)
unregistersymbol(previousMoveID)
unregistersymbol(moveswapalloc)
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1443</ID>
                      <Description>"Show Debug Info"</Description>
                      <Options moHideChildren="1"/>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>1444</ID>
                          <Description>"Move ID"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>dmc2.exe+158A71c</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1445</ID>
                          <Description>"Move Swap Mem"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <VariableType>4 Bytes</VariableType>
                          <Address>moveswapalloc</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1446</ID>
                          <Description>"move swap alloc"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <VariableType>4 Bytes</VariableType>
                          <Address>moveswapalloc</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1447</ID>
                          <Description>"premoveid"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>previousMoveID</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>1448</ID>
                  <Description>"SDT Var"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>2 Bytes</VariableType>
                  <Address>useInstantSDT</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1628</ID>
                  <Description>"Weapon Switch Bind"</Description>
                  <DropDownList DisplayValueAsItem="1">0:Right Trigger
1:LS Click (L3)
</DropDownList>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Byte</VariableType>
                  <Address>setSwordRotBind</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1466</ID>
              <Description>"Stinger Distance"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+213CCB)
alloc(gunstinger,2048,"dmc2.exe"+2141F3)
alloc(gs2,2048,"dmc2.exe"+241C46)
alloc(gs3,2048,"dmc2.exe"+213EE9)
label(returnhere)
label(originalcode)
label(exit)
alloc(stingerDist,128,"dmc2.exe"+213CCB)
alloc(gunstingerFixer,128)
registersymbol(gunstingerFixer)
registersymbol(stingerDist)
stingerDist:
dd (float)2.1

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mulss xmm0,[stingerDist]
movss [gunstingerFixer],xmm0
jmp originalcode

gunstinger:
cmp [gunstingerFixer],0
je gunstingerOC
movss xmm0,[gunstingerFixer]
movss qword ptr [rbx+40], xmm0
jmp gunstingerRH

gunstingerOC:
mov qword ptr [rbx+40],4145B6AE
jmp gunstingerRH

gs2:
cmp [gunstingerFixer],0
je gs2oc
push eax
mov eax,[gunstingerFixer]
mov [r8+40], eax
pop eax
cmp [r8+00000518],dl
jmp gs2rh

gs2oc:
mov [r8+40],rdx
cmp [r8+00000518],dl
jmp gs2rh

gs3:
cmp [gunstingerFixer],0
je gs3oc
movss xmm0,[gunstingerFixer]
movss [rbx+40], xmm0
jmp gs3rh

gs3oc:
movss [rbx+40],xmm0
jmp gs3rh

originalcode:
movss [rbx+40],xmm0

exit:
jmp returnhere

"dmc2.exe"+213CCB:
jmp newmem
returnhere:

"dmc2.exe"+2141F3:
jmp gunstinger
nop 3
gunstingerRH:

"dmc2.exe"+241C46:
jmp gs2
nop 6
gs2rh:

"dmc2.exe"+213EE9:
jmp gs3
gs3rh:

[DISABLE]
dealloc(newmem)
dealloc(stingerDist)
dealloc(gunstinger)
dealloc(gunstingerFixer)
dealloc(gs2)
dealloc(gs3)
unregistersymbol(gunstingerFixer)
unregistersymbol(stingerDist)
"dmc2.exe"+213CCB:
movss [rbx+40],xmm0
"dmc2.exe"+2141F3:
mov qword ptr [rbx+40],4145B6AE
"dmc2.exe"+241C46:
mov [r8+40],rdx
cmp [r8+00000518],dl
"dmc2.exe"+213EE9:
movss [rbx+40],xmm0
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1467</ID>
                  <Description>"stinger lunge mult"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>stingerDist</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1468</ID>
              <Description>"Run Speed Modifier?"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+23A9BA)
label(returnhere)
label(originalcode)
label(exit)
alloc(runMult,128,"dmc2.exe"+23A9BA)
registersymbol(runMult)
runMult:
dd (float)1.5

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mulss xmm8,[runMult]
jmp originalcode

originalcode:
movss [rdi+40],xmm8

exit:
jmp returnhere

"dmc2.exe"+23A9BA:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(runMult)
unregistersymbol(runMult)
"dmc2.exe"+23A9BA:
movss [rdi+40],xmm8
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1469</ID>
                  <Description>"Running Speed Multiplier"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>runMult</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1470</ID>
              <Description>"SMGS Don't Change Gravity"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+219F5A)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
jmp returnhere

originalcode:
movss [rbx+24],xmm0

exit:
jmp returnhere

"dmc2.exe"+219F5A:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+219F5A:
movss [rbx+24],xmm0
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1471</ID>
              <Description>"SMGS Don't Push Up"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+219D9B)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
jmp returnhere

originalcode:
mov [rbx+24],41300000

exit:
jmp returnhere

"dmc2.exe"+219D9B:
jmp newmem
nop 2
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+219D9B:
mov [rbx+24],41300000
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1472</ID>
              <Description>"Gravity Mods"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+241AF4)
alloc(gravityChange,64)
label(returnhere)
label(originalcode)
label(exit)
registersymbol(gravityChange)
gravityChange:
dd (float)0.0
post_gravityChange:
dd (float)0.0
negation_gravityChange:
dd (float)-1.0
const_gravityChange:
dd (float)0.0
smgs_gravityChange:
dd (float)0.33
fullhouse_gravityChange:
dd (float)6.0

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
movss xmm3,[rdi+34]
movss [gravityChange],xmm3
//movss xmm4, [dmc2.exe+158A354]
//push eax
//cvttss2si eax, xmm4
//cmp eax,0
//pop eax
//jle fallSpeedFix
//divss xmm3,[dmc2.exe+158A3C4]
//divss xmm3,[dmc2.exe+158A3C4]
//mulss xmm2,xmm3
//mulss xmm2,[negation_gravityChange]
//movss [post_gravityChange],xmm2
cmp dword ptr [dmc2.exe+158A71C],0x0000205
je smgfix
cmp dword ptr [dmc2.exe+158A71C],0x0000204
je smgfix
cmp dword ptr [dmc2.exe+158A71C],0x000021B
je smgfix
cmp dword ptr [dmc2.exe+158A71C],0x000011C
je fullhouse
jmp originalcode

smgfix:
mulss xmm3,[smgs_gravityChange]
movss xmm4, [dmc2.exe+158A354]
//push eax
//cvttss2si eax, xmm4
//cmp eax,0
//pop eax
//jl smgfallfix
jmp execute

smgfallfix:
mulss xmm3,[smgs_gravityChange]
//mulss xmm3,[smgs_gravityChange]
jmp execute

fullhouse:
mulss xmm3,[fullhouse_gravityChange]
add dword ptr [dmc2.exe+158A370],11
jmp execute

execute:
mulss xmm2,xmm3
//mulss xmm2,[negation_gravityChange]
movss [post_gravityChange],xmm2
jmp returnhere

fallSpeedFix:
divss xmm3,[dmc2.exe+158A3C4]
divss xmm3,[dmc2.exe+158A3C4]
divss xmm3,[dmc2.exe+158A3C4]
mulss xmm2,xmm3
movss xmm3,[dmc2.exe+158A3C4]
movss [gravityChange],xmm3
mulss xmm2,[negation_gravityChange]
movss [post_gravityChange],xmm2
jmp originalcode

originalcode:
mulss xmm2,[rdi+34]

exit:
jmp returnhere

"dmc2.exe"+241AF4:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(gravityChange)
unregistersymbol(gravityChange)
"dmc2.exe"+241AF4:
mulss xmm2,[rdi+34]
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1473</ID>
                  <Description>"gravityChange"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>gravityChange</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1474</ID>
                  <Description>"No description"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>gravityChange+4</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1568</ID>
              <Description>"Pistols Don't Push Up"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+218940)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [rbx+24],0
jmp returnhere

originalcode:
mov [rbx+24],41500000

exit:
jmp returnhere

"dmc2.exe"+218940:
jmp newmem
nop 2
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+218940:
mov [rbx+24],41500000
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1576</ID>
          <Description>"Air Raid Doesn't Eat DJ"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+231132)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
jmp returnhere

originalcode:
mov word ptr [rbx+00000541],0001

exit:
jmp returnhere

"dmc2.exe"+231132:
jmp newmem
nop 4
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+231132:
mov word ptr [rbx+00000541],0001
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>62</ID>
      <Description>"----------------------------------------"</Description>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>1475</ID>
      <Description>"Secretary"</Description>
      <Options moHideChildren="1" moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>1476</ID>
          <Description>"Fine Tuning - Advanced Users Only"</Description>
          <Options moHideChildren="1" moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>1477</ID>
              <Description>"Damage Dealt/Taken Modifier"</Description>
              <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,3096,"dmc2.exe"+5431B)
alloc(damagemult,64)
alloc(enemydamagemult,64)
alloc(muststylethresh,64)
alloc(enemydeathfixer,64)
alloc(bayoinstakilltoggle,64)
alloc(incomingdamage,64)
alloc(weapondamagemult,64)
alloc(jankCancelTimer,64)
alloc(allowJankCancel,64)
alloc(jankCancelSaveInertia,64)
define(CurrentSword,dmc2.exe+158A80F)
registersymbol(weapondamagemult)
weapondamagemult:
dd (float)1.0
merciless_weapondamagemult:
dd (float)0.85
vendetta_weapondamagemult:
dd (float)1.2
label(returnhere)
label(originalcode)
label(exit)
label(enemycase)
label(bayohealth)
label(saveplayer)
label(bayohealthfailcheck)
registersymbol(damagemult)
registersymbol(enemydamagemult)
registersymbol(muststylethresh)
registersymbol(bayoinstakilltoggle)
registersymbol(incomingdamage)
registersymbol(jankCancelTimer)
registersymbol(allowJankCancel)
registersymbol(jankCancelSaveInertia)
jankCancelSaveInertia:
dd (int)0

allowJankCancel:
dd (int)0

jankCancelTimer:
dd (int)0

damagemult:
dd (float)4.5

enemydamagemult:
dd (float)2.0

enemydeathfixer:
dd (float)1.0

bayoinstakilltoggle:
dd (int)1

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
//before we do ANYTHING, check if this is applying damage and not healing
cmp si, 0
jnle originalcode //jump to original code if this is healing something
//overrides go here
//test if the target's health is the player's health
push ebx
mov ebx,[rdi+00000140]
cmp ebx, ["dmc2.exe"+158a470]
pop ebx
jne enemycase //jump to enemy damage case if values don't match
//prepare ecx for float mult
push eax
xor eax, eax //clear eax
neg si
mov ax, si //move incoming damage to cx register
cvtsi2ss xmm0, eax //convert incoming damage to float
mulss xmm0, [damagemult] //multiply incoming damage by player damage modifier
cvttss2si eax, xmm0 //convert to int again
neg eax
mov si, ax
pop eax
cmp [bayoinstakilltoggle], 1 //survive with 1 hp if health &gt; 1 when taking lethal damage
je bayohealth
add ax, si //continue with original code
mov [rdi+00000140],ax
jmp exit

enemycase:
//prime JC timer
mov [jankCancelTimer],1
push ebx
mov ebx,[dmc2.exe+158A968]
cmp ebx, [muststylethresh]
pop ebx
jnge exit //ignore damage dealt if player has fewer than specified style pts
//apply outgoing damage modifiers
cmp eax, F //fixes enemies not dying if outgoing damage &lt; 1.0
jle enemyoverride
push eax
xor eax, eax //clear eax
neg si
mov ax, si //move incoming damage to ax register
cvtsi2ss xmm0, eax //convert incoming damage to float
mulss xmm0, [enemydamagemult] //multiply incoming damage by player damage modifier
cmp byte ptr [CurrentSword],00
je rebellionDamage
//Merciless
cmp byte ptr [CurrentSword],01
je mercilessDamage
//Vendetta
cmp byte ptr [CurrentSword],02
je vendettaDamage
cvttss2si eax, xmm0 //convert to int again
neg eax
mov si, ax
pop eax
add ax, si
mov [rdi+00000140],ax
jmp exit

rebellionDamage:
mulss xmm0, [weapondamagemult]
jmp convertFloatToInt

mercilessDamage:
mulss xmm0, [merciless_weapondamagemult]
jmp convertFloatToInt

vendettaDamage:
mulss xmm0, [vendetta_weapondamagemult]
jmp convertFloatToInt

convertFloatToInt:
cvttss2si eax, xmm0 //convert to int again
neg eax
mov si, ax
pop eax
add ax, si
mov [rdi+00000140],ax
jmp exit

enemyoverride:
push eax
xor eax, eax //clear eax
neg si
mov ax, si //move incoming damage to ax register
cvtsi2ss xmm0, eax //convert incoming damage to float
mulss xmm0, [enemydeathfixer] //multiply incoming damage by player damage modifier
cvttss2si eax, xmm0 //convert to int again
neg eax
mov si, ax
pop eax
add ax, si
mov [rdi+00000140],ax
jmp exit

bayohealth:
push ebx
xor ebx, ebx
mov ebx, eax
add bx, si
cmp bx, ["dmc2.exe"+158a470] //checks if any damage is occurring
jge bayohealthfailcheck
mov [incomingdamage], bx
cmp bx, 1 //checks if incoming damage &gt;= player's health
pop ebx
//mov [incomingdamage], 776
jnle originalcode
push ebx
xor ebx, ebx
mov ebx, ["dmc2.exe"+158a470]
cmp bx, 1 //check if player's health &gt; 1
pop ebx
jg saveplayer
jmp originalcode

saveplayer:
mov [incomingdamage], 5
mov [rdi+00000140], 1 //sets player's health to 1
jmp exit

bayohealthfailcheck:
pop ebx
jmp originalcode

originalcode:
add ax, si
mov [rdi+00000140],ax
jmp exit

exit:
cmp [jankCancelTimer],7
je jankCancelWindow
jmp returnhere

jankCancelWindow:
cmp byte ptr [dmc2.exe+161BEEC],1
je initJankCancel
cmp byte ptr [dmc2.exe+158A86E],0
jne initJankCancel
//cmp [dmc2.exe+158A354],0
//jne allowJankCancel
//cmp dword ptr [dmc2.exe+158A71C],0x0000011D
//je allowJankCancel
mov [jankCancelTimer],0
mov [allowJankCancel],0
jmp returnhere

initJankCancel:
mov [allowJankCancel],1
mov [jankCancelTimer],0xFF
cmp byte ptr [dmc2.exe+158A872],0
jne refreshJumpForJC
jmp returnhere

refreshJumpForJC:
mov byte ptr [dmc2.exe+158A872],2
jmp returnhere

"dmc2.exe"+5431B:
jmp newmem
nop 5
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(damagemult)
dealloc(muststylethresh)
dealloc(incomingdamage)
dealloc(bayoinstakilltoggle)
dealloc(weapondamagemult)
unregistersymbol(damagemult)
unregistersymbol(enemydamagemult)
unregistersymbol(muststylethresh)
unregistersymbol(incomingdamage)
unregistersymbol(bayoinstakilltoggle)
unregistersymbol(weapondamagemult)
"dmc2.exe"+5431B:
add ax,si
mov [rdi+00000140],ax
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1668</ID>
                  <Description>"Correct End-of-Mission Damage Tally"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+5435D)
label(returnhere)
label(originalcode)
label(exit)

newmem:
cmp [damagemult], 0
je nodamage
cvtsi2ss xmm0, esi //convert incoming damage to float
divss xmm0, [damagemult] //multiply incoming damage by player damage modifier
cvttss2si esi, xmm0 //convert to int again
jmp originalcode

nodamage:
mov esi,0
jmp originalcode

originalcode:
sub [rcx+000000C4],esi

exit:
jmp returnhere

"dmc2.exe"+5435D:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+5435D:
sub [rcx+000000C4],esi
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1669</ID>
                      <Description>"Damage Taken In Mission"</Description>
                      <VariableType>4 Bytes</VariableType>
                      <Address>dmc2.exe+1588BF4</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>1670</ID>
                  <Description>"Damage Options"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1478</ID>
                      <Description>"Damage Taken Multiplier"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>damagemult</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1479</ID>
                      <Description>"Damage Dealt Multiplier"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>enemydamagemult</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1480</ID>
                      <Description>"Bayonetta Magic Pixel"</Description>
                      <DropDownList>0:Disable
1:Enable
</DropDownList>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>4 Bytes</VariableType>
                      <Address>bayoinstakilltoggle</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1481</ID>
                      <Description>"NOTE: Must Style Mode requires Damage Dealt/Taken Modifier!!"</Description>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>1482</ID>
                          <Description>"Must Style Mode (See Values)"</Description>
                          <DropDownList>0:Disable Must Style
1500:[D]on't Worry
5000:[C]ome On!
10000:[B]ingo!
15000:[A]re You Ready?
20000:[S]howtime!!
</DropDownList>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>2 Bytes</VariableType>
                          <Address>muststylethresh</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1483</ID>
                      <Description>"Weapon-Specific Multipliers"</Description>
                      <Options moHideChildren="1"/>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>1484</ID>
                          <Description>"Rebellion/Cutlaseer/Sparda Damage"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>weapondamagemult</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1485</ID>
                          <Description>"Merciless/Klyamoor Damage"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>weapondamagemult+4</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1486</ID>
                          <Description>"Vendetta / Zambak Damage"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>weapondamagemult+8</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1487</ID>
              <Description>"Adjustable Enemy Stun"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+5872C)
alloc(stunmult,64)
alloc(handgunnerf,64)
alloc(dtstunmult,64)
label(returnhere)
label(originalcode)
label(exit)
label(movespecificstun)
label(stunmodifier)
label(dtstunmodifier)
registersymbol(stunmult)
registersymbol(handgunnerf)
registersymbol(dtstunmult)
stunmult:
dd (float)2.5

handgunnerf:
dd (float)1.0

dtstunmult:
dd (float)5.0

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
//check if this is hitting the player
//dont think a scalar for that is needed, everything breaks armor in like 1 hit
push ebx
mov ebx, [rcx+00000146]
cmp ebx, [dmc2.exe+158A476]
pop ebx
je originalcode
//check if current moveID is firing handguns
//if true, jump to handgun nerf
push ebx
mov ebx, [dmc2.exe+158A71C]
cmp ebx, 0x00000300
je movespecificstun
cmp ebx, 0x00000202
je movespecificstun
pop ebx
//check if player is in DT
cmp byte ptr [dmc2.exe+158A848],1
je dtstunmodifier
cmp byte ptr [dmc2.exe+158A848],2
je dtstunmodifier
jmp stunmodifier

stunmodifier:
cvtsi2ss xmm0, eax
mulss xmm0, [stunmult]
cvttss2si eax, xmm0
sub [rcx+00000146],ax
jmp exit

dtstunmodifier:
cvtsi2ss xmm0, eax
mulss xmm0, [dtstunmult]
cvttss2si eax, xmm0
sub [rcx+00000146],ax
jmp exit

//allows user to set special stun multiplier for the handguns
movespecificstun:
pop ebx
cmp [handgunnerf],1.0
je stunmodifier
cvtsi2ss xmm0, eax
mulss xmm0, [handgunnerf]
cvttss2si eax, xmm0
sub [rcx+00000146],ax
jmp exit

//incoming stun is in RAX
//need to intercept it and apply scalar
//optional: ignore scalar if in handguns action?
originalcode:
sub [rcx+00000146],ax
jmp exit

exit:
jmp returnhere

"dmc2.exe"+5872C:
jmp newmem
nop 2
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(stunmult)
dealloc(handgunnerf)
dealloc(dtstunmult)
unregistersymbol(stunmult)
unregistersymbol(handgunnerf)
unregistersymbol(dtstunmult)
"dmc2.exe"+5872C:
sub [rcx+00000146],ax

</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1488</ID>
                  <Description>"Stun Multiplier"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>stunmult</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1489</ID>
                  <Description>"DT Stun Multiplier"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>dtstunmult</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1490</ID>
                  <Description>"OPTIONAL: Handgun Stun Multiplier"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>handgunnerf</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1491</ID>
              <Description>"Adjustable Hitlag"</Description>
              <Options moHideChildren="1"/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : dmc2.exe
  Version: 
  Date   : 2020-12-04
  Author : sssiy

  This script does blah blah blah
}

[ENABLE]
aobscanmodule(HitStopDanteAdjust,dmc2.exe,F3 0F 11 83 94 00 00 00 F3 0F 10 83 A0 01 00 00 0F 57 F6) // should be unique
alloc(adjustablehitstop,$1000,"dmc2.exe"+23DD53)
label(code)
label(return)

registersymbol(adjustablehitstop)
adjustablehitstop:
  dd (float)0.65

code:
  movss xmm0,[adjustablehitstop]
  movss [rbx+00000094],xmm0
  jmp return

HitStopDanteAdjust:
  jmp code
  nop
  nop
  nop
return:
registersymbol(HitStopDanteAdjust)

[DISABLE]
HitStopDanteAdjust:
  db F3 0F 11 83 94 00 00 00
unregistersymbol(HitStopDanteAdjust)
dealloc(adjustablehitstop)
unregistersymbol(adjustablehitstop)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1492</ID>
                  <Description>"On-Hit Speed Multiplier"</Description>
                  <VariableType>Float</VariableType>
                  <Address>adjustablehitstop</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1493</ID>
              <Description>"Adjustable Enemy DT Armor Bonus"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+A4B28)
alloc(enemyDTArmorBonus,64)
alloc(restorearmorconst,64)
label(returnhere)
label(originalcode)
label(exit)
registersymbol(enemyDTArmorBonus)

restorearmorconst:
dd (float)0.1

enemyDTArmorBonus:
dd (float)5.0

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cvtsi2ss xmm0, ecx
//Divide by 10 to restore enemy's original armor value
mulss xmm0, [restorearmorconst]
//Apply user's specified armor bonus
mulss xmm0, [enemyDTArmorBonus]
cvttss2si ecx, xmm0
mov [rbx+00000146],cx
//This second address is the value the enemy's armor resets to after recovering
mov [rbx+00000148],cx
jmp exit

originalcode:
mov [rbx+00000146],cx

exit:
jmp returnhere

"dmc2.exe"+A4B28:
jmp newmem
nop 2
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(enemyDTArmorBonus)
dealloc(restorearmorconst)
unregistersymbol(enemyDTArmorBonus)

"dmc2.exe"+A4B28:
mov [rbx+00000146],cx
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1494</ID>
                  <Description>"Enemy DT Armor Multiplier"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>enemyDTArmorBonus</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1495</ID>
              <Description>"[Secretary] USF"</Description>
              <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+2D3C70) 
label(returnhere)
label(originalcode)
label(exit)
alloc(speedmultalloc,64)
alloc(movemultalloc,64)
alloc(weaponmultalloc,64)
alloc(lastCharState,64)
registersymbol(lastCharState)
lastCharState:
dd (byte)0
speedActive_lastcharstate:
dd (byte)0
isSprinting_lastcharstate:
dd (byte)0
sprintSpeed_lastcharstate:
dd (float)2.0
lastAction_lastcharstate:
dd (dword)0
define(CurrentSword,dmc2.exe+158A80F)
define(InputPressed02,dmc2.exe+7DD68C)
registersymbol(weaponmultalloc)
weaponmultalloc:
dd (float)1.0
merciless_weaponmultalloc:
dd (float)1.0
vendetta_weaponmultalloc:
dd (float)1.0
registersymbol(movemultalloc)
movemultalloc:
dd (float)1.0
multifinish1_movemultalloc:
dd (float)1.5
overheadkick_movemultalloc:
dd (float)1.6
sweepoverhead_movemultalloc:
dd (float)2.0
hightime_movemultalloc:
dd (float)1.7
homingknives_movemultalloc:
dd (float)2.0
gdropground_movemultalloc:
dd (float)1.6
dtoverheadslash_movemultalloc:
dd (float)1.6
rapidslash_movemultalloc:
dd (float)1.6
doublekick_movemultalloc:
dd (float)1.6
helmsplitter_movemultalloc:
dd (float)1.6
dttoggle_movemultalloc:
dd (float)2.0
registersymbol(speedmultalloc)
speedmultalloc:
dd (float)1.0
dtspeedmultalloc:
dd (float)1.2
sdtspeedmultalloc:
dd (float)1.2

newmem:
cmp [rcx+08],1
je dantespeed
jmp originalcode

dantespeed:
//move-specific speed mods
cmp dword ptr [dmc2.exe+158A71C],0x0000103
je luciaMultiFinish1
cmp dword ptr [dmc2.exe+158A71C],0x000010A
je luciaOverheadKick
cmp dword ptr [dmc2.exe+158A71C],0x0000105
je luciaSweepOverhead
cmp dword ptr [dmc2.exe+158A71C],0x000020F
je luciaHighTime
cmp dword ptr [dmc2.exe+158A71C],0x0000303
je luciaHomingKnives
cmp dword ptr [dmc2.exe+158A71c],0x0000206
je luciaGDropGround
cmp dword ptr [dmc2.exe+158A71c],0x000010D
je luciaDTOverheadSlash
cmp dword ptr [dmc2.exe+158A71C],0x0000107
je luciaRapidSlash
cmp dword ptr [dmc2.exe+158A71C],0x0000104
je luciaDoubleKick
cmp dword ptr [dmc2.exe+158A71C],0x0000113
je luciaHelmSplitter
cmp dword ptr [dmc2.exe+158A71C],0x000031A
je luciaWaterRave
cmp dword ptr [dmc2.exe+158A71C],0x000011B
je luciaWaterRave
cmp dword ptr [dmc2.exe+158A71C],0x0000117
je luciaSPEEN
//Other DT Toggle Anims
cmp dword ptr [dmc2.exe+158A718],0x16001616
je luciaDTButtonOK
cmp dword ptr [dmc2.exe+158A718],0x15001515
je luciaDTButtonOK
//DT speed mods
cmp byte ptr [dmc2.exe+158A848],1
je dantedt
cmp byte ptr [dmc2.exe+158A848],2
je dantesdt
//Base speed mod
mulss xmm0,[speedmultalloc]
jmp weaponCheck

luciaSPEEN:
mulss xmm0,[multifinish1_movemultalloc]
mov [allowJankCancel],1
mov [jankCancelTimer],0x1F
jmp weaponCheck

luciaDTActivation:
cmp byte ptr [lastCharState], 0
je luciaDTCheckAir
cmp byte ptr [speedActive_lastcharstate], 1
je luciaDTCheckAir
cmp byte ptr [lastCharState], 0
jge luciaDTEnemyFuckery
jmp originalcode

luciaDTEnemyFuckery:
cmp dword ptr [dmc2.exe+158A71c], 0x0000001
je fixthisalready
jmp originalcode

fixthisalready:
cmp dword ptr [dmc2.exe+158A71c], 0x0000000
jne luciaDTCheckButton
jmp originalcode

luciaDTCheckButton:
cmp dword ptr [InputPressed02],0x000000C0
je originalcode
cmp dword ptr [InputPressed02],0x00000040
je originalcode
cmp dword ptr [InputPressed02],0x00000060
je originalcode
cmp dword ptr [InputPressed02],0x00000050
je originalcode
cmp dword ptr [InputPressed02],0x00000048
je originalcode
cmp dword ptr [InputPressed02],0x00000041
je originalcode
cmp dword ptr [InputPressed02],0x00000042
je originalcode
cmp dword ptr [InputPressed02],0x00000044
je originalcode
jmp luciaDTCheckAir

luciaDTCheckAir:
cmp byte ptr [dmc2.exe+158A870], 0
jne luciaDTButtonOK
cmp byte ptr [dmc2.exe+158A714], 2
je luciaDTButtonOK
cmp byte ptr [dmc2.exe+158A871], 0
jne luciaDTButtonOK
jmp originalcode

luciaDTButtonOK:
mov [speedActive_lastcharstate], 1
mulss xmm0,[dttoggle_movemultalloc]
jmp originalcode

luciaHelmSplitter:
mulss xmm0,[helmsplitter_movemultalloc]
jmp weaponCheck

luciaDoubleKick:
mulss xmm0,[doublekick_movemultalloc]
jmp weaponCheck

luciaRapidSlash:
mulss xmm0,[rapidslash_movemultalloc]
jmp weaponCheck

luciaDTOverheadSlash:
mulss xmm0,[dtoverheadslash_movemultalloc]
jmp weaponCheck

luciaGDropGround:
mulss xmm0,[gdropground_movemultalloc]
jmp originalcode

luciaHomingKnives:
mulss xmm0,[homingknives_movemultalloc]
jmp originalcode

luciaHighTime:
mulss xmm0,[hightime_movemultalloc]
jmp originalcode

luciaSweepOverhead:
mulss xmm0,[sweepoverhead_movemultalloc]
jmp weaponCheck

luciaOverheadKick:
mulss xmm0,[overheadkick_movemultalloc]
jmp weaponCheck

luciaMultiFinish1:
mulss xmm0,[multifinish1_movemultalloc]
jmp weaponCheck

luciaWaterRave:
mulss xmm0,[homingknives_movemultalloc]
jmp weaponCheck

dantedt:
mulss xmm0,[dtspeedmultalloc]
cmp dword ptr [dmc2.exe+158A718],0x19001919
je luciaDTCheckAir
cmp dword ptr [dmc2.exe+158A718],0x15001515
je luciaDTCheckAir
mov [speedActive_lastcharstate],0
jmp weaponCheck
dantesdt:
mulss xmm0,[sdtspeedmultalloc]
jmp weaponCheck

weaponCheck:
cmp dword ptr [dmc2.exe+158A71C],0x00000001
je playerSprint
cmp byte ptr [CurrentSword],00
je rebellionSpeed
//Merciless
cmp byte ptr [CurrentSword],01
je mercilessSpeed
//Vendetta
cmp byte ptr [CurrentSword],02
je vendettaSpeed

playerSprint:
cmp dword ptr [InputPressed02],0x00000400
je executePlayerSprint
jmp originalcode

executePlayerSprint:
mulss xmm0,[sprintSpeed_lastcharstate]
jmp originalcode

rebellionSpeed:
mulss xmm0,[weaponmultalloc]
jmp originalcode

mercilessSpeed:
mulss xmm0,[merciless_weaponmultalloc]
jmp originalcode

vendettaSpeed:
mulss xmm0,[vendetta_weaponmultalloc]
jmp originalcode

originalcode:
push eax
mov eax, [dmc2.exe+158A848]
mov [lastCharState], eax
mov eax, [dmc2.exe+158A71C]
mov [lastAction_lastcharstate], eax
pop eax
movss [rcx+00000094],xmm0
jmp returnhere

exit:
jmp returnhere

"dmc2.exe"+2D3C70:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
dealloc(newmem)
"dmc2.exe"+2D3C70:
movss [rcx+00000094],xmm0
//Alt: db F3 0F 11 81 94 00 00 00

dealloc(movemultalloc)
dealloc(speedmultalloc)
dealloc(weaponmultalloc)
dealloc(lastCharState)
unregistersymbol(lastCharState)
unregistersymbol(weaponmultalloc)
unregistersymbol(movemultalloc)
unregistersymbol(speedmultalloc)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1496</ID>
                  <Description>"Speed Mult"</Description>
                  <VariableType>Float</VariableType>
                  <Address>speedmultalloc</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1497</ID>
                  <Description>"DT Speed Mult"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>speedmultalloc+4</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1498</ID>
                  <Description>"SDT Speed Mult"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>speedmultalloc+8</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1499</ID>
                  <Description>"Move Speed Adjustments"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1500</ID>
                      <Description>"Standard Combo A Finisher"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+4</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1501</ID>
                      <Description>"Combo B Finisher [OverheadKick]"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+8</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1502</ID>
                      <Description>"Combo C Finisher [Sweep-&gt;Overhead]"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+C</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1503</ID>
                      <Description>"High Time"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+10</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1504</ID>
                      <Description>"Darts (Doesn't seem to work?)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+14</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1505</ID>
                      <Description>"Grounded Cranky Bomb Drop"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+18</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1506</ID>
                      <Description>"DT Overhead Slash"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+1C</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1507</ID>
                      <Description>"DT Rapid Slash"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+20</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1508</ID>
                      <Description>"Combo B Double Kick"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+24</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1509</ID>
                      <Description>"Helm Splitter"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+28</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1510</ID>
                      <Description>"Air Raid Activation"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>movemultalloc+2C</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>1511</ID>
                  <Description>"Weapon-Specific Modifiers"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1512</ID>
                      <Description>"Cutlaseer Speed Modifier"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>weaponmultalloc</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1513</ID>
                      <Description>"Klyamoor Speed Modifier"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>weaponmultalloc+4</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1514</ID>
                      <Description>"Zambak Speed Modifier"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>weaponmultalloc+8</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1515</ID>
          <Description>"Settings"</Description>
          <Options moHideChildren="1" moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>1516</ID>
              <Description>"Disable DT Cooldown (See values dropdown)"</Description>
              <DropDownList>30:Safe Disable
0:Aggressive Disable
</DropDownList>
              <VariableType>2 Bytes</VariableType>
              <Address>dmc2.exe+158A85E</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1517</ID>
              <Description>"DT Gain Multiplier"</Description>
              <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+588E0)
alloc(dtmultalloc,64)
label(returnhere)
label(originalcode)
label(exit)
registersymbol(dtmultalloc)
dtmultalloc:
dd (float)1.5

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push eax //prepare eax
xor eax,eax //clear eax
mov ax, r9w //move build dt to eax register
cvtsi2ss xmm0,eax //convert to float
mulss xmm0, [dtmultalloc] //multiply by dt multiplier specified in table
cvttss2si eax,xmm0 //convert back to int
//imul r9w,[dtmultalloc]
mov r9w, ax
add cx,r9w
pop eax
cmp cx,ax

originalcode:
add cx,r9w
cmp cx,ax

exit:
jmp returnhere

"dmc2.exe"+588E0:
jmp newmem
nop 2
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(dtmultalloc)
unregistersymbol(dtmultalloc)
"dmc2.exe"+588e0:
add cx,r9w
cmp cx,ax
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1518</ID>
                  <Description>"DT Gain Multiplier Value"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>dtmultalloc</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1519</ID>
              <Description>"Modern Style Loss System"</Description>
              <Options moHideChildren="1"/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//Reworks aspects of the Style system to match DMC3/4/5's system.
alloc(newmem,2048,"dmc2.exe"+5A4CF)
alloc(newmem02,2048,"dmc2.exe"+23206E)
alloc(stylelosshandler,2048,"dmc2.exe"+23DF64)
//
label(returnhere)
label(hitlossdone)
label(originalcode)
label(exit)
label(decaycomp)
label(removeStyleRating)
label(styletest)
label(setStyleRatingToA)
label(setStyleRatingToB)
label(setStyleRatingToC)
label(setStyleRatingToD)
label(resetStyleDecayTimer)
//
alloc(stylelosstimer,64)
alloc(xmholder,64)
alloc(onhitstylelossscalar,64)
alloc(styleptstoloseondecay,64)
//
registersymbol(stylelosstimer)
registersymbol(onhitstylelossscalar)
registersymbol(styleptstoloseondecay)
//
stylelosstimer:
dd (float)180
xmholder:
dd (float)0
onhitstylelossscalar:
dd (float)2.0 //default: lose half of your style points
//don't go below 1.0 or else you gain style for being hit

newmem: //Overrides the game's original starting timer for style decay.
//For some reason the game uses a float here.
movss [xmholder],xmm0
movss xmm0,[stylelosstimer]
movss [r8+00000634],xmm0
movss xmm0,[xmholder]
jmp exit
//
//
newmem02: //On-Hit Style Loss overrides
push eax
xor eax,eax
mov eax, ["dmc2.exe"+158A968] //places player's style points in eax
cvtsi2ss xmm0, eax
divss xmm0, [onhitstylelossscalar] //Divides style points by scalar specified in CT
cvttss2si eax,xmm0
cmp eax, 5DC
jle hlpRemoveStyle
mov ["dmc2.exe"+158A968], eax
pop eax
//Reset style decay timer to what's specified in CT
movss [xmholder],xmm0
movss xmm0,[stylelosstimer]
movss [dmc2.exe+158A964],xmm0
movss xmm0,[xmholder]
jmp hitlossdone
//
//
stylelosshandler: //Custom behavior when the style loss timer runs out
//Remove all style pts if timer expires on D rank
push eax
xor eax, eax
//mov eax, [rbx+00000638]
//mov [styleptstoloseondecay], eax
mov ax, 4E20
//mov [styleptstoloseondecay], 20000
//Modern DMC system from here, lose 1 rank every time timer hits 0
cmp dword ["dmc2.exe"+158A968], eax
jge setStyleRatingToA
mov ax, 3A98
cmp dword ["dmc2.exe"+158A968], eax
jge setStyleRatingToB
mov ax, 2710
cmp dword ["dmc2.exe"+158A968], eax
jge setStyleRatingToC
mov ax, 1388
cmp dword ["dmc2.exe"+158A968], eax
jge setStyleRatingToD
pop eax
jmp removeStyleRating
//done
jmp decaycomp
//
//
resetStyleDecayTimer:
movss [xmholder],xmm0
movss xmm0,[stylelosstimer]
movss [dmc2.exe+158A964],xmm0
movss xmm0,[xmholder]
ret
//
//
hlpRemoveStyle:
pop eax
mov ["dmc2.exe"+158A968], 0
jmp hitlossdone
//
//
removeStyleRating: //helper function to reset player's style using vanilla call
mov [dmc2.exe+158A968], 0
jmp decaycomp
//
//
setStyleRatingToA: //S returns to A rank
pop eax
mov [styleptstoloseondecay], 10F2C
mov dword [dmc2.exe+158A968], 3A98
movss [xmholder],xmm0
movss xmm0,[stylelosstimer]
movss [dmc2.exe+158A964],xmm0
movss xmm0,[xmholder]
jmp decaycomp
//
//
setStyleRatingToB: //S returns to A rank
pop eax
mov [styleptstoloseondecay], 4
mov dword [dmc2.exe+158A968], 2710
movss [xmholder],xmm0
movss xmm0,[stylelosstimer]
movss [dmc2.exe+158A964],xmm0
movss xmm0,[xmholder]
jmp decaycomp
//
//
setStyleRatingToC: //S returns to A rank
pop eax
mov [styleptstoloseondecay], 3
mov dword [dmc2.exe+158A968], 1388
movss [xmholder],xmm0
movss xmm0,[stylelosstimer]
movss [dmc2.exe+158A964],xmm0
movss xmm0,[xmholder]
jmp decaycomp
//
//
setStyleRatingToD: //S returns to A rank
pop eax
mov [styleptstoloseondecay], 2
mov dword [dmc2.exe+158A968], 5DC
movss [xmholder],xmm0
movss xmm0,[stylelosstimer]
movss [dmc2.exe+158A964],xmm0
movss xmm0,[xmholder]
jmp decaycomp
//
//
styletest:
mov [rbx+00000638],esi
//
//
originalcode: //original timer code
mov [r8+00000634],42DC0000 //default timer value is 110.0
//
//
exit:
jmp returnhere
//
//
"dmc2.exe"+5A4CF: //style point timer
jmp newmem
nop 6
returnhere:
//
//
"dmc2.exe"+23206E: //on-hit style loss
jmp newmem02
nop 5
hitlossdone:
//
//
"dmc2.exe"+23DF64: //called when style point timer empties
//mov [rbx+00000638],esi
jmp stylelosshandler
nop
decaycomp:
//
//
[DISABLE]
dealloc(newmem)
dealloc(newmem02)
dealloc(stylelosshandler)
dealloc(stylelosstimer)
dealloc(xmholder)
dealloc(onhitstylelossscalar)
dealloc(styleptstoloseondecay)
unregistersymbol(stylelosstimer)
unregistersymbol(onhitstylelossscalar)
unregistersymbol(styleptstoloseondecay)
"dmc2.exe"+5a4cf:
mov [r8+00000634],42DC0000
"dmc2.exe"+23206E:
mov [rbx+00000634],3A83126F
"dmc2.exe"+23DF64:
mov [rbx+00000638],esi
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1520</ID>
                  <Description>"Time Before a Style Rank Is Lost"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>stylelosstimer</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1521</ID>
                  <Description>"Divide Style Points by (value) When Hit"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>onhitstylelossscalar</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1522</ID>
                  <Description>"DEBUG: Last style rank when timer hit 0"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>2 Bytes</VariableType>
                  <Address>styleptstoloseondecay</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1523</ID>
                  <Description>"DEBUG: Time Remaining in Combo"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>dmc2.exe+158A964</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1524</ID>
                  <Description>"DEBUG: Style Pts HUD Time"</Description>
                  <VariableType>2 Bytes</VariableType>
                  <Address>dmc2.exe+158A966</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1525</ID>
              <Description>"Style Point Gain Multiplier"</Description>
              <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+5A4BC)
label(returnhere)
label(originalcode)
label(exit)
alloc(styleptsscalar,64)
registersymbol(styleptsscalar)
styleptsscalar:
dd (float)1.0

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
mulss xmm1,[styleptsscalar]
cvttss2si eax,xmm1
test r10d,r10d

exit:
jmp returnhere

"dmc2.exe"+5A4BC:
jmp newmem
nop 2
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(styleptsscalar)
"dmc2.exe"+5a4bc:
cvttss2si eax,xmm1
test r10d,r10d
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1526</ID>
                  <Description>"Style Points Gain Multiplier Value"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>styleptsscalar</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1527</ID>
              <Description>"Loadout Hotswapper - Use D-Pad and Right Trigger"</Description>
              <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>//Thank you Siyan!
[ENABLE]
aobscanmodule(styleswitchinglol,dmc2.exe,C0 48 89 41 08 48 89 41 10) // should be unique
alloc(newmem,$1000,"dmc2.exe"+19372)
alloc(lastUsedInput,64)
alloc(regAfterBitmask,64)
alloc(allowDodgeOffset,64)
alloc(dodgeOffsetContinueOK,64)
alloc(useInstantSDT,64)
alloc(setSwordRotBind,64)
define(CurrentCharacter,dmc2.exe+1588B31)
label(rotateSword)
label(returnhere)
label(finished)
label(testForHold)
label(amuletTestForHold)
label(checkAmuletToRotate)
label(rotateLeftAmulet)
label(rotateRightAmulet)
label(rotateTopAmulet)
label(setRightAmuletToQuick)
label(setLeftAmuletToHealing)
label(setLeftAmuletToOffence)
label(setTopAmuletToFrost)
label(setTopAmuletToElectro)
label(cycleToMerciless)
label(cycleToVendetta)
label(cycleToRebellion)
label(L3SwordRotation)
define(inputpressed,dmc2.exe+7DD68D)
define(CurrentSword,dmc2.exe+158A80F)
registersymbol(inputpressed)
registersymbol(lastUsedInput)
registersymbol(regAfterBitmask)
registersymbol(allowDodgeOffset)
registersymbol(dodgeOffsetContinueOK)
registersymbol(useInstantSDT)
registersymbol(setSwordRotBind)
useInstantSDT:
dw (int)0

const_useInstantSDT:
dd (float)1.2

restore_useInstantSDT:
db (int)0

allowDodgeOffset:
db (int)1

lastUsedInput:
dw (int)0

setSwordRotBind:
db (int)0

//Check to see if current button input is Right Trigger (Disable Lock-on)
newmem:
//check if an SDT cancel was done last cycle
cmp [restore_useInstantSDT],1
je restoreDT
//Re-do the bitmask for checking D-Pad inputs
push eax
mov eax, [inputpressed]
and eax, 0xFFFFFFF0
mov [regAfterBitmask], eax
pop eax
cmp byte [regAfterBitmask],0x80
je amuletTestForHold
cmp byte [regAfterBitmask],0x10
je amuletTestForHold
cmp byte [regAfterBitmask],0x20
je amuletTestForHold
//Lucia doesn't have SDT
//cmp byte [regAfterBitmask],0x40
//je sdtTestForHold
//dodge offset needs raw value
push eax
mov eax, [inputpressed-1]
and eax, 0x000000FF
mov [regAfterBitmask], eax
pop eax
//Dodge Inputs
cmp byte [regAfterBitmask],0x20
je testForCharacter
cmp byte [regAfterBitmask],0x28
je testForCharacter
//Dodge Offset Inputs (Attack + Dodge [LOCK-ON OK])
cmp byte [regAfterBitmask],0x30
je testForCharacter
cmp byte [regAfterBitmask],0x38
je testForCharacter
//jank cancel inputs
cmp byte [regAfterBitmask],0x40
je testDupeInputsJC
cmp byte [regAfterBitmask],0x48
je testDupeInputsJC
cmp byte [regAfterBitmask],0x50
je testDupeInputsJC
cmp byte [regAfterBitmask],0x58
je testDupeInputsJC
//L3 Weapon Swap Rebind
cmp byte [setSwordRotBind],0x1
je L3SwordRotation
//Placing original bind functionality afterwards lets us skip checking RT
//Apply a bitmask to the currently held inputs to get only the first value
push eax
mov eax, [inputpressed-1]
and eax, 0x0000000F
mov [regAfterBitmask], eax
pop eax
//Jump if any combination of the triggers/bumpers also includes RT
cmp byte [regAfterBitmask],02
je testForHold
cmp byte [regAfterBitmask],06
je testForHold
cmp byte [regAfterBitmask],0x0A
je testForHold
cmp byte [regAfterBitmask],0x0F
je testForHold
cmp byte [regAfterBitmask],0x0E
je testForHold
cmp byte [regAfterBitmask],03
je testForHold
cmp byte [regAfterBitmask],07
je testForHold
jmp returnhere

L3SwordRotation:
//Apply a bitmask to the currently held inputs to get only the first value
push eax
mov eax, [inputpressed-1]
and eax, 0x00000F00
mov [regAfterBitmask], eax
pop eax
cmp [regAfterBitmask],0x200
je testForHold
jmp returnhere

//Duplicate code from sword switcher
amuletTestForHold:
push eax
mov eax, [lastUsedInput+1]
and eax, 0xFFFFFFF0
mov [regAfterBitmask], eax
pop eax
//check for duplicate d-pad inputs
cmp [regAfterBitmask],0x80
je returnhere
cmp [regAfterBitmask],0x10
je returnhere
cmp [regAfterBitmask],0x20
je returnhere
cmp [regAfterBitmask],0x40
je returnhere
jmp checkAmuletToRotate

checkAmuletToRotate:
//This is awful. Clean it up later?
//Re-do the bitmask for checking D-Pad inputs
push eax
mov eax, [inputpressed]
and eax, 0xFFFFFFF0
mov [regAfterBitmask], eax
pop eax
cmp byte [regAfterBitmask],0x80
je rotateLeftAmulet
cmp byte [regAfterBitmask],0x10
je rotateTopAmulet
cmp byte [regAfterBitmask],0x20
je rotateRightAmulet
jmp returnhere

//Rotates right amulet between Quick and Aerial hearts.
//Aqua Heart is ignored for obvious reasons.
rotateRightAmulet:
cmp byte ptr [dmc2.exe+158A849], 2
je setRightAmuletToQuick
mov byte ptr [dmc2.exe+158A849], 2
jmp returnhere

setRightAmuletToQuick:
mov byte ptr [dmc2.exe+158A849], 3
jmp returnhere

//Rotates left amulet between Chrono/Healing/Offence.
//Maybe add option to ignore Healing Heart?
rotateLeftAmulet:
cmp byte ptr [dmc2.exe+158A84B], 1
je setLeftAmuletToHealing
cmp byte ptr [dmc2.exe+158A84B], 2
je setLeftAmuletToOffence
mov byte ptr [dmc2.exe+158A84B], 1
jmp returnhere

setLeftAmuletToHealing:
mov byte ptr [dmc2.exe+158A84B], 2
jmp returnhere

setLeftAmuletToOffence:
mov byte ptr [dmc2.exe+158A84B], 3
jmp returnhere

//Rotates top amulet between Flame/Frost/Electro.
rotateTopAmulet:
cmp byte ptr [dmc2.exe+158A84A], 1
je setTopAmuletToFrost
cmp byte ptr [dmc2.exe+158A84A], 2
je setTopAmuletToElectro
mov byte ptr [dmc2.exe+158A84A], 1
jmp returnhere

setTopAmuletToFrost:
mov byte ptr [dmc2.exe+158A84A], 2
jmp returnhere

setTopAmuletToElectro:
mov byte ptr [dmc2.exe+158A84A], 3
jmp returnhere

//Blocks swords rotating by holding button
testForHold:
//Apply a bitmask to the currently held inputs to get only the first value
push eax
mov eax, [lastUsedInput]
and eax, 0x0000000F
mov [regAfterBitmask], eax
pop eax
//messy shit
//Check for duplicate RT inputs
cmp [regAfterBitmask],0x0F
je returnhere
cmp [regAfterBitmask],06
je returnhere
cmp [regAfterBitmask],0x0A
je returnhere
cmp [regAfterBitmask],0x0E
je returnhere
cmp [regAfterBitmask],03
je returnhere
cmp [regAfterBitmask],02
je returnhere
cmp [regAfterBitmask],07
je returnhere
push eax
mov eax, [lastUsedInput]
and eax, 0x00000F00
mov [regAfterBitmask], eax
pop eax
cmp [regAfterBitmask],0x200
je returnhere
//If no duped inputs, rotate sword
jmp rotateSword

//Rotates sword to next value
rotateSword:
//Ignore this section if playing as Trish
//This avoids a crash if you try to swap her sword
cmp byte ptr [CurrentCharacter], 0x02
je returnhere
//Swap Swords
cmp byte ptr [CurrentSword],00
je cycleToMerciless
cmp byte ptr [CurrentSword],01
je cycleToVendetta
cmp byte ptr [CurrentSword],02
je cycleToRebellion
jmp returnhere

cycleToMerciless:
mov byte ptr [CurrentSword],01
jmp returnhere

cycleToVendetta:
mov byte ptr [CurrentSword],02
jmp returnhere

cycleToRebellion:
mov byte ptr [CurrentSword],00
jmp returnhere

testForCharacter:
//check if dodge offset is enabled
cmp [allowDodgeOffset], 1
jne returnhere
//fixes softlock in underwater sections
cmp byte ptr [dmc2.exe+158A716], 4
je returnhere
//check if current character is Lucia, otherwise end
//cmp [dmc2.exe+1588B30],0100
//je testForHold_DodgeOffset
//cmp [dmc2.exe+1588B30],0501
//je testForHold_DodgeOffset
//cmp [dmc2.exe+1588B30],0301
//je testForHold_DodgeOffset
//cmp [dmc2.exe+1588B30],0701
//je testForHold_DodgeOffset
jmp testForHold_DodgeOffset

testForHold_DodgeOffset:
//Apply a bitmask to the currently held inputs to get only the first value
push eax
mov eax, [lastUsedInput]
and eax, 0x0000000F
mov [regAfterBitmask], eax
pop eax
//messy shit
//Check for duplicate inputs
//Dodge Offset Input (Attack + Dodge)
cmp byte [regAfterBitmask],0x20
je returnhere
//Free Dodge
cmp byte [regAfterBitmask],0x28
je returnhere
cmp byte [regAfterBitmask],0x30
je returnhere
cmp byte [regAfterBitmask],0x38
je returnhere
jmp tryFreeDodge

tryFreeDodge:
//god i hope the last action ID is updated by now
//lol of course it isnt
//disable dodge offset when in DT
cmp byte ptr [dmc2.exe+158A848],0x1
je returnhere
jmp executeFreeDodge

executeFreeDodge:
mov [dodgeOffsetContinueOK], 0
mov [dmc2.exe+158A714],0x0
//dodge offset needs raw value
push ebx
mov ebx, [inputpressed-1]
and ebx, 0x000000FF
mov [regAfterBitmask], ebx
pop ebx
//Dodge Offset Input (Attack + Dodge)
cmp byte [regAfterBitmask],0x30
je executeDodgeOffset
cmp byte [regAfterBitmask],0x38
je executeDodgeOffset
jmp returnhere

executeDodgeOffset:
mov [dodgeOffsetContinueOK], 0x1
jmp returnhere

testDupeInputsJC:
//Apply a bitmask to the currently held inputs to get only the first value
push eax
mov eax, [lastUsedInput]
and eax, 0x0000000F
mov [regAfterBitmask], eax
pop eax
//messy shit
//Check for duplicate inputs
//JC Input is just jump
cmp byte [regAfterBitmask],0x40
je returnhere
//Free Dodge
cmp byte [regAfterBitmask],0x48
je returnhere
cmp byte [regAfterBitmask],0x49
je returnhere
//cmp byte [regAfterBitmask],0x50
//je returnhere
//cmp byte [regAfterBitmask],0x58
//je returnhere
jmp tryJankCancel

tryJankCancel:
//disable jank cancel when in DT
//might not need this since there's always an action tied to jump
cmp [allowJankCancel],1
jne returnhere
//Disable JCs in DT/SDT because fuck
cmp byte ptr [dmc2.exe+158A848],0x0
jne returnhere
jmp executeJankCancel

executeJankCancel:
//cmp byte ptr [dmc2.exe+158A354],1
//jne returnhere
mov [dmc2.exe+158A872],1
//mov [dmc2.exe+158A3C4],999.0
mov [dmc2.exe+158A714],0x2
mov [jankCancelSaveInertia],1
mov [jankCancelTimer],0
mov [allowJankCancel],0
jmp returnhere

returnhere:
  push eax
  mov eax, [inputpressed-1]
  mov [lastUsedInput], eax
  pop eax
  mov [rcx+08],rax
  mov [rcx+10],rax
  //decrement the jank cancel timer by 1
  jmp jankCancelTimerHandler
  //jmp finished

jankCancelTimerHandler:
cmp [jankCancelTimer],0
jg decrementJCTimer
cmp byte ptr [dmc2.exe+158A872],2
je removeJCJump
mov [allowJankCancel],0
mov [jankCancelTimer],0
jmp finished

removeJCJump:
mov byte ptr [dmc2.exe+158A872],0
mov [allowJankCancel],0
mov [jankCancelTimer],0
jmp finished

decrementJCTimer:
sub [jankCancelTimer],1
jmp finished

//Duplicate code from sword switcher
sdtTestForHold:
push eax
mov eax, [lastUsedInput+1]
and eax, 0xFFFFFFF0
mov [regAfterBitmask], eax
pop eax
//check for duplicate d-pad inputs
cmp [regAfterBitmask],0x40
je returnhere
jmp tryInstantSDT

tryInstantSDT:
cmp byte ptr [dmc2.exe+158A848],2
je executeSDTCancel
jmp returnhere

executeSDT:
mov [useInstantSDT],1
call dmc2.exe+230FB0
jmp returnhere

executeSDTCancel:
push eax
mov eax, [dmc2.exe+158A84E]
mov [dmc2.exe+158A84E],0
//slightly boost DT when cancelling SDT to mimic 5's Quadruple S
//cvtsi2ss xmm0,eax
//mulss xmm0,[const_useInstantSDT]
//cvttss2si eax,xmm0
cmp eax,0x12C0
jge quadSPrep
mov [useInstantSDT],eax
mov [restore_useInstantSDT],1
//mov [dmc2.exe+158A84E],eax
pop eax
jmp returnhere

quadSPrep:
mov [useInstantSDT],0x17A0
mov [restore_useInstantSDT],1
pop eax
jmp returnhere

restoreDT:
mov [restore_useInstantSDT],0
push eax
mov eax, [useInstantSDT]
mov [dmc2.exe+158A84E],eax
pop eax
mov [useInstantSDT],0
jmp newmem

styleswitchinglol+01:
jmp newmem
nop
nop
nop
finished:
registersymbol(styleswitchinglol)

[DISABLE]
dealloc(newmem)
dealloc(lastUsedInput)
dealloc(regAfterBitmask)
dealloc(allowDodgeOffset)
dealloc(dodgeOffsetMoveID)
dealloc(setSwordRotBind)
unregistersymbol(lastUsedInput)
unregistersymbol(styleswitchinglol)
unregistersymbol(regAfterBitmask)
unregistersymbol(allowDodgeOffset)
unregistersymbol(dodgeOffsetContinueOK)
unregistersymbol(inputpressed)
unregistersymbol(setSwordRotBind)
styleswitchinglol+01:
  db 48 89 41 08 48 89 41 10

{
// ORIGINAL CODE - INJECTION POINT: "dmc2.exe"+19372

"dmc2.exe"+19367: CC                    -  int 3
"dmc2.exe"+19368: CC                    -  int 3
"dmc2.exe"+19369: CC                    -  int 3
"dmc2.exe"+1936A: CC                    -  int 3
"dmc2.exe"+1936B: CC                    -  int 3
"dmc2.exe"+1936C: CC                    -  int 3
"dmc2.exe"+1936D: CC                    -  int 3
"dmc2.exe"+1936E: CC                    -  int 3
"dmc2.exe"+1936F: CC                    -  int 3
"dmc2.exe"+19370: 33 C0                 -  xor eax,eax
// ---------- INJECTING HERE ----------
"dmc2.exe"+19372: 48 89 41 08           -  mov [rcx+08],rax
"dmc2.exe"+19376: 48 89 41 10           -  mov [rcx+10],rax
// ---------- DONE INJECTING  ----------
"dmc2.exe"+1937A: 48 89 41 18           -  mov [rcx+18],rax
"dmc2.exe"+1937E: 48 89 41 20           -  mov [rcx+20],rax
"dmc2.exe"+19382: 48 89 41 28           -  mov [rcx+28],rax
"dmc2.exe"+19386: 48 89 41 30           -  mov [rcx+30],rax
"dmc2.exe"+1938A: C3                    -  ret
"dmc2.exe"+1938B: CC                    -  int 3
"dmc2.exe"+1938C: CC                    -  int 3
"dmc2.exe"+1938D: CC                    -  int 3
"dmc2.exe"+1938E: CC                    -  int 3
"dmc2.exe"+1938F: CC                    -  int 3
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1528</ID>
                  <Description>"Allow Dodge Cancels"</Description>
                  <DropDownList>1:Enable
0:Disable
</DropDownList>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>4 Bytes</VariableType>
                  <Address>allowDodgeOffset</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1529</ID>
                  <Description>"Secretary - Unique Sword Movesets"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"dmc2.exe"+23D547) 
label(returnhere)
label(originalcode)
label(exit)
alloc(moveswapalloc,8)
alloc(previousMoveID,64)
define(CurrentSword,dmc2.exe+158A80F)
registersymbol(previousMoveID)
registersymbol(moveswapalloc)
moveswapalloc:
db 0

newmem:
//Before we do any move swaps, check to see what sword
//is currently equipped so we can declone the swords.
//
//Need to change the moveID in ebx directly
//so Dodge Offset doesn't need hardcoding for each sword
//
//oh how wrong i was
//
//Check for Dodge Offset
//comically stupid workaround for guns getting swapped
push eax
mov eax, [inputpressed-1]
and eax, 0x000000FF
mov [regAfterBitmask], eax
pop eax
cmp byte [regAfterBitmask],0x80
je originalcode
cmp byte [regAfterBitmask],0xC0
je originalcode
cmp byte [regAfterBitmask],0xA0
je originalcode
cmp byte [regAfterBitmask],0x88
je originalcode
cmp [dodgeOffsetContinueOK], 1
je dodgeOffsetOverride
push ebx
mov ebx, [moveswapalloc]
mov [previousMoveID], ebx
pop ebx
cmp byte ptr [CurrentSword],00
je cutlaseerMoveSwaps
cmp byte ptr [CurrentSword],01
je klyamoorMoveSwaps
cmp byte ptr [CurrentSword],02
je zambakMoveSwaps
//just in case this SOMEHOW breaks
jmp originalcode
//

//replaces the incoming moveID with the
//last one read by moveswapalloc,
//then calls the original moveswap code (yes it's recursive im sorry)
dodgeOffsetOverride:
//Ignore Dodge Offset if player is in standing/running state
mov [dodgeOffsetContinueOK],0
push eax
mov eax, [dmc2.exe+158A71C]
cmp eax, 0x00000000
pop eax
jne newmem
//cmp byte ptr [CurrentSword],00
jmp cutlaseerDodgeOffset
//cmp byte ptr [CurrentSword],01
//je klyamoorDodgeOffset
//cmp byte ptr [CurrentSword],02
//je zambakDodgeOffset
jmp newmem

klyamoorDodgeOffset:
//Jab 1 -&gt; Jab 2
cmp [moveswapalloc], 0x00000000
je klj1j2
//Jab 2 -&gt; Jab 3
cmp [moveswapalloc], 0x00000002
je klj2j3
//TiltJab 1 -&gt; TiltJab2
cmp [moveswapalloc], 0x00000001
je kltj1tj2
//TiltJab 2 -&gt; TiltJab3
cmp [moveswapalloc], 0x00000009
je kltj2tj3
mov al, [moveswapalloc]
jmp newmem

//klya j1 to j2
klj1j2:
//check if tilt input, if so then go to tilt 2
mov [moveswapalloc], eax
cmp [moveswapalloc], 0x00000001
je kltj1tj2
mov [moveswapalloc], 0x00000002
mov al, [moveswapalloc]
jmp newmem

//klya j2 to j3
klj2j3:
mov [moveswapalloc], 0x00000003
mov al, [moveswapalloc]
jmp newmem

//klya tilt j1 to tilt j2
kltj1tj2:
//check if non-tilt input, if so then go to non-tilt 2
mov [moveswapalloc], eax
cmp [moveswapalloc], 0x00000000
je klj1j2
//replace with tj2
mov [moveswapalloc], 0x00000009
mov al, [moveswapalloc]
jmp newmem

//klay tilt j2 to tilt j3
kltj2tj3:
mov [moveswapalloc], 0x0000000A
mov al, [moveswapalloc]
jmp newmem

cutlaseerDodgeOffset:
//Jab 1 -&gt; Jab 2
cmp [moveswapalloc], 0x00000000
je csj1j2
//Jab 2 -&gt; Jab 3
cmp [moveswapalloc], 0x00000002
je csj2j3
//TiltJab 1 -&gt; TiltJab2
cmp [moveswapalloc], 0x00000001
je cstj1tj2
//TiltJab 2 -&gt; TiltJab3
cmp [moveswapalloc], 0x00000009
je cstj2tj3
mov al, [moveswapalloc]
jmp newmem

//cutlass j1 to j2
csj1j2:
//check if tilt input, if so then go to tilt 2
mov [moveswapalloc], eax
cmp [moveswapalloc], 0x00000001
je cstj1tj2
mov [moveswapalloc], 0x00000002
mov al, [moveswapalloc]
jmp newmem

//cutlass j2 to j3
csj2j3:
mov [moveswapalloc], 0x00000003
mov al, [moveswapalloc]
jmp newmem

//cutlass tilt j1 to tilt j2
cstj1tj2:
//check if non-tilt input, if so then go to non-tilt 2
mov [moveswapalloc], eax
cmp [moveswapalloc], 0x00000000
je csj1j2
//replace with tj2
mov [moveswapalloc], 0x00000009
mov al, [moveswapalloc]
jmp newmem

//cutlass tilt j2 to tilt j3
cstj2tj3:
mov [moveswapalloc], 0x0000000A
mov al, [moveswapalloc]
jmp newmem

zambakDodgeOffset:

//Move Swaps Legend:
// ^: Tilt Input

//Cutlaseer is pretty strong as-is.
//note: cmov doesn't support what we're doing so we need a label for each swap
cutlaseerMoveSwaps:
mov [moveswapalloc],eax
cmp [moveswapalloc],0x00000010
je cutlaseer_airraveHelmBreaker
//always end with a jump to originalcode
jmp originalcode

cutlaseer_airraveHelmBreaker:
mov byte ptr [r10+00003EC],0x13
jmp originalcode

//Klyamoor is pretty useless for Lucia. Let's give it a
//similar treatment to Merciless and make it a light-weight
//but low damage alternative to Cutlaseer.

//C
klyamoorMoveSwaps:
mov [moveswapalloc],eax
cmp [moveswapalloc],0x0000000A
je klyamoor_tilt3topspin
cmp [moveswapalloc],0x00000009
je klyamoor_tilt2standard2
cmp [moveswapalloc],0x0000000E
je klyamoor_stingerRapidFireKick
cmp [moveswapalloc],0x00000002
je klyamoor_jab2dtdouble
jmp originalcode

klyamoor_stingerRapidFireKick:
mov byte ptr [r10+000003EC],0x16
jmp returnhere

klyamoor_tilt3topspin:
mov byte ptr [r10+000003EC],0x17
jmp returnhere

klyamoor_tilt2standard2:
mov byte ptr [r10+000003EC],0x2
jmp returnhere

klyamoor_jab2dtdouble:
mov byte ptr [r10+000003EC],0xC
jmp returnhere


//Give Zambak the DT moveset outside of DT, and
//remove most of the kicks for increased damage.
//18, 19
zambakMoveSwaps:
mov [moveswapalloc],eax
cmp [moveswapalloc],0x0000000E
je zambak_stingerCTDoubleSlash
cmp [moveswapalloc],0x00000009
je zambak_12Overhead
cmp [moveswapalloc],0x0000000A
je zambak_123RapidSlash
cmp [moveswapalloc],0x00000004
je zambak_12doublekick
cmp [moveswapalloc],0x00000010
je zambak_airraveAirStinger
cmp [moveswapalloc],0x00000007
je zambak_dtrapidAerialCross1
cmp [moveswapalloc],0x00000008
je zambak_dtrapidfinishAerialCross2
jmp originalcode

zambak_dtrapidAerialCross1:
cmp byte ptr [dmc2.exe+158A848],0x01
jne originalcode
mov byte ptr [r10+000003EC],0x18
jmp returnhere

zambak_dtrapidfinishAerialCross2:
cmp byte ptr [dmc2.exe+158A848],0x01
jne originalcode
mov byte ptr [r10+000003EC],0x19
jmp returnhere

zambak_stingerCTDoubleSlash:
mov byte ptr [r10+000003EC],0x06
jmp returnhere

zambak_12Overhead:
mov byte ptr [r10+000003EC],0x0B
jmp returnhere

zambak_123RapidSlash:
mov byte ptr [r10+000003EC],0x0D
jmp returnhere

zambak_12doublekick:
mov byte ptr [r10+000003EC],0x07
jmp returnhere

zambak_airraveAirStinger:
mov byte ptr [r10+000003EC],0x12
jmp returnhere



//the al register holds the ID of the original move being executed.
//by comparing it to a move ID, we can then intercept this call
//and insert a different move ID instead.

originalcode:
mov [r10+000003EC],al
jmp returnhere

exit:
jmp returnhere

"dmc2.exe"+23D547:
jmp newmem
nop
nop
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+23D547:
mov [r10+000003EC],al
//Alt: db 41 88 82 EC 03 00 00

dealloc(moveswapalloc)
dealloc(previousMoveID)
unregistersymbol(previousMoveID)
unregistersymbol(moveswapalloc)
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1530</ID>
                      <Description>"Allow Dodge Offset?"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Byte</VariableType>
                      <Address>dodgeOffsetContinueOK</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1531</ID>
                      <Description>"Show Debug Info"</Description>
                      <Options moHideChildren="1"/>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>1532</ID>
                          <Description>"Move ID"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>dmc2.exe+158A71C</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1533</ID>
                          <Description>"Move Swap Mem"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <VariableType>4 Bytes</VariableType>
                          <Address>moveswapalloc</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1534</ID>
                          <Description>"move swap alloc"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <VariableType>4 Bytes</VariableType>
                          <Address>moveswapalloc</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>1535</ID>
                          <Description>"premoveid"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>previousMoveID</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>1536</ID>
                  <Description>"Show Loadout Debug Info"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1537</ID>
                      <Description>"Equipped Sword"</Description>
                      <DropDownList>0:Rebellion
1:Merciless
2:Vendetta
</DropDownList>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Byte</VariableType>
                      <Address>dmc2.exe+158A80F</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1538</ID>
                      <Description>"DEBUG: LAST INPUT"</Description>
                      <ShowAsHex>1</ShowAsHex>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>4 Bytes</VariableType>
                      <Address>lastUsedInput</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1539</ID>
                      <Description>"regafterbitmask"</Description>
                      <ShowAsHex>1</ShowAsHex>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>4 Bytes</VariableType>
                      <Address>regAfterBitmask</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1540</ID>
                      <Description>"InputPressed"</Description>
                      <ShowAsHex>1</ShowAsHex>
                      <VariableType>4 Bytes</VariableType>
                      <Address>dmc2.exe+7DD68C</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1541</ID>
                      <Description>"Amulet Equip 1"</Description>
                      <DropDownList ReadOnly="1" DisplayValueAsItem="1">2:Aerial Heart
3:Quick Heart
</DropDownList>
                      <VariableType>Byte</VariableType>
                      <Address>dmc2.exe+158A849</Address>
                      <Hotkeys>
                        <Hotkey>
                          <Action>Toggle Activation</Action>
                          <Keys/>
                          <ID>0</ID>
                        </Hotkey>
                        <Hotkey>
                          <Action>Set Value</Action>
                          <Keys>
                            <Key>112</Key>
                          </Keys>
                          <Value>1</Value>
                          <ID>1</ID>
                        </Hotkey>
                      </Hotkeys>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1542</ID>
                      <Description>"Amulet Equip 2"</Description>
                      <DropDownList ReadOnly="1" DisplayValueAsItem="1">1:Flame Heart
2:Frost Heart
3:Electro Heart
</DropDownList>
                      <VariableType>Byte</VariableType>
                      <Address>dmc2.exe+158A84A</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1543</ID>
                      <Description>"Amulet Equip 3"</Description>
                      <DropDownList ReadOnly="1" DisplayValueAsItem="1">1:Chrono Heart
2:Healing Heart
3:Offence Heart
</DropDownList>
                      <VariableType>Byte</VariableType>
                      <Address>dmc2.exe+158A84B</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1544</ID>
                      <Description>"char"</Description>
                      <ShowAsHex>1</ShowAsHex>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Byte</VariableType>
                      <Address>dmc2.exe+1588B31</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>1629</ID>
                  <Description>"Weapon Switch Bind"</Description>
                  <DropDownList DisplayValueAsItem="1">0:Right Trigger
1:LS Click (L3)
</DropDownList>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Byte</VariableType>
                  <Address>setSwordRotBind</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1545</ID>
              <Description>"Swap Guns While Attacking"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
dmc2.exe+2306A0:
jmp dmc2.exe+2306B2

[DISABLE]
dmc2.exe+2306A0:
je dmc2.exe+2306B2
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1546</ID>
                  <Description>"This lets you swap guns while doing any action"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{
}
[ENABLE]
[DISABLE]
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1547</ID>
                      <Description>"Swapping during gun actions cancels those actions"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{
}
[ENABLE]
[DISABLE]
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>1548</ID>
                  <Description>"Customize your gun loadout below:"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{
}
[ENABLE]
[DISABLE]
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1549</ID>
                      <Description>"Skip Pistols"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+2306C5) 
label(returnhere)
label(originalcode)
label(nopistols)
label(exit)
alloc(weaponstore,4)
registersymbol(weaponstore)
weaponstore:
  db 0

newmem:
mov [weaponstore],al
cmp byte ptr [weaponstore],00
je nopistols
jmp originalcode

originalcode:
mov [rcx+000004DC],al
jmp returnhere

nopistols:
mov byte ptr [rcx+000004DC+2],01
jmp returnhere

exit:
jmp returnhere

"dmc2.exe"+2306C5:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+2306C5:
mov [rcx+000004DC],al
//Alt: db 88 81 DC 04 00 00

dealloc(weaponstore)
unregistersymbol(weaponstore)
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1550</ID>
                      <Description>"Skip Machine Guns"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+2306C5) 
label(returnhere)
label(originalcode)
label(nomachineguns)
label(exit)
alloc(weaponstore,4)
registersymbol(weaponstore)
weaponstore:
  db 0

newmem:
mov [weaponstore],al
cmp byte ptr [weaponstore],01
je nomachineguns
jmp originalcode

originalcode:
mov [rcx+000004DC],al
jmp returnhere

nomachineguns:
mov byte ptr [rcx+000004DC+2],02
jmp returnhere

exit:
jmp returnhere

"dmc2.exe"+2306C5:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+2306C5:
mov [rcx+000004DC],al
//Alt: db 88 81 DC 04 00 00

dealloc(weaponstore)
unregistersymbol(weaponstore)
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1551</ID>
                      <Description>"Skip Shotgun"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+2306C5) 
label(returnhere)
label(originalcode)
label(noshotgun)
label(exit)
alloc(weaponstore,4)
registersymbol(weaponstore)
weaponstore:
  db 0

newmem:
mov [weaponstore],al
cmp byte ptr [weaponstore],02
je noshotgun
jmp originalcode

originalcode:
mov [rcx+000004DC],al
jmp returnhere

noshotgun:
mov byte ptr [rcx+000004DC+2],03
jmp returnhere

exit:
jmp returnhere

"dmc2.exe"+2306C5:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+2306C5:
mov [rcx+000004DC],al
//Alt: db 88 81 DC 04 00 00

dealloc(weaponstore)
unregistersymbol(weaponstore)
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1552</ID>
                      <Description>"Skip Rocket Launcher"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+2306C5) 
label(returnhere)
label(originalcode)
label(norpg)
label(exit)
alloc(weaponstore,4)
registersymbol(weaponstore)
weaponstore:
  db 0

newmem:
mov [weaponstore],al
cmp byte ptr [weaponstore],03
je norpg
jmp originalcode

originalcode:
mov [rcx+000004DC],al
jmp returnhere

norpg:
mov byte ptr [rcx+000004DC+2],00
jmp returnhere

exit:
jmp returnhere

"dmc2.exe"+2306C5:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+2306C5:
mov [rcx+000004DC],al
//Alt: db 88 81 DC 04 00 00

dealloc(weaponstore)
unregistersymbol(weaponstore)
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1553</ID>
                      <Description>"Skip Machine Gun &amp; Rocket Launcher"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+2306C5) 
label(returnhere)
label(originalcode)
label(nomachinegun)
label(norpg)
label(exit)
alloc(weaponstore,4)
registersymbol(weaponstore)
weaponstore:
  db 0

newmem:
mov [weaponstore],al
cmp byte ptr [weaponstore],03
je norpg
cmp byte ptr [weaponstore],01
je nomachinegun
jmp originalcode

originalcode:
mov [rcx+000004DC],al
jmp returnhere

norpg:
mov byte ptr [rcx+000004DC+2],00
jmp returnhere

nomachinegun:
mov byte ptr [rcx+000004DC+2],02
jmp returnhere

exit:
jmp returnhere

"dmc2.exe"+2306C5:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+2306C5:
mov [rcx+000004DC],al
//Alt: db 88 81 DC 04 00 00

dealloc(weaponstore)
unregistersymbol(weaponstore)
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>1554</ID>
                  <Description>"Debug: Current Gun Equip"</Description>
                  <DropDownList ReadOnly="1" DisplayValueAsItem="1">0:Pistols
1:Machine Gun
2:Shotgun
3:Rocket Launcher
</DropDownList>
                  <VariableType>Byte</VariableType>
                  <Address>dmc2.exe+158A80E </Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1557</ID>
              <Description>"Run Speed Modifier?"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+23A9BA)
label(returnhere)
label(originalcode)
label(exit)
alloc(runMult,128,"dmc2.exe"+23A9BA)
registersymbol(runMult)
runMult:
dd (float)1.5

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mulss xmm8,[runMult]
jmp originalcode

originalcode:
movss [rdi+40],xmm8

exit:
jmp returnhere

"dmc2.exe"+23A9BA:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(runMult)
unregistersymbol(runMult)
"dmc2.exe"+23A9BA:
movss [rdi+40],xmm8
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1558</ID>
                  <Description>"Running Speed Multiplier"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>runMult</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1559</ID>
              <Description>"SMGS Don't Change Gravity"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+219F5A)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
jmp returnhere

originalcode:
movss [rbx+24],xmm0

exit:
jmp returnhere

"dmc2.exe"+219F5A:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+219F5A:
movss [rbx+24],xmm0
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1560</ID>
              <Description>"SMGS Don't Push Up"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+219D9B)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
jmp returnhere

originalcode:
mov [rbx+24],41300000

exit:
jmp returnhere

"dmc2.exe"+219D9B:
jmp newmem
nop 2
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+219D9B:
mov [rbx+24],41300000
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1561</ID>
              <Description>"Gravity Mods"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+241AF4)
alloc(gravityChange,64)
label(returnhere)
label(originalcode)
label(exit)
registersymbol(gravityChange)
gravityChange:
dd (float)0.0
post_gravityChange:
dd (float)0.0
negation_gravityChange:
dd (float)-1.0
const_gravityChange:
dd (float)0.0
smgs_gravityChange:
dd (float)0.33
fullhouse_gravityChange:
dd (float)6.0

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
movss xmm3,[rdi+34]
movss [gravityChange],xmm3
//movss xmm4, [dmc2.exe+158A354]
//push eax
//cvttss2si eax, xmm4
//cmp eax,0
//pop eax
//jle fallSpeedFix
//divss xmm3,[dmc2.exe+158A3C4]
//divss xmm3,[dmc2.exe+158A3C4]
//mulss xmm2,xmm3
//mulss xmm2,[negation_gravityChange]
//movss [post_gravityChange],xmm2
cmp dword ptr [dmc2.exe+158A71C],0x0000205
je smgfix
cmp dword ptr [dmc2.exe+158A71C],0x0000204
je smgfix
cmp dword ptr [dmc2.exe+158A71C],0x000021B
je smgfix
cmp dword ptr [dmc2.exe+158A71C],0x000011C
je fullhouse
jmp originalcode

smgfix:
mulss xmm3,[smgs_gravityChange]
movss xmm4, [dmc2.exe+158A354]
//push eax
//cvttss2si eax, xmm4
//cmp eax,0
//pop eax
//jl smgfallfix
jmp execute

smgfallfix:
mulss xmm3,[smgs_gravityChange]
//mulss xmm3,[smgs_gravityChange]
jmp execute

fullhouse:
mulss xmm3,[fullhouse_gravityChange]
add dword ptr [dmc2.exe+158A370],11
jmp execute

execute:
mulss xmm2,xmm3
//mulss xmm2,[negation_gravityChange]
movss [post_gravityChange],xmm2
jmp returnhere

fallSpeedFix:
divss xmm3,[dmc2.exe+158A3C4]
divss xmm3,[dmc2.exe+158A3C4]
divss xmm3,[dmc2.exe+158A3C4]
mulss xmm2,xmm3
movss xmm3,[dmc2.exe+158A3C4]
movss [gravityChange],xmm3
mulss xmm2,[negation_gravityChange]
movss [post_gravityChange],xmm2
jmp originalcode

originalcode:
mulss xmm2,[rdi+34]

exit:
jmp returnhere

"dmc2.exe"+241AF4:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(gravityChange)
unregistersymbol(gravityChange)
"dmc2.exe"+241AF4:
mulss xmm2,[rdi+34]
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1562</ID>
                  <Description>"gravityChange"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>gravityChange</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1563</ID>
                  <Description>"No description"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>gravityChange+4</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1564</ID>
              <Description>"Air State"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Byte</VariableType>
              <Address>dmc2.exe+161BEFC</Address>
              <CheatEntries>
                <CheatEntry>
                  <ID>1565</ID>
                  <Description>"Secretary Other Air State??"</Description>
                  <VariableType>Byte</VariableType>
                  <Address>dmc2.exe+158A86E</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1566</ID>
              <Description>"Secretary Air State"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Byte</VariableType>
              <Address>dmc2.exe+161BEEC</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1577</ID>
          <Description>"Air Raid Doesn't Eat DJ"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+231132)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
jmp returnhere

originalcode:
mov word ptr [rbx+00000541],0001

exit:
jmp returnhere

"dmc2.exe"+231132:
jmp newmem
nop 4
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+231132:
mov word ptr [rbx+00000541],0001
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>1567</ID>
      <Description>"----------------------------------------"</Description>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>1263</ID>
      <Description>"Use Character Switcher to play as any character on any disc"</Description>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>1264</ID>
      <Description>"Remember to set your character above to the one you switch to in Character Switcher"</Description>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>112</ID>
      <Description>"Character Switcher, enable on data select screen"</Description>
      <Options moHideChildren="1" moActivateChildrenAsWell="1"/>
      <DropDownList DisplayValueAsItem="1">0201:loltrish
0701:secretary
0000:dante
0401:deisel dante
0601:dmc1 dante
0100:lucia
0501:deisel lucia
0301:deisel 2 lucia
</DropDownList>
      <ShowAsHex>1</ShowAsHex>
      <VariableType>2 Bytes</VariableType>
      <Address>dmc2.exe+1588B30</Address>
      <CheatEntries>
        <CheatEntry>
          <ID>1686</ID>
          <Description>"Don't Override Char Selection"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+26191E)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
jmp returnhere

originalcode:
mov [rax+01],cl
mov rax,[dmc2.exe+1621E60]

exit:
jmp returnhere

"dmc2.exe"+26191E:
jmp newmem
nop 5
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+26191E:
mov [rax+01],cl
mov rax,[dmc2.exe+1621E60]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1687</ID>
          <Description>"Above pt 2"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+25DF05)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov rcx,[dmc2.exe+1621E60]
jmp returnhere

originalcode:
mov [rax+01],cl
mov rcx,[dmc2.exe+1621E60]

exit:
jmp returnhere

"dmc2.exe"+25DF05:
jmp newmem
nop 5
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+25DF05:
mov [rax+01],cl
mov rcx,[dmc2.exe+1621E60]
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>61</ID>
      <Description>"----------------------------------------"</Description>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>1265</ID>
      <Description>"Utilities &amp; Research (Advanced Users Only!)"</Description>
      <Options moHideChildren="1"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>50</ID>
          <Description>"Useful addresses etc"</Description>
          <Options moHideChildren="1"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>44</ID>
              <Description>"No description"</Description>
              <VariableType>Byte</VariableType>
              <Address>7FF64126A71C</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>42</ID>
              <Description>"3 will speed you up and break things"</Description>
              <VariableType>Byte</VariableType>
              <Address>7FF64126A71B</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>43</ID>
              <Description>"Some Cancels"</Description>
              <VariableType>Byte</VariableType>
              <Address>7FF64126A714</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>46</ID>
              <Description>"cancelmaybe1"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Byte</VariableType>
              <Address>dmc2.exe+158A714</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>85</ID>
              <Description>"jump cancels"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>dmc2.exe+23D598 </Address>
            </CheatEntry>
            <CheatEntry>
              <ID>75</ID>
              <Description>"wesker mode"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
dmc2.exe+20250F:
nop 7

[DISABLE]
dmc2.exe+20250F:
cmp byte ptr [rdi+00000518],00

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>70</ID>
              <Description>"DT Element"</Description>
              <VariableType>Byte</VariableType>
              <Address>dmc2.exe+158A84A</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>71</ID>
              <Description>"Character State"</Description>
              <ShowAsHex>1</ShowAsHex>
              <ShowAsSigned>1</ShowAsSigned>
              <VariableType>Byte</VariableType>
              <Address>dmc2.exe+158A848</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>72</ID>
              <Description>"Character State2"</Description>
              <VariableType>Byte</VariableType>
              <Address>dmc2.exe+158A848</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>73</ID>
              <Description>"Health Regeneration"</Description>
              <VariableType>Byte</VariableType>
              <Address>dmc2.exe+158A85A</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>84</ID>
              <Description>"No Description"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>7FF643D9A714</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>88</ID>
              <Description>"Amulet Loadout"</Description>
              <ShowAsHex>1</ShowAsHex>
              <VariableType>4 Bytes</VariableType>
              <Address>dmc2.exe+158A234</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>89</ID>
              <Description>"Load/Save Screen Stuff"</Description>
              <ShowAsHex>1</ShowAsHex>
              <VariableType>4 Bytes</VariableType>
              <Address>dmc2.exe+158841C</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>90</ID>
              <Description>"Load/Save Character Image"</Description>
              <ShowAsHex>1</ShowAsHex>
              <VariableType>4 Bytes</VariableType>
              <Address>dmc2.exe+1588440</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>92</ID>
              <Description>"Skin selected"</Description>
              <VariableType>Byte</VariableType>
              <Address>7FF7EAFD841D</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1044</ID>
              <Description>"onGround?"</Description>
              <VariableType>Byte</VariableType>
              <Address>dmc2.exe+158A870</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1045</ID>
              <Description>"onGround2?"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Byte</VariableType>
              <Address>dmc2.exe+158A871</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>228</ID>
              <Description>"Current Player Speed"</Description>
              <VariableType>Float</VariableType>
              <Address>dmc2.exe+158A3C4</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1578</ID>
              <Description>"cancelmaybe2"</Description>
              <ShowAsHex>1</ShowAsHex>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>dmc2.exe+158A718</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1580</ID>
              <Description>"Trish - Sparda State"</Description>
              <ShowAsHex>1</ShowAsHex>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Byte</VariableType>
              <Address>dmc2.exe+158A8C2</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>149</ID>
          <Description>"Extras"</Description>
          <Options moHideChildren="1"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>74</ID>
              <Description>"sword elements outside of dt"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
dmc2.exe+2DFF3A:
nop 8

[DISABLE]
dmc2.exe+2DFF3A:
cmp byte ptr [r8+00000518],00
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>76</ID>
              <Description>"quick heart outside of sdt"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
dmc2.exe+23DC8A:
nop 2

[DISABLE]
dmc2.exe+23DC8A:
jne dmc2.exe+23DCA9
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>82</ID>
              <Description>"inf jumps"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
dmc2.exe+23023B:
nop 6

[DISABLE]
dmc2.exe+23023B:
mov [rbx+00000542],dl
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>120</ID>
              <Description>"LongerStinger"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : dmc2.exe
  Version: 
  Date   : 2021-03-06
  Author : SSSiy

  This script does blah blah blah
}

[ENABLE]
aobscanmodule(LongerStinger,dmc2.exe,F3 0F 11 43 40 85 FF 74 0E C7 43 24 00 00 70 40 C7 43 34 00 00 00 BF 0F) // should be unique
alloc(newmem,$1000,LongerStinger)

label(code)
label(return)

newmem:
dd (float)30
code:
  movss xmm0,[newmem]
  movss [rbx+40],xmm0
  jmp return

LongerStinger:
  jmp code
return:
registersymbol(LongerStinger)

[DISABLE]
LongerStinger:
  db F3 0F 11 43 40
unregistersymbol(LongerStinger)
dealloc(newmem)
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>137</ID>
          <Description>"Hide HUD"</Description>
          <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>136</ID>
              <Description>"Hide Orbs"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
dmc2.exe+66717: // Orbs
nop 4

[DISABLE]
dmc2.exe+66717: // Orbs
or byte ptr [rbx+07],01
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>141</ID>
              <Description>"Hide Player HP"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
dmc2.exe+69F5F: // HP
nop 4

[DISABLE]
dmc2.exe+69F5F: // HP
or byte ptr [rbx+07],01
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>140</ID>
              <Description>"Hide Style"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
dmc2.exe+66A54: // Style
nop 4

[DISABLE]
dmc2.exe+66A54: // Style
or byte ptr [rbx+07],01
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>139</ID>
              <Description>"Hide Enemy HP"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
dmc2.exe+6637B: // Enemy HP
nop 3

[DISABLE]
dmc2.exe+6637B: // Enemy HP
sete al
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>142</ID>
              <Description>"Extra"</Description>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>138</ID>
                  <Description>"Hide Weapons"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
dmc2.exe+6A162: // Weapons
nop 4

dmc2.exe+6A1C4: // Weapons 2
nop 4

[DISABLE]
dmc2.exe+6A162: // Weapons
or byte ptr [rbx+07],01

dmc2.exe+6A1C4: // Weapons 2
or byte ptr [rbx+07],01
</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>116</ID>
          <Description>"Player Speed Settings"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{
}
[ENABLE]
[DISABLE]
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>212</ID>
              <Description>"Only activate ONE of the turbo options below"</Description>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>1050</ID>
                  <Description>"Classic Turbo Options"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>56</ID>
                      <Description>"Player only Turbo"</Description>
                      <Options moHideChildren="1"/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+2D3C70)
label(returnhere)
label(originalcode)
label(exit)
alloc(speedmultalloc,64)
registersymbol(speedmultalloc)
speedmultalloc:
dd (float)2

newmem:
cmp [rcx+08],1
je dantespeed
jmp originalcode

dantespeed:
mulss xmm0,[speedmultalloc]
jmp originalcode

originalcode:
movss [rcx+00000094],xmm0
jmp returnhere

exit:
jmp returnhere

"dmc2.exe"+2D3C70:
jmp newmem
nop
nop
nop
returnhere:




[DISABLE]
dealloc(newmem)
"dmc2.exe"+2D3C70:
movss [rcx+00000094],xmm0
//Alt: db F3 0F 11 81 94 00 00 00

dealloc(speedmultalloc)
unregistersymbol(speedmultalloc)
</AssemblerScript>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>57</ID>
                          <Description>"Speed Mult"</Description>
                          <VariableType>Float</VariableType>
                          <Address>speedmultalloc</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>55</ID>
                          <Description>"Current Player Speed"</Description>
                          <VariableType>Float</VariableType>
                          <Address>dmc2.exe+158A3C4</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>144</ID>
                      <Description>"Player only Turbo And Faster In DT/SDT"</Description>
                      <Options moHideChildren="1"/>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+2D3C70) 
label(returnhere)
label(originalcode)
label(exit)
alloc(speedmultalloc,64)
registersymbol(speedmultalloc)
speedmultalloc:
dd (float)2
dtspeedmultalloc:
dd (float)5
sdtspeedmultalloc:
dd (float)10

newmem:
cmp [rcx+08],1
je dantespeed
jmp originalcode

dantespeed:
cmp byte ptr [dmc2.exe+158A848],1
je dantedt
cmp byte ptr [dmc2.exe+158A848],2
je dantesdt
mulss xmm0,[speedmultalloc]
jmp originalcode

dantedt:
mulss xmm0,[dtspeedmultalloc]
jmp originalcode
dantesdt:
mulss xmm0,[sdtspeedmultalloc]
jmp originalcode

originalcode:
movss [rcx+00000094],xmm0
jmp returnhere

exit:
jmp returnhere

"dmc2.exe"+2D3C70:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
dealloc(newmem)
"dmc2.exe"+2D3C70:
movss [rcx+00000094],xmm0
//Alt: db F3 0F 11 81 94 00 00 00

dealloc(speedmultalloc)
unregistersymbol(speedmultalloc)
</AssemblerScript>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>145</ID>
                          <Description>"Speed Mult"</Description>
                          <VariableType>Float</VariableType>
                          <Address>speedmultalloc</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>147</ID>
                          <Description>"DT Speed Mult"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>speedmultalloc+4</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>148</ID>
                          <Description>"SDT Speed Mult"</Description>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>Float</VariableType>
                          <Address>speedmultalloc+8</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>146</ID>
                          <Description>"Current Player Speed"</Description>
                          <VariableType>Float</VariableType>
                          <Address>dmc2.exe+158A3C4</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>103</ID>
              <Description>"Adjustable Hitlag"</Description>
              <Options moHideChildren="1"/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : dmc2.exe
  Version: 
  Date   : 2020-12-04
  Author : sssiy

  This script does blah blah blah
}

[ENABLE]
aobscanmodule(HitStopDanteAdjust,dmc2.exe,F3 0F 11 83 94 00 00 00 F3 0F 10 83 A0 01 00 00 0F 57 F6) // should be unique
alloc(adjustablehitstop,$1000,"dmc2.exe"+23DD53)
label(code)
label(return)

registersymbol(adjustablehitstop)
adjustablehitstop:
  dd (float)0.7

code:
  movss xmm0,[adjustablehitstop]
  movss [rbx+00000094],xmm0
  jmp return

HitStopDanteAdjust:
  jmp code
  nop
  nop
  nop
return:
registersymbol(HitStopDanteAdjust)

[DISABLE]
HitStopDanteAdjust:
  db F3 0F 11 83 94 00 00 00
unregistersymbol(HitStopDanteAdjust)
dealloc(adjustablehitstop)
unregistersymbol(adjustablehitstop)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>104</ID>
                  <Description>"On-Hit Speed Multiplier"</Description>
                  <VariableType>Float</VariableType>
                  <Address>adjustablehitstop</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>102</ID>
                  <Description>"No Hitstop On Dante"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
dmc2.exe+23DD53:
nop
nop
nop
nop
nop
nop
nop
nop

[DISABLE]
dmc2.exe+23DD53:
movss [rbx+00000094],xmm0
</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>68</ID>
          <Description>"Dante - SinDT Settings"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{
}
[ENABLE]
[DISABLE]
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>58</ID>
              <Description>"Always SDT"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
dmc2.exe+231046:
nop
nop

[DISABLE]
dmc2.exe+231046:
jnl dmc2.exe+23107D
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>60</ID>
              <Description>"SDT Cancel On Dpad Down"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+2312D2) 
label(returnhere)
label(originalcode)
label(exit)
label(SDTCancel)
define(inputpressed,dmc2.exe+7DD68D)

newmem:
cmp byte ptr [inputpressed],40
je SDTCancel
jmp originalcode

originalcode:
test ax,ax
jg dmc2.exe+2313D1
jmp returnhere

SDTCancel:
jg dmc2.exe+2313D1

exit:
jmp returnhere

"dmc2.exe"+2312D2:
jmp newmem
nop
nop
nop
nop
returnhere:

alloc(newmem2,2048,"dmc2.exe"+2312B4)
label(returnhere2)
label(originalcode2)
label(exit2)
label(SDTCancel2)

newmem2:
cmp byte ptr [inputpressed],40
je SDTCancel2
jmp originalcode2

originalcode2:
test ax,ax
jle dmc2.exe+2312C6
jmp returnhere2

SDTCancel2:
jle dmc2.exe+2312C6
jmp returnhere2

exit2:
jmp returnhere2

"dmc2.exe"+2312B4:
jmp newmem2
returnhere2:
 
[DISABLE]
dealloc(newmem)
"dmc2.exe"+2312D2:
test ax,ax
jg dmc2.exe+2313D1
//Alt: db 66 85 C0 0F 8F F6 00 00 00

dealloc(newmem2)
"dmc2.exe"+2312B4:
test ax,ax
jle dmc2.exe+2312C6
//Alt: db 66 85 C0 7E 0D
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>199</ID>
          <Description>"Loadout Settings"</Description>
          <Options moHideChildren="1"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>997</ID>
              <Description>"[Trish] Infinite Round Trip"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
nop 4

[DISABLE]
dmc2.exe+2E8377:
dec word ptr [rdi+0C]
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>11</ID>
              <Description>"Swap Guns While Attacking"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
dmc2.exe+2306A0:
jmp dmc2.exe+2306B2

[DISABLE]
dmc2.exe+2306A0:
je dmc2.exe+2306B2
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>65</ID>
                  <Description>"This lets you swap guns while doing any action"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{
}
[ENABLE]
[DISABLE]
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>66</ID>
                      <Description>"Swapping during gun actions cancels those actions"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>{
}
[ENABLE]
[DISABLE]
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>63</ID>
                  <Description>"Customize your gun loadout below:"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{
}
[ENABLE]
[DISABLE]
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>20</ID>
                      <Description>"Skip Pistols"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+2306C5) 
label(returnhere)
label(originalcode)
label(nopistols)
label(exit)
alloc(weaponstore,4)
registersymbol(weaponstore)
weaponstore:
  db 0

newmem:
mov [weaponstore],al
cmp byte ptr [weaponstore],00
je nopistols
jmp originalcode

originalcode:
mov [rcx+000004DC],al
jmp returnhere

nopistols:
mov byte ptr [rcx+000004DC+2],01
jmp returnhere

exit:
jmp returnhere

"dmc2.exe"+2306C5:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+2306C5:
mov [rcx+000004DC],al
//Alt: db 88 81 DC 04 00 00

dealloc(weaponstore)
unregistersymbol(weaponstore)
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>25</ID>
                      <Description>"Skip Machine Guns"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+2306C5) 
label(returnhere)
label(originalcode)
label(nomachineguns)
label(exit)
alloc(weaponstore,4)
registersymbol(weaponstore)
weaponstore:
  db 0

newmem:
mov [weaponstore],al
cmp byte ptr [weaponstore],01
je nomachineguns
jmp originalcode

originalcode:
mov [rcx+000004DC],al
jmp returnhere

nomachineguns:
mov byte ptr [rcx+000004DC+2],02
jmp returnhere

exit:
jmp returnhere

"dmc2.exe"+2306C5:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+2306C5:
mov [rcx+000004DC],al
//Alt: db 88 81 DC 04 00 00

dealloc(weaponstore)
unregistersymbol(weaponstore)
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>26</ID>
                      <Description>"Skip Shotgun"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+2306C5) 
label(returnhere)
label(originalcode)
label(noshotgun)
label(exit)
alloc(weaponstore,4)
registersymbol(weaponstore)
weaponstore:
  db 0

newmem:
mov [weaponstore],al
cmp byte ptr [weaponstore],02
je noshotgun
jmp originalcode

originalcode:
mov [rcx+000004DC],al
jmp returnhere

noshotgun:
mov byte ptr [rcx+000004DC+2],03
jmp returnhere

exit:
jmp returnhere

"dmc2.exe"+2306C5:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+2306C5:
mov [rcx+000004DC],al
//Alt: db 88 81 DC 04 00 00

dealloc(weaponstore)
unregistersymbol(weaponstore)
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>28</ID>
                      <Description>"Skip Rocket Launcher"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+2306C5) 
label(returnhere)
label(originalcode)
label(norpg)
label(exit)
alloc(weaponstore,4)
registersymbol(weaponstore)
weaponstore:
  db 0

newmem:
mov [weaponstore],al
cmp byte ptr [weaponstore],03
je norpg
jmp originalcode

originalcode:
mov [rcx+000004DC],al
jmp returnhere

norpg:
mov byte ptr [rcx+000004DC+2],00
jmp returnhere

exit:
jmp returnhere

"dmc2.exe"+2306C5:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+2306C5:
mov [rcx+000004DC],al
//Alt: db 88 81 DC 04 00 00

dealloc(weaponstore)
unregistersymbol(weaponstore)
</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>27</ID>
                      <Description>"Skip Machine Gun &amp; Rocket Launcher"</Description>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+2306C5) 
label(returnhere)
label(originalcode)
label(nomachinegun)
label(norpg)
label(exit)
alloc(weaponstore,4)
registersymbol(weaponstore)
weaponstore:
  db 0

newmem:
mov [weaponstore],al
cmp byte ptr [weaponstore],03
je norpg
cmp byte ptr [weaponstore],01
je nomachinegun
jmp originalcode

originalcode:
mov [rcx+000004DC],al
jmp returnhere

norpg:
mov byte ptr [rcx+000004DC+2],00
jmp returnhere

nomachinegun:
mov byte ptr [rcx+000004DC+2],02
jmp returnhere

exit:
jmp returnhere

"dmc2.exe"+2306C5:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+2306C5:
mov [rcx+000004DC],al
//Alt: db 88 81 DC 04 00 00

dealloc(weaponstore)
unregistersymbol(weaponstore)
</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>36</ID>
                  <Description>"Debug: Current Gun Equip"</Description>
                  <DropDownList ReadOnly="1" DisplayValueAsItem="1">0:Pistols
1:Machine Gun
2:Shotgun
3:Rocket Launcher
</DropDownList>
                  <VariableType>Byte</VariableType>
                  <Address>dmc2.exe+158A80E </Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>200</ID>
              <Description>"Loadout Hotswapper - Use D-Pad and Right Trigger"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>//Thank you Siyan!
[ENABLE]
aobscanmodule(styleswitchinglol,dmc2.exe,C0 48 89 41 08 48 89 41 10) // should be unique
alloc(newmem,$1000,"dmc2.exe"+19372)
alloc(lastUsedInput,64)
alloc(regAfterBitmask,64)
alloc(allowDodgeOffset,64)
alloc(dodgeOffsetContinueOK,64)
define(CurrentCharacter,dmc2.exe+1588B31)
label(rotateSword)
label(returnhere)
label(finished)
label(testForHold)
label(amuletTestForHold)
label(checkAmuletToRotate)
label(rotateLeftAmulet)
label(rotateRightAmulet)
label(rotateTopAmulet)
label(setRightAmuletToQuick)
label(setLeftAmuletToHealing)
label(setLeftAmuletToOffence)
label(setTopAmuletToFrost)
label(setTopAmuletToElectro)
label(cycleToMerciless)
label(cycleToVendetta)
label(cycleToRebellion)
define(inputpressed,dmc2.exe+7DD68D)
define(CurrentSword,dmc2.exe+158A80F)
registersymbol(inputpressed)
registersymbol(lastUsedInput)
registersymbol(regAfterBitmask)
registersymbol(allowDodgeOffset)
registersymbol(dodgeOffsetContinueOK)

allowDodgeOffset:
db (int)0

lastUsedInput:
dw (int)0

//Check to see if current button input is Right Trigger (Disable Lock-on)
newmem:
//Apply a bitmask to the currently held inputs to get only the first value
push eax
mov eax, [inputpressed-1]
and eax, 0x0000000F
mov [regAfterBitmask], eax
pop eax
//Jump if any combination of the triggers/bumpers also includes RT
cmp byte [regAfterBitmask],02
je testForHold
cmp byte [regAfterBitmask],06
je testForHold
cmp byte [regAfterBitmask],0x0A
je testForHold
cmp byte [regAfterBitmask],0x0F
je testForHold
cmp byte [regAfterBitmask],0x0E
je testForHold
cmp byte [regAfterBitmask],03
je testForHold
cmp byte [regAfterBitmask],07
je testForHold
//Re-do the bitmask for checking D-Pad inputs
push eax
mov eax, [inputpressed]
and eax, 0xFFFFFFF0
mov [regAfterBitmask], eax
pop eax
cmp byte [regAfterBitmask],0x80
je amuletTestForHold
cmp byte [regAfterBitmask],0x10
je amuletTestForHold
cmp byte [regAfterBitmask],0x20
je amuletTestForHold
//dodge offset needs raw value
push eax
mov eax, [inputpressed-1]
and eax, 0x000000FF
mov [regAfterBitmask], eax
pop eax
//Dodge Inputs
cmp byte [regAfterBitmask],0x20
je testForCharacter
cmp byte [regAfterBitmask],0x28
je testForCharacter
//Dodge Offset Inputs (Attack + Dodge [LOCK-ON OK])
cmp byte [regAfterBitmask],0x30
je testForCharacter
cmp byte [regAfterBitmask],0x38
je testForCharacter
jmp returnhere

//Duplicate code from sword switcher
amuletTestForHold:
push eax
mov eax, [lastUsedInput+1]
and eax, 0xFFFFFFF0
mov [regAfterBitmask], eax
pop eax
//check for duplicate d-pad inputs
cmp [regAfterBitmask],0x80
je returnhere
cmp [regAfterBitmask],0x10
je returnhere
cmp [regAfterBitmask],0x20
je returnhere
jmp checkAmuletToRotate

checkAmuletToRotate:
//This is awful. Clean it up later?
//Re-do the bitmask for checking D-Pad inputs
push eax
mov eax, [inputpressed]
and eax, 0xFFFFFFF0
mov [regAfterBitmask], eax
pop eax
cmp byte [regAfterBitmask],0x80
je rotateLeftAmulet
cmp byte [regAfterBitmask],0x10
je rotateTopAmulet
cmp byte [regAfterBitmask],0x20
je rotateRightAmulet
jmp returnhere

//Rotates right amulet between Quick and Aerial hearts.
//Aqua Heart is ignored for obvious reasons.
rotateRightAmulet:
cmp byte ptr [dmc2.exe+158A849], 2
je setRightAmuletToQuick
mov byte ptr [dmc2.exe+158A849], 2
jmp returnhere

setRightAmuletToQuick:
mov byte ptr [dmc2.exe+158A849], 3
jmp returnhere

//Rotates left amulet between Chrono/Healing/Offence.
//Maybe add option to ignore Healing Heart?
rotateLeftAmulet:
cmp byte ptr [dmc2.exe+158A84B], 1
je setLeftAmuletToHealing
cmp byte ptr [dmc2.exe+158A84B], 2
je setLeftAmuletToOffence
mov byte ptr [dmc2.exe+158A84B], 1
jmp returnhere

setLeftAmuletToHealing:
mov byte ptr [dmc2.exe+158A84B], 2
jmp returnhere

setLeftAmuletToOffence:
mov byte ptr [dmc2.exe+158A84B], 3
jmp returnhere

//Rotates top amulet between Flame/Frost/Electro.
rotateTopAmulet:
cmp byte ptr [dmc2.exe+158A84A], 1
je setTopAmuletToFrost
cmp byte ptr [dmc2.exe+158A84A], 2
je setTopAmuletToElectro
mov byte ptr [dmc2.exe+158A84A], 1
jmp returnhere

setTopAmuletToFrost:
mov byte ptr [dmc2.exe+158A84A], 2
jmp returnhere

setTopAmuletToElectro:
mov byte ptr [dmc2.exe+158A84A], 3
jmp returnhere

//Blocks swords rotating by holding button
testForHold:
//Apply a bitmask to the currently held inputs to get only the first value
push eax
mov eax, [lastUsedInput]
and eax, 0x0000000F
mov [regAfterBitmask], eax
pop eax
//messy shit
//Check for duplicate RT inputs
cmp [regAfterBitmask],0x0F
je returnhere
cmp [regAfterBitmask],06
je returnhere
cmp [regAfterBitmask],0x0A
je returnhere
cmp [regAfterBitmask],0x0E
je returnhere
cmp [regAfterBitmask],03
je returnhere
cmp [regAfterBitmask],02
je returnhere
cmp [regAfterBitmask],07
je returnhere
//If no duped inputs, rotate sword
jmp rotateSword

//Rotates sword to next value
rotateSword:
//Ignore this section if playing as Trish
//This avoids a crash if you try to swap her sword
cmp byte ptr [CurrentCharacter], 0x02
je returnhere
//Swap Swords
cmp byte ptr [CurrentSword],00
je cycleToMerciless
cmp byte ptr [CurrentSword],01
je cycleToVendetta
cmp byte ptr [CurrentSword],02
je cycleToRebellion
jmp returnhere

cycleToMerciless:
mov byte ptr [CurrentSword],01
jmp returnhere

cycleToVendetta:
mov byte ptr [CurrentSword],02
jmp returnhere

cycleToRebellion:
mov byte ptr [CurrentSword],00
jmp returnhere

testForCharacter:
//check if dodge offset is enabled
cmp [allowDodgeOffset], 1
jne returnhere
//check if current character is Lucia, otherwise end
//cmp [dmc2.exe+1588B30],0100
//je testForHold_DodgeOffset
//cmp [dmc2.exe+1588B30],0501
//je testForHold_DodgeOffset
//cmp [dmc2.exe+1588B30],0301
//je testForHold_DodgeOffset
//cmp [dmc2.exe+1588B30],0701
//je testForHold_DodgeOffset
jmp testForHold_DodgeOffset

testForHold_DodgeOffset:
//Apply a bitmask to the currently held inputs to get only the first value
push eax
mov eax, [lastUsedInput]
and eax, 0x0000000F
mov [regAfterBitmask], eax
pop eax
//messy shit
//Check for duplicate inputs
//Dodge Offset Input (Attack + Dodge)
cmp byte [regAfterBitmask],0x20
je returnhere
//Free Dodge
cmp byte [regAfterBitmask],0x28
je returnhere
cmp byte [regAfterBitmask],0x30
je returnhere
cmp byte [regAfterBitmask],0x38
je returnhere
jmp tryFreeDodge

tryFreeDodge:
//god i hope the last action ID is updated by now
//lol of course it isnt
//disable dodge offset when in DT
cmp byte ptr [dmc2.exe+158A848],0x1
je returnhere
jmp executeFreeDodge

executeFreeDodge:
mov [dodgeOffsetContinueOK], 0
mov [dmc2.exe+158A714],0x0
//dodge offset needs raw value
push ebx
mov ebx, [inputpressed-1]
and ebx, 0x000000FF
mov [regAfterBitmask], ebx
pop ebx
//Dodge Offset Input (Attack + Dodge)
cmp byte [regAfterBitmask],0x30
je executeDodgeOffset
cmp byte [regAfterBitmask],0x38
je executeDodgeOffset
jmp returnhere

executeDodgeOffset:
mov [dodgeOffsetContinueOK], 0x1
jmp returnhere

returnhere:
  push eax
  mov eax, [inputpressed-1]
  mov [lastUsedInput], eax
  pop eax
  mov [rcx+08],rax
  mov [rcx+10],rax
  jmp finished

styleswitchinglol+01:
jmp newmem
nop
nop
nop
finished:
registersymbol(styleswitchinglol)

[DISABLE]
dealloc(newmem)
dealloc(lastUsedInput)
dealloc(regAfterBitmask)
dealloc(allowDodgeOffset)
dealloc(dodgeOffsetMoveID)
unregistersymbol(lastUsedInput)
unregistersymbol(styleswitchinglol)
unregistersymbol(regAfterBitmask)
unregistersymbol(allowDodgeOffset)
unregistersymbol(dodgeOffsetContinueOK)
unregistersymbol(inputpressed)
styleswitchinglol+01:
  db 48 89 41 08 48 89 41 10

{
// ORIGINAL CODE - INJECTION POINT: "dmc2.exe"+19372

"dmc2.exe"+19367: CC                    -  int 3 
"dmc2.exe"+19368: CC                    -  int 3 
"dmc2.exe"+19369: CC                    -  int 3 
"dmc2.exe"+1936A: CC                    -  int 3 
"dmc2.exe"+1936B: CC                    -  int 3 
"dmc2.exe"+1936C: CC                    -  int 3 
"dmc2.exe"+1936D: CC                    -  int 3 
"dmc2.exe"+1936E: CC                    -  int 3 
"dmc2.exe"+1936F: CC                    -  int 3 
"dmc2.exe"+19370: 33 C0                 -  xor eax,eax
// ---------- INJECTING HERE ----------
"dmc2.exe"+19372: 48 89 41 08           -  mov [rcx+08],rax
"dmc2.exe"+19376: 48 89 41 10           -  mov [rcx+10],rax
// ---------- DONE INJECTING  ----------
"dmc2.exe"+1937A: 48 89 41 18           -  mov [rcx+18],rax
"dmc2.exe"+1937E: 48 89 41 20           -  mov [rcx+20],rax
"dmc2.exe"+19382: 48 89 41 28           -  mov [rcx+28],rax
"dmc2.exe"+19386: 48 89 41 30           -  mov [rcx+30],rax
"dmc2.exe"+1938A: C3                    -  ret 
"dmc2.exe"+1938B: CC                    -  int 3 
"dmc2.exe"+1938C: CC                    -  int 3 
"dmc2.exe"+1938D: CC                    -  int 3 
"dmc2.exe"+1938E: CC                    -  int 3 
"dmc2.exe"+1938F: CC                    -  int 3 
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>214</ID>
                  <Description>"Allow Dodge Cancels"</Description>
                  <DropDownList>1:Enable
0:Disable
</DropDownList>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>4 Bytes</VariableType>
                  <Address>allowDodgeOffset</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>40</ID>
                  <Description>"Dante - Unique Sword Movesets"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"dmc2.exe"+23D547) 
label(returnhere)
label(originalcode)
label(exit)
label(rebellionMoveSwaps)
label(mercilessMoveSwaps)
label(vendettaMoveSwaps)
alloc(moveswapalloc,8)
alloc(previousMoveID,64)
define(CurrentSword,dmc2.exe+158A80F)
registersymbol(previousMoveID)
registersymbol(moveswapalloc)
moveswapalloc:
db 0

newmem:
//Before we do any move swaps, check to see what sword
//is currently equipped so we can declone the swords.
//Rebellion
//update previous move id before it can get changed
//comically stupid workaround for guns getting swapped
push eax
mov eax, [inputpressed-1]
and eax, 0x000000FF
mov [regAfterBitmask], eax
pop eax
cmp byte [regAfterBitmask],0x80
je originalcode
cmp byte [regAfterBitmask],0xC0
je originalcode
cmp byte [regAfterBitmask],0xA0
je originalcode
cmp byte [regAfterBitmask],0x88
je originalcode
push ebx
mov ebx, [moveswapalloc]
mov [previousMoveID], ebx
pop ebx
cmp byte ptr [CurrentSword],00
je rebellionMoveSwaps
//Merciless
cmp byte ptr [CurrentSword],01
je mercilessMoveSwaps
//Vendetta
cmp byte ptr [CurrentSword],02
je vendettaMoveSwaps
//just in case this SOMEHOW breaks
jmp originalcode
//

//Move Swaps Legend:
// ^: Tilt Input
// }: Shotgun String

//Rebellion is pretty good already. Nice blend of range and power.
//Let's give it easier access to some DT moves for DMC1 nostalgia.
//note: cmov doesn't support what we're doing so we need a label for each swap
rebellionMoveSwaps:
mov [moveswapalloc],eax
//1-2^3 --&gt; Million Stabs
cmp [moveswapalloc],0x0000000A
je rebellion_123ClassicMS
cmp [moveswapalloc],0x0000000B
je rebellion_123ClassicMS2
cmp [moveswapalloc],0x0000000C
je rebellion_123ClassicMS3
cmp [moveswapalloc],0x0000000D
je rebellion_123ClassicMS4
cmp [moveswapalloc],0x00000008
je rebellion_123QuickSidewinder
//always end with a jump to originalcode
jmp originalcode

rebellion_123ClassicMS:
//For maximum compatibility, check and see if dante's current action
//corresponds with the actions that can lead into the one being replaced
cmp [previousMoveID], 0x02
jne originalcode
cmp byte ptr [dmc2.exe+158A80E], 3
mov byte ptr [r10+000003EC],0x05
jmp returnhere

rebellion_123ClassicMS2:
cmp [previousMoveID], 0x0A
jne originalcode
mov byte ptr [r10+000003EC],0x05
jmp returnhere

rebellion_123ClassicMS3:
cmp [previousMoveID], 0x0B
jne originalcode
cmp byte ptr [dmc2.exe+158A848],0x01
je originalcode
mov byte ptr [r10+000003EC],0x05
jmp returnhere

rebellion_123ClassicMS4:
cmp [previousMoveID], 0x0C
jne originalcode
cmp byte ptr [dmc2.exe+158A848],0x01
je originalcode
mov byte ptr [r10+000003EC],0x06
jmp returnhere

rebellion_123QuickSidewinder:
cmp [previousMoveID], 0x07
jne originalcode
mov byte ptr [r10+000003EC],0x0D
jmp returnhere

mercilessMoveSwaps:
mov [moveswapalloc],eax
//Round Trip -&gt; Air Combo
cmp [moveswapalloc],0x00000020
je merciless_roundtripAirCombo
cmp [moveswapalloc],0x00000021
je merciless_roundtripAirCombo2
//Gravedigger -&gt; Sidewinder
cmp [moveswapalloc],0x0000000E
je merciless_gravediggerSidewinder
cmp [moveswapalloc],0x00000004
je merciless_overhead
cmp [moveswapalloc],0x00000010
je merciless_smashything
cmp [moveswapalloc],0x00000009
je merciless_millionstabRoundTrip
cmp [moveswapalloc],0x00000001
je merciless_lowstarterSweep
jmp originalcode

merciless_roundtripAirCombo:
mov byte ptr [r10+000003EC],0x0C
jmp returnhere

merciless_roundtripAirCombo2:
mov byte ptr [r10+000003EC],0x0D
jmp returnhere

merciless_gravediggerSidewinder:
cmp [previousMoveID], 0x03
jne originalcode
cmp byte ptr [dmc2.exe+158A848],0x01
je originalcode
mov byte ptr [r10+000003EC],0x0D
jmp returnhere

merciless_overhead:
cmp byte ptr [dmc2.exe+158A848],0x01
jne merciless_overhead_noDT
mov byte ptr [r10+000003EC],0x06
jmp returnhere

merciless_overhead_noDT:
cmp [previousMoveID], 0x03
jne originalcode
mov byte ptr [r10+000003EC],0x10
jmp returnhere

merciless_smashything:
mov byte ptr [r10+000003EC],0x1E
jmp returnhere

merciless_millionstabRoundTrip:
mov byte ptr [r10+000003EC],0x20
jmp returnhere

merciless_lowstarterSweep:
mov byte ptr [r10+000003EC],0x1E
jmp returnhere

vendettaMoveSwaps:
mov [moveswapalloc],eax
cmp [moveswapalloc],0x00000010
je vendetta_123Gravedigger
cmp [moveswapalloc],0x00000011
je vendetta_123GravediggerExtension
cmp [moveswapalloc],0x00000007
je vendetta_123ToDT
cmp [moveswapalloc],0x00000008
je vendetta_123ToDTFinish
cmp [moveswapalloc],0x0000000A
je vendetta_12MillionStabs
cmp [moveswapalloc],0x00000004
je vendetta_1234ShoulderCheck
jmp originalcode

vendetta_123Gravedigger:
mov byte ptr [r10+000003EC],0x0E
jmp returnhere

vendetta_123GravediggerExtension:
mov byte ptr [r10+000003EC],0x0F
jmp returnhere

vendetta_123ToDT:
mov byte ptr [r10+000003EC],0x05
jmp returnhere

vendetta_123ToDTFinish:
cmp [previousMoveID], 0x07
jne originalcode
mov byte ptr [r10+000003EC],0x06
jmp returnhere

vendetta_12MillionStabs:
cmp [previousMoveID], 0x02
jne originalcode
mov byte ptr [r10+000003EC],0x09
jmp returnhere

vendetta_1234ShoulderCheck:
cmp [previousMoveID], 0x03
jne originalcode
mov byte ptr [r10+000003EC],0x1F
jmp returnhere

//the al register holds the ID of the original move being executed.
//by comparing it to a move ID, we can then intercept this call
//and insert a different move ID instead.

originalcode:
mov [r10+000003EC],al
jmp returnhere

exit:
jmp returnhere

"dmc2.exe"+23D547:
jmp newmem
nop
nop
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+23D547:
mov [r10+000003EC],al
//Alt: db 41 88 82 EC 03 00 00

dealloc(moveswapalloc)
dealloc(previousMoveID)
unregistersymbol(previousMoveID)
unregistersymbol(moveswapalloc)
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>211</ID>
                      <Description>"Show Debug Info"</Description>
                      <Options moHideChildren="1"/>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>41</ID>
                          <Description>"Move ID"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>dmc2.exe+158A71c</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>53</ID>
                          <Description>"Move Swap Mem"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <VariableType>4 Bytes</VariableType>
                          <Address>moveswapalloc</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>49</ID>
                          <Description>"move swap alloc"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <VariableType>4 Bytes</VariableType>
                          <Address>moveswapalloc</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>210</ID>
                          <Description>"premoveid"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>previousMoveID</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>217</ID>
                  <Description>"Lucia - Unique Sword Movesets"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"dmc2.exe"+23D547) 
label(returnhere)
label(originalcode)
label(exit)
alloc(moveswapalloc,8)
alloc(previousMoveID,64)
define(CurrentSword,dmc2.exe+158A80F)
registersymbol(previousMoveID)
registersymbol(moveswapalloc)
moveswapalloc:
db 0

newmem:
//Before we do any move swaps, check to see what sword
//is currently equipped so we can declone the swords.
//
//Need to change the moveID in ebx directly
//so Dodge Offset doesn't need hardcoding for each sword
//
//oh how wrong i was
//
//Check for Dodge Offset
//comically stupid workaround for guns getting swapped
push eax
mov eax, [inputpressed-1]
and eax, 0x000000FF
mov [regAfterBitmask], eax
pop eax
cmp byte [regAfterBitmask],0x80
je originalcode
cmp byte [regAfterBitmask],0xC0
je originalcode
cmp byte [regAfterBitmask],0xA0
je originalcode
cmp byte [regAfterBitmask],0x88
je originalcode
cmp [dodgeOffsetContinueOK], 1
je dodgeOffsetOverride
push ebx
mov ebx, [moveswapalloc]
mov [previousMoveID], ebx
pop ebx
cmp byte ptr [CurrentSword],00
je cutlaseerMoveSwaps
cmp byte ptr [CurrentSword],01
je klyamoorMoveSwaps
cmp byte ptr [CurrentSword],02
je zambakMoveSwaps
//just in case this SOMEHOW breaks
jmp originalcode
//

//replaces the incoming moveID with the
//last one read by moveswapalloc,
//then calls the original moveswap code (yes it's recursive im sorry)
dodgeOffsetOverride:
//Ignore Dodge Offset if player is in standing/running state
mov [dodgeOffsetContinueOK],0
push eax
mov eax, [dmc2.exe+158A71C]
cmp eax, 0x00000000
pop eax
jne newmem
//cmp byte ptr [CurrentSword],00
jmp cutlaseerDodgeOffset
//cmp byte ptr [CurrentSword],01
//je klyamoorDodgeOffset
//cmp byte ptr [CurrentSword],02
//je zambakDodgeOffset
jmp newmem

klyamoorDodgeOffset:
//Jab 1 -&gt; Jab 2
cmp [moveswapalloc], 0x00000000
je klj1j2
//Jab 2 -&gt; Jab 3
cmp [moveswapalloc], 0x00000002
je klj2j3
//TiltJab 1 -&gt; TiltJab2
cmp [moveswapalloc], 0x00000001
je kltj1tj2
//TiltJab 2 -&gt; TiltJab3
cmp [moveswapalloc], 0x00000009
je kltj2tj3
mov al, [moveswapalloc]
jmp newmem

//klya j1 to j2
klj1j2:
//check if tilt input, if so then go to tilt 2
mov [moveswapalloc], eax
cmp [moveswapalloc], 0x00000001
je kltj1tj2
mov [moveswapalloc], 0x00000002
mov al, [moveswapalloc]
jmp newmem

//klya j2 to j3
klj2j3:
mov [moveswapalloc], 0x00000003
mov al, [moveswapalloc]
jmp newmem

//klya tilt j1 to tilt j2
kltj1tj2:
//check if non-tilt input, if so then go to non-tilt 2
mov [moveswapalloc], eax
cmp [moveswapalloc], 0x00000000
je klj1j2
//replace with tj2
mov [moveswapalloc], 0x00000009
mov al, [moveswapalloc]
jmp newmem

//klay tilt j2 to tilt j3
kltj2tj3:
mov [moveswapalloc], 0x0000000A
mov al, [moveswapalloc]
jmp newmem

cutlaseerDodgeOffset:
//Jab 1 -&gt; Jab 2
cmp [moveswapalloc], 0x00000000
je csj1j2
//Jab 2 -&gt; Jab 3
cmp [moveswapalloc], 0x00000002
je csj2j3
//TiltJab 1 -&gt; TiltJab2
cmp [moveswapalloc], 0x00000001
je cstj1tj2
//TiltJab 2 -&gt; TiltJab3
cmp [moveswapalloc], 0x00000009
je cstj2tj3
mov al, [moveswapalloc]
jmp newmem

//cutlass j1 to j2
csj1j2:
//check if tilt input, if so then go to tilt 2
mov [moveswapalloc], eax
cmp [moveswapalloc], 0x00000001
je cstj1tj2
mov [moveswapalloc], 0x00000002
mov al, [moveswapalloc]
jmp newmem

//cutlass j2 to j3
csj2j3:
mov [moveswapalloc], 0x00000003
mov al, [moveswapalloc]
jmp newmem

//cutlass tilt j1 to tilt j2
cstj1tj2:
//check if non-tilt input, if so then go to non-tilt 2
mov [moveswapalloc], eax
cmp [moveswapalloc], 0x00000000
je csj1j2
//replace with tj2
mov [moveswapalloc], 0x00000009
mov al, [moveswapalloc]
jmp newmem

//cutlass tilt j2 to tilt j3
cstj2tj3:
mov [moveswapalloc], 0x0000000A
mov al, [moveswapalloc]
jmp newmem

zambakDodgeOffset:

//Move Swaps Legend:
// ^: Tilt Input

//Cutlaseer is pretty strong as-is.
//note: cmov doesn't support what we're doing so we need a label for each swap
cutlaseerMoveSwaps:
mov [moveswapalloc],eax
cmp [moveswapalloc],0x00000010
je cutlaseer_airraveHelmBreaker
//always end with a jump to originalcode
jmp originalcode

cutlaseer_airraveHelmBreaker:
mov byte ptr [r10+00003EC],0x13
jmp originalcode

//Klyamoor is pretty useless for Lucia. Let's give it a
//similar treatment to Merciless and make it a light-weight
//but low damage alternative to Cutlaseer.

//C
klyamoorMoveSwaps:
mov [moveswapalloc],eax
cmp [moveswapalloc],0x0000000A
je klyamoor_tilt3topspin
cmp [moveswapalloc],0x00000009
je klyamoor_tilt2standard2
cmp [moveswapalloc],0x0000000E
je klyamoor_stingerRapidFireKick
cmp [moveswapalloc],0x00000002
je klyamoor_jab2dtdouble
jmp originalcode

klyamoor_stingerRapidFireKick:
mov byte ptr [r10+000003EC],0x16
jmp returnhere

klyamoor_tilt3topspin:
mov byte ptr [r10+000003EC],0x17
jmp returnhere

klyamoor_tilt2standard2:
mov byte ptr [r10+000003EC],0x2
jmp returnhere

klyamoor_jab2dtdouble:
mov byte ptr [r10+000003EC],0xC
jmp returnhere


//Give Zambak the DT moveset outside of DT, and
//remove most of the kicks for increased damage.
//18, 19
zambakMoveSwaps:
mov [moveswapalloc],eax
cmp [moveswapalloc],0x0000000E
je zambak_stingerCTDoubleSlash
cmp [moveswapalloc],0x00000009
je zambak_12Overhead
cmp [moveswapalloc],0x0000000A
je zambak_123RapidSlash
cmp [moveswapalloc],0x00000004
je zambak_12doublekick
cmp [moveswapalloc],0x00000010
je zambak_airraveAirStinger
cmp [moveswapalloc],0x00000007
je zambak_dtrapidAerialCross1
cmp [moveswapalloc],0x00000008
je zambak_dtrapidfinishAerialCross2
jmp originalcode

zambak_dtrapidAerialCross1:
cmp byte ptr [dmc2.exe+158A848],0x01
jne originalcode
mov byte ptr [r10+000003EC],0x18
jmp returnhere

zambak_dtrapidfinishAerialCross2:
cmp byte ptr [dmc2.exe+158A848],0x01
jne originalcode
mov byte ptr [r10+000003EC],0x19
jmp returnhere

zambak_stingerCTDoubleSlash:
mov byte ptr [r10+000003EC],0x06
jmp returnhere

zambak_12Overhead:
mov byte ptr [r10+000003EC],0x0B
jmp returnhere

zambak_123RapidSlash:
mov byte ptr [r10+000003EC],0x0D
jmp returnhere

zambak_12doublekick:
mov byte ptr [r10+000003EC],0x07
jmp returnhere

zambak_airraveAirStinger:
mov byte ptr [r10+000003EC],0x12
jmp returnhere



//the al register holds the ID of the original move being executed.
//by comparing it to a move ID, we can then intercept this call
//and insert a different move ID instead.

originalcode:
mov [r10+000003EC],al
jmp returnhere

exit:
jmp returnhere

"dmc2.exe"+23D547:
jmp newmem
nop
nop
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+23D547:
mov [r10+000003EC],al
//Alt: db 41 88 82 EC 03 00 00

dealloc(moveswapalloc)
dealloc(previousMoveID)
unregistersymbol(previousMoveID)
unregistersymbol(moveswapalloc)
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>223</ID>
                      <Description>"Allow Dodge Offset?"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Byte</VariableType>
                      <Address>dodgeOffsetContinueOK</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>218</ID>
                      <Description>"Show Debug Info"</Description>
                      <Options moHideChildren="1"/>
                      <GroupHeader>1</GroupHeader>
                      <CheatEntries>
                        <CheatEntry>
                          <ID>219</ID>
                          <Description>"Move ID"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>dmc2.exe+158A71C</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>220</ID>
                          <Description>"Move Swap Mem"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <VariableType>4 Bytes</VariableType>
                          <Address>moveswapalloc</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>221</ID>
                          <Description>"move swap alloc"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <VariableType>4 Bytes</VariableType>
                          <Address>moveswapalloc</Address>
                        </CheatEntry>
                        <CheatEntry>
                          <ID>222</ID>
                          <Description>"premoveid"</Description>
                          <ShowAsHex>1</ShowAsHex>
                          <ShowAsSigned>0</ShowAsSigned>
                          <VariableType>4 Bytes</VariableType>
                          <Address>previousMoveID</Address>
                        </CheatEntry>
                      </CheatEntries>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>203</ID>
                  <Description>"Show Loadout Debug Info"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>197</ID>
                      <Description>"Equipped Sword"</Description>
                      <DropDownList>0:Rebellion
1:Merciless
2:Vendetta
</DropDownList>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Byte</VariableType>
                      <Address>dmc2.exe+158A80F</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>201</ID>
                      <Description>"DEBUG: LAST INPUT"</Description>
                      <ShowAsHex>1</ShowAsHex>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>4 Bytes</VariableType>
                      <Address>lastUsedInput</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>202</ID>
                      <Description>"regafterbitmask"</Description>
                      <ShowAsHex>1</ShowAsHex>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>4 Bytes</VariableType>
                      <Address>regAfterBitmask</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>37</ID>
                      <Description>"InputPressed"</Description>
                      <ShowAsHex>1</ShowAsHex>
                      <VariableType>4 Bytes</VariableType>
                      <Address>dmc2.exe+7DD68C</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>29</ID>
                      <Description>"Amulet Equip 1"</Description>
                      <DropDownList ReadOnly="1" DisplayValueAsItem="1">2:Aerial Heart
3:Quick Heart
</DropDownList>
                      <VariableType>Byte</VariableType>
                      <Address>dmc2.exe+158A849</Address>
                      <Hotkeys>
                        <Hotkey>
                          <Action>Toggle Activation</Action>
                          <Keys/>
                          <ID>0</ID>
                        </Hotkey>
                        <Hotkey>
                          <Action>Set Value</Action>
                          <Keys>
                            <Key>112</Key>
                          </Keys>
                          <Value>1</Value>
                          <ID>1</ID>
                        </Hotkey>
                      </Hotkeys>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>30</ID>
                      <Description>"Amulet Equip 2"</Description>
                      <DropDownList ReadOnly="1" DisplayValueAsItem="1">1:Flame Heart
2:Frost Heart
3:Electro Heart
</DropDownList>
                      <VariableType>Byte</VariableType>
                      <Address>dmc2.exe+158A84A</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>31</ID>
                      <Description>"Amulet Equip 3"</Description>
                      <DropDownList ReadOnly="1" DisplayValueAsItem="1">1:Chrono Heart
2:Healing Heart
3:Offence Heart
</DropDownList>
                      <VariableType>Byte</VariableType>
                      <Address>dmc2.exe+158A84B</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1042</ID>
                      <Description>"char"</Description>
                      <ShowAsHex>1</ShowAsHex>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Byte</VariableType>
                      <Address>dmc2.exe+1588B31</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>179</ID>
          <Description>"Style Points/Ranking Settings"</Description>
          <Options moHideChildren="1"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>174</ID>
              <Description>"Modern Style Loss System"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//Reworks aspects of the Style system to match DMC3/4/5's system.
alloc(newmem,2048,"dmc2.exe"+5A4CF)
alloc(newmem02,2048,"dmc2.exe"+23206E)
alloc(stylelosshandler,2048,"dmc2.exe"+23DF64)
//
label(returnhere)
label(hitlossdone)
label(originalcode)
label(exit)
label(decaycomp)
label(removeStyleRating)
label(styletest)
label(setStyleRatingToA)
label(setStyleRatingToB)
label(setStyleRatingToC)
label(setStyleRatingToD)
label(resetStyleDecayTimer)
//
alloc(stylelosstimer,64)
alloc(xmholder,64)
alloc(onhitstylelossscalar,64)
alloc(styleptstoloseondecay,64)
//
registersymbol(stylelosstimer)
registersymbol(onhitstylelossscalar)
registersymbol(styleptstoloseondecay)
//
stylelosstimer:
dd (float)110
xmholder:
dd (float)0
onhitstylelossscalar:
dd (float)2.0 //default: lose half of your style points
//don't go below 1.0 or else you gain style for being hit

newmem: //Overrides the game's original starting timer for style decay.
//For some reason the game uses a float here.
movss [xmholder],xmm0
movss xmm0,[stylelosstimer]
movss [r8+00000634],xmm0
movss xmm0,[xmholder]
jmp exit
//
//
newmem02: //On-Hit Style Loss overrides
push eax
xor eax,eax
mov eax, ["dmc2.exe"+158A968] //places player's style points in eax
cvtsi2ss xmm0, eax
divss xmm0, [onhitstylelossscalar] //Divides style points by scalar specified in CT
cvttss2si eax,xmm0
cmp eax, 5DC
jle hlpRemoveStyle
mov ["dmc2.exe"+158A968], eax
pop eax
//Reset style decay timer to what's specified in CT
movss [xmholder],xmm0
movss xmm0,[stylelosstimer]
movss [dmc2.exe+158A964],xmm0
movss xmm0,[xmholder]
jmp hitlossdone
//
//
stylelosshandler: //Custom behavior when the style loss timer runs out
//Remove all style pts if timer expires on D rank
push eax
xor eax, eax
//mov eax, [rbx+00000638]
//mov [styleptstoloseondecay], eax
mov ax, 4E20
//mov [styleptstoloseondecay], 20000
//Modern DMC system from here, lose 1 rank every time timer hits 0
cmp dword ["dmc2.exe"+158A968], eax
jge setStyleRatingToA
mov ax, 3A98
cmp dword ["dmc2.exe"+158A968], eax
jge setStyleRatingToB
mov ax, 2710
cmp dword ["dmc2.exe"+158A968], eax
jge setStyleRatingToC
mov ax, 1388
cmp dword ["dmc2.exe"+158A968], eax
jge setStyleRatingToD
pop eax
jmp removeStyleRating
//done
jmp decaycomp
//
//
resetStyleDecayTimer:
movss [xmholder],xmm0
movss xmm0,[stylelosstimer]
movss [dmc2.exe+158A964],xmm0
movss xmm0,[xmholder]
ret
//
//
hlpRemoveStyle:
pop eax
mov ["dmc2.exe"+158A968], 0
jmp hitlossdone
//
//
removeStyleRating: //helper function to reset player's style using vanilla call
mov [dmc2.exe+158A968], 0
jmp decaycomp
//
//
setStyleRatingToA: //S returns to A rank
pop eax
mov [styleptstoloseondecay], 10F2C
mov dword [dmc2.exe+158A968], 3A98
movss [xmholder],xmm0
movss xmm0,[stylelosstimer]
movss [dmc2.exe+158A964],xmm0
movss xmm0,[xmholder]
jmp decaycomp
//
//
setStyleRatingToB: //S returns to A rank
pop eax
mov [styleptstoloseondecay], 4
mov dword [dmc2.exe+158A968], 2710
movss [xmholder],xmm0
movss xmm0,[stylelosstimer]
movss [dmc2.exe+158A964],xmm0
movss xmm0,[xmholder]
jmp decaycomp
//
//
setStyleRatingToC: //S returns to A rank
pop eax
mov [styleptstoloseondecay], 3
mov dword [dmc2.exe+158A968], 1388
movss [xmholder],xmm0
movss xmm0,[stylelosstimer]
movss [dmc2.exe+158A964],xmm0
movss xmm0,[xmholder]
jmp decaycomp
//
//
setStyleRatingToD: //S returns to A rank
pop eax
mov [styleptstoloseondecay], 2
mov dword [dmc2.exe+158A968], 5DC
movss [xmholder],xmm0
movss xmm0,[stylelosstimer]
movss [dmc2.exe+158A964],xmm0
movss xmm0,[xmholder]
jmp decaycomp
//
//
styletest:
mov [rbx+00000638],esi
//
//
originalcode: //original timer code
mov [r8+00000634],42DC0000 //default timer value is 110.0
//
//
exit:
jmp returnhere
//
//
"dmc2.exe"+5A4CF: //style point timer
jmp newmem
nop 6
returnhere:
//
//
"dmc2.exe"+23206E: //on-hit style loss
jmp newmem02
nop 5
hitlossdone:
//
//
"dmc2.exe"+23DF64: //called when style point timer empties
//mov [rbx+00000638],esi
jmp stylelosshandler
nop
decaycomp:
//
//
[DISABLE]
dealloc(newmem)
dealloc(newmem02)
dealloc(stylelosshandler)
dealloc(stylelosstimer)
dealloc(xmholder)
dealloc(onhitstylelossscalar)
dealloc(styleptstoloseondecay)
unregistersymbol(stylelosstimer)
unregistersymbol(onhitstylelossscalar)
unregistersymbol(styleptstoloseondecay)
"dmc2.exe"+5a4cf:
mov [r8+00000634],42DC0000
"dmc2.exe"+23206E:
mov [rbx+00000634],3A83126F
"dmc2.exe"+23DF64:
mov [rbx+00000638],esi
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>175</ID>
                  <Description>"Time Before a Style Rank Is Lost"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>stylelosstimer</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>176</ID>
                  <Description>"Divide Style Points by (value) When Hit"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>onhitstylelossscalar</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>177</ID>
                  <Description>"DEBUG: Last style rank when timer hit 0"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>2 Bytes</VariableType>
                  <Address>styleptstoloseondecay</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>178</ID>
                  <Description>"DEBUG: Time Remaining in Combo"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>dmc2.exe+158A964</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>165</ID>
                  <Description>"DEBUG: Style Pts HUD Time"</Description>
                  <VariableType>2 Bytes</VariableType>
                  <Address>dmc2.exe+158A966</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>163</ID>
              <Description>"Style Point Gain Multiplier"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+5A4BC)
label(returnhere)
label(originalcode)
label(exit)
alloc(styleptsscalar,64)
registersymbol(styleptsscalar)
styleptsscalar:
dd (float)1.0

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
mulss xmm1,[styleptsscalar]
cvttss2si eax,xmm1
test r10d,r10d

exit:
jmp returnhere

"dmc2.exe"+5A4BC:
jmp newmem
nop 2
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(styleptsscalar)
"dmc2.exe"+5a4bc:
cvttss2si eax,xmm1
test r10d,r10d
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>164</ID>
                  <Description>"Style Points Gain Multiplier Value"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>styleptsscalar</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>10</ID>
              <Description>"Style Pts Never Decay [CONFLICTS WITH MODERN STYLE LOSS SYSTEM]"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
dmc2.exe+23DF64:
nop 6

[DISABLE]
dmc2.exe+23DF64:
mov [rbx+00000638],esi
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>8</ID>
              <Description>"Current Style Points"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>dmc2.exe+158A968</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>157</ID>
          <Description>"Player/Enemy Damage Settings"</Description>
          <Options moHideChildren="1"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>3</ID>
              <Description>"Everyone Takes 0 Damage"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
dmc2.exe+54314:
nop
nop
nop
nop
nop
nop
nop

dmc2.exe+5431E:
nop
nop
nop
nop
nop
nop
nop

dmc2.exe+54346:
nop
nop
nop
nop
nop
nop
nop

[DISABLE]
dmc2.exe+54314:
mov [rdi+00000142],ax

dmc2.exe+5431E:
mov [rdi+00000140],ax

dmc2.exe+54346:
mov [rdi+00000140],ax
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>115</ID>
                  <Description>"Player HP (value /20,000)"</Description>
                  <VariableType>2 Bytes</VariableType>
                  <Address>dmc2.exe+158A470</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>130</ID>
                  <Description>"1 hit kill"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
dmc2.exe+9E8B3:
nop 2

[DISABLE]
dmc2.exe+9E8B3:
jg dmc2.exe+9E8E5
</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>152</ID>
              <Description>"Damage Dealt/Taken Modifier"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+5431B)
alloc(damagemult,64)
alloc(enemydamagemult,64)
alloc(muststylethresh,64)
alloc(enemydeathfixer,64)
alloc(bayoinstakilltoggle,64)
alloc(incomingdamage,64)
alloc(weapondamagemult,64)
define(CurrentSword,dmc2.exe+158A80F)
registersymbol(weapondamagemult)
weapondamagemult:
dd (float)1.0
merciless_weapondamagemult:
dd (float)1.0
vendetta_weapondamagemult:
dd (float)1.0
label(returnhere)
label(originalcode)
label(exit)
label(enemycase)
label(bayohealth)
label(saveplayer)
label(bayohealthfailcheck)
registersymbol(damagemult)
registersymbol(enemydamagemult)
registersymbol(muststylethresh)
registersymbol(bayoinstakilltoggle)
registersymbol(incomingdamage)
damagemult:
dd (float)1.0

enemydamagemult:
dd (float)1.0

enemydeathfixer:
dd (float)1.0

bayoinstakilltoggle:
dd (int)1

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
//before we do ANYTHING, check if this is applying damage and not healing
cmp si, 0
jnle originalcode //jump to original code if this is healing something
//overrides go here
//test if the target's health is the player's health
push ebx
mov ebx,[rdi+00000140]
cmp ebx, ["dmc2.exe"+158a470]
pop ebx
jne enemycase //jump to enemy damage case if values don't match
//prepare ecx for float mult
push eax
xor eax, eax //clear eax
neg si
mov ax, si //move incoming damage to cx register
cvtsi2ss xmm0, eax //convert incoming damage to float
mulss xmm0, [damagemult] //multiply incoming damage by player damage modifier
cvttss2si eax, xmm0 //convert to int again
neg eax
mov si, ax
pop eax
cmp [bayoinstakilltoggle], 1 //survive with 1 hp if health &gt; 1 when taking lethal damage
je bayohealth
add ax, si //continue with original code
mov [rdi+00000140],ax
jmp exit

enemycase:
push ebx
mov ebx,[dmc2.exe+158A968]
cmp ebx, [muststylethresh]
pop ebx
jnge exit //ignore damage dealt if player has fewer than specified style pts
//apply outgoing damage modifiers
cmp eax, F //fixes enemies not dying if outgoing damage &lt; 1.0
jle enemyoverride
push eax
xor eax, eax //clear eax
neg si
mov ax, si //move incoming damage to ax register
cvtsi2ss xmm0, eax //convert incoming damage to float
mulss xmm0, [enemydamagemult] //multiply incoming damage by player damage modifier
cmp byte ptr [CurrentSword],00
je rebellionDamage
//Merciless
cmp byte ptr [CurrentSword],01
je mercilessDamage
//Vendetta
cmp byte ptr [CurrentSword],02
je vendettaDamage
cvttss2si eax, xmm0 //convert to int again
neg eax
mov si, ax
pop eax
add ax, si
mov [rdi+00000140],ax
jmp exit

rebellionDamage:
mulss xmm0, [weapondamagemult]
jmp convertFloatToInt

mercilessDamage:
mulss xmm0, [merciless_weapondamagemult]
jmp convertFloatToInt

vendettaDamage:
mulss xmm0, [vendetta_weapondamagemult]
jmp convertFloatToInt

convertFloatToInt:
cvttss2si eax, xmm0 //convert to int again
neg eax
mov si, ax
pop eax
add ax, si
mov [rdi+00000140],ax
jmp exit

enemyoverride:
push eax
xor eax, eax //clear eax
neg si
mov ax, si //move incoming damage to ax register
cvtsi2ss xmm0, eax //convert incoming damage to float
mulss xmm0, [enemydeathfixer] //multiply incoming damage by player damage modifier
cvttss2si eax, xmm0 //convert to int again
neg eax
mov si, ax
pop eax
add ax, si
mov [rdi+00000140],ax
jmp exit

bayohealth:
push ebx
xor ebx, ebx
mov ebx, eax
add bx, si
cmp bx, ["dmc2.exe"+158a470] //checks if any damage is occurring
jge bayohealthfailcheck
mov [incomingdamage], bx
cmp bx, 1 //checks if incoming damage &gt;= player's health
pop ebx
//mov [incomingdamage], 776
jnle originalcode
push ebx
xor ebx, ebx
mov ebx, ["dmc2.exe"+158a470]
cmp bx, 1 //check if player's health &gt; 1
pop ebx
jg saveplayer
jmp originalcode

saveplayer:
mov [incomingdamage], 5
mov [rdi+00000140], 1 //sets player's health to 1
jmp exit

bayohealthfailcheck:
pop ebx
jmp originalcode

originalcode:
add ax, si
mov [rdi+00000140],ax
jmp exit

exit:
jmp returnhere

"dmc2.exe"+5431B:
jmp newmem
nop 5
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(damagemult)
dealloc(muststylethresh)
dealloc(incomingdamage)
dealloc(bayoinstakilltoggle)
dealloc(weapondamagemult)
unregistersymbol(damagemult)
unregistersymbol(enemydamagemult)
unregistersymbol(muststylethresh)
unregistersymbol(incomingdamage)
unregistersymbol(bayoinstakilltoggle)
unregistersymbol(weapondamagemult)
"dmc2.exe"+5431B:
add ax,si
mov [rdi+00000140],ax	
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>153</ID>
                  <Description>"Damage Taken Multiplier"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>damagemult</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>154</ID>
                  <Description>"Damage Dealt Multiplier"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>enemydamagemult</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>181</ID>
                  <Description>"Bayonetta Magic Pixel"</Description>
                  <DropDownList>0:Disable
1:Enable
</DropDownList>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>4 Bytes</VariableType>
                  <Address>bayoinstakilltoggle</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>158</ID>
                  <Description>"NOTE: Must Style Mode requires Damage Dealt/Taken Modifier!!"</Description>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>155</ID>
                      <Description>"Must Style Mode (See Values)"</Description>
                      <DropDownList>0:Disable Must Style
1500:[D]on't Worry
5000:[C]ome On!
10000:[B]ingo!
15000:[A]re You Ready?
20000:[S]howtime!!
</DropDownList>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>2 Bytes</VariableType>
                      <Address>muststylethresh</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>248</ID>
                  <Description>"Weapon-Specific Multipliers"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>247</ID>
                      <Description>"Rebellion/Cutlaseer/Sparda Damage"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>weapondamagemult</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>249</ID>
                      <Description>"Merciless/Klyamoor Damage"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>weapondamagemult+4</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>250</ID>
                      <Description>"Vendetta / Zambak Damage"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>weapondamagemult+8</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>182</ID>
              <Description>"Watch Enemy Stats"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : dmc2.exe
  Version: 
  Date   : 2022-02-10
  Author : SSSiy

  This script does blah blah blah
}

[ENABLE]
aobscanmodule(WatchEnemyStats,dmc2.exe,0F B7 81 44 01 00 00 66 89 83) // should be unique
alloc(newmem,$1000,WatchEnemyStats)
label(code)
label(return)
registersymbol(enemyStats)

newmem:
enemyStats:
dw 00 // Enemy HP
dw 00 // Enemy Stun
dw 00
dw 00

code:
  movzx eax, word ptr [rcx+140]
  mov [enemyStats], ax
  movzx eax, word ptr [rcx+146]
  mov [enemyStats+2], ax
  movzx eax, word ptr [rcx+00000144]
  jmp return

WatchEnemyStats:
  jmp code
  nop 2
return:
registersymbol(WatchEnemyStats)

[DISABLE]
WatchEnemyStats:
  db 0F B7 81 44 01 00 00
unregistersymbol(WatchEnemyStats)
dealloc(newmem)
unregistersymbol(enemyStats)
{
// ORIGINAL CODE - INJECTION POINT: dmc2.exe+66384

dmc2.exe+66356: 7D 0C                 - jnl dmc2.exe+66364
dmc2.exe+66358: 48 8B 89 80 00 00 00  - mov rcx,[rcx+00000080]
dmc2.exe+6635F: 48 85 C9              - test rcx,rcx
dmc2.exe+66362: 74 52                 - je dmc2.exe+663B6
dmc2.exe+66364: 48 8B 05 3D AC 5C 01  - mov rax,[dmc2.exe+1630FA8]
dmc2.exe+6636B: 48 3B 88 88 00 00 00  - cmp rcx,[rax+00000088]
dmc2.exe+66372: 74 5E                 - je dmc2.exe+663D2
dmc2.exe+66374: 80 3D 25 AC 5C 01 00  - cmp byte ptr [dmc2.exe+1630FA0],00
dmc2.exe+6637B: 0F 94 C0              - sete al
dmc2.exe+6637E: 88 83 52 01 00 00     - mov [rbx+00000152],al
// ---------- INJECTING HERE ----------
dmc2.exe+66384: 0F B7 81 44 01 00 00  - movzx eax,word ptr [rcx+00000144]
// ---------- DONE INJECTING  ----------
dmc2.exe+6638B: 66 89 83 56 01 00 00  - mov [rbx+00000156],ax
dmc2.exe+66392: 0F B7 81 40 01 00 00  - movzx eax,word ptr [rcx+00000140]
dmc2.exe+66399: 66 89 83 54 01 00 00  - mov [rbx+00000154],ax
dmc2.exe+663A0: C6 83 53 01 00 00 80  - mov byte ptr [rbx+00000153],-80
dmc2.exe+663A7: 80 4B 07 01           - or byte ptr [rbx+07],01
dmc2.exe+663AB: 48 8B 5C 24 30        - mov rbx,[rsp+30]
dmc2.exe+663B0: 48 83 C4 20           - add rsp,20
dmc2.exe+663B4: 5F                    - pop rdi
dmc2.exe+663B5: C3                    - ret 
dmc2.exe+663B6: 0F B6 83 53 01 00 00  - movzx eax,byte ptr [rbx+00000153]
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>183</ID>
                  <Description>"Enemy HP"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>2 Bytes</VariableType>
                  <Address>enemyStats</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>184</ID>
                  <Description>"Enemy Stun"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>2 Bytes</VariableType>
                  <Address>enemyStats+2</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>187</ID>
              <Description>"Player/Enemy Stun Settings"</Description>
              <Options moHideChildren="1"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>188</ID>
                  <Description>"Adjustable Enemy Stun"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+5872C)
alloc(stunmult,64)
alloc(handgunnerf,64)
alloc(dtstunmult,64)
label(returnhere)
label(originalcode)
label(exit)
label(movespecificstun)
label(stunmodifier)
label(dtstunmodifier)
registersymbol(stunmult)
registersymbol(handgunnerf)
registersymbol(dtstunmult)
stunmult:
dd (float)1.0

handgunnerf:
dd (float)1.0

dtstunmult:
dd (float)1.0

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
//check if this is hitting the player
//dont think a scalar for that is needed, everything breaks armor in like 1 hit
push ebx
mov ebx, [rcx+00000146]
cmp ebx, [dmc2.exe+158A476]
pop ebx
je originalcode
//check if current moveID is firing handguns
//if true, jump to handgun nerf
push ebx
mov ebx, [dmc2.exe+158A71C]
cmp ebx, 0x00000300
je movespecificstun
cmp ebx, 0x00000202
je movespecificstun
pop ebx
//check if player is in DT
cmp byte ptr [dmc2.exe+158A848],1
je dtstunmodifier
cmp byte ptr [dmc2.exe+158A848],2
je dtstunmodifier
jmp stunmodifier

stunmodifier:
cvtsi2ss xmm0, eax
mulss xmm0, [stunmult]
cvttss2si eax, xmm0
sub [rcx+00000146],ax
jmp exit

dtstunmodifier:
cvtsi2ss xmm0, eax
mulss xmm0, [dtstunmult]
cvttss2si eax, xmm0
sub [rcx+00000146],ax
jmp exit

//allows user to set special stun multiplier for the handguns
movespecificstun:
pop ebx
cmp [handgunnerf],1.0
je stunmodifier
cvtsi2ss xmm0, eax
mulss xmm0, [handgunnerf]
cvttss2si eax, xmm0
sub [rcx+00000146],ax
jmp exit

//incoming stun is in RAX
//need to intercept it and apply scalar
//optional: ignore scalar if in handguns action?
originalcode:
sub [rcx+00000146],ax
jmp exit

exit:
jmp returnhere

"dmc2.exe"+5872C:
jmp newmem
nop 2
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(stunmult)
dealloc(handgunnerf)
dealloc(dtstunmult)
unregistersymbol(stunmult)
unregistersymbol(handgunnerf)
unregistersymbol(dtstunmult)
"dmc2.exe"+5872C:
sub [rcx+00000146],ax

</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>190</ID>
                      <Description>"Stun Multiplier"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>stunmult</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>193</ID>
                      <Description>"DT Stun Multiplier"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>dtstunmult</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>189</ID>
                      <Description>"OPTIONAL: Handgun Stun Multiplier"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>handgunnerf</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>195</ID>
                  <Description>"Adjustable Enemy DT Armor Bonus"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+A4B28)
alloc(enemyDTArmorBonus,64)
alloc(restorearmorconst,64)
label(returnhere)
label(originalcode)
label(exit)
registersymbol(enemyDTArmorBonus)

restorearmorconst:
dd (float)0.1

enemyDTArmorBonus:
dd (float)3

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cvtsi2ss xmm0, ecx
//Divide by 10 to restore enemy's original armor value
mulss xmm0, [restorearmorconst]
//Apply user's specified armor bonus
mulss xmm0, [enemyDTArmorBonus]
cvttss2si ecx, xmm0
mov [rbx+00000146],cx
//This second address is the value the enemy's armor resets to after recovering
mov [rbx+00000148],cx
jmp exit

originalcode:
mov [rbx+00000146],cx

exit:
jmp returnhere

"dmc2.exe"+A4B28:
jmp newmem
nop 2
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(enemyDTArmorBonus)
dealloc(restorearmorconst)
unregistersymbol(enemyDTArmorBonus)

"dmc2.exe"+A4B28:
mov [rbx+00000146],cx
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>196</ID>
                      <Description>"Enemy DT Armor Multiplier"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>enemyDTArmorBonus</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>185</ID>
                  <Description>"Always Stun Enemy"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{ Game   : dmc2.exe
  Version: 
  Date   : 2022-02-10
  Author : SSSiy

  This script does blah blah blah
}

[ENABLE]
aobscanmodule(NoDTArmour,dmc2.exe,66 44 39 B1 46 01 00 00) // should be unique
alloc(newmem,$1000,NoDTArmour)
label(code)
label(return)

newmem:

code:
  cmp [rcx+00000146],r14w
  //jg dmc2.exe+58747
  jmp return

NoDTArmour:
  jmp newmem
  nop 5
return:
registersymbol(NoDTArmour)

[DISABLE]
NoDTArmour:
  db 66 44 39 B1 46 01 00 00 7F 0A
unregistersymbol(NoDTArmour)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: dmc2.exe+58733

dmc2.exe+58714: 75 05                    - jne dmc2.exe+5871B
dmc2.exe+58716: 41 8B C6                 - mov eax,r14d
dmc2.exe+58719: EB 11                    - jmp dmc2.exe+5872C
dmc2.exe+5871B: F6 C2 02                 - test dl,02
dmc2.exe+5871E: 74 08                    - je dmc2.exe+58728
dmc2.exe+58720: 41 3B C4                 - cmp eax,r12d
dmc2.exe+58723: 41 8B C6                 - mov eax,r14d
dmc2.exe+58726: 75 04                    - jne dmc2.exe+5872C
dmc2.exe+58728: 0F B7 46 08              - movzx eax,word ptr [rsi+08]
dmc2.exe+5872C: 66 29 81 46 01 00 00     - sub [rcx+00000146],ax
// ---------- INJECTING HERE ----------
dmc2.exe+58733: 66 44 39 B1 46 01 00 00  - cmp [rcx+00000146],r14w
// ---------- DONE INJECTING  ----------
dmc2.exe+5873B: 7F 0A                    - jg dmc2.exe+58747
dmc2.exe+5873D: 66 44 89 B1 46 01 00 00  - mov [rcx+00000146],r14w
dmc2.exe+58745: EB 0E                    - jmp dmc2.exe+58755
dmc2.exe+58747: 80 8F 65 01 00 00 80     - or byte ptr [rdi+00000165],-80
dmc2.exe+5874E: 80 8B 67 01 00 00 80     - or byte ptr [rbx+00000167],-80
dmc2.exe+58755: 44 38 B3 63 01 00 00     - cmp [rbx+00000163],r14l
dmc2.exe+5875C: 7D 09                    - jnl dmc2.exe+58767
dmc2.exe+5875E: 48 8B AB 80 00 00 00     - mov rbp,[rbx+00000080]
dmc2.exe+58765: EB 03                    - jmp dmc2.exe+5876A
dmc2.exe+58767: 48 8B EB                 - mov rbp,rbx
}
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>192</ID>
                  <Description>"Player Armor"</Description>
                  <VariableType>2 Bytes</VariableType>
                  <Address>dmc2.exe+158A476</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>156</ID>
          <Description>"Devil Trigger Settings"</Description>
          <Options moHideChildren="1"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>1579</ID>
              <Description>"Devil Trigger (value / 6,000)"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>2 Bytes</VariableType>
              <Address>dmc2.exe+158A84E</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>33</ID>
              <Description>"No DT Drain"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
dmc2.exe+23DDF0:
nop
nop
nop
nop
nop
nop
nop

[DISABLE]
dmc2.exe+23DDF0:
mov [rbx+0000051E],cx
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>150</ID>
              <Description>"DT Gain Multiplier"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+588E0)
alloc(dtmultalloc,64)
label(returnhere)
label(originalcode)
label(exit)
registersymbol(dtmultalloc)
dtmultalloc:
dd (float)2.0

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push eax //prepare eax
xor eax,eax //clear eax
mov ax, r9w //move build dt to eax register
cvtsi2ss xmm0,eax //convert to float
mulss xmm0, [dtmultalloc] //multiply by dt multiplier specified in table
cvttss2si eax,xmm0 //convert back to int
//imul r9w,[dtmultalloc]
mov r9w, ax
add cx,r9w
pop eax
cmp cx,ax

originalcode:
add cx,r9w
cmp cx,ax

exit:
jmp returnhere

"dmc2.exe"+588E0:
jmp newmem
nop 2
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(dtmultalloc)
unregistersymbol(dtmultalloc)
"dmc2.exe"+588e0:
add cx,r9w
cmp cx,ax
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>151</ID>
                  <Description>"DT Gain Multiplier Value"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>dtmultalloc</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>113</ID>
              <Description>"Disable DT Cooldown (See values dropdown)"</Description>
              <DropDownList>0:Absolutely No Cooldown
30:Use this if DT Toggles strangely
</DropDownList>
              <VariableType>2 Bytes</VariableType>
              <Address>dmc2.exe+158A85E</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1381</ID>
          <Description>"Enemy Step Cancels Debugging Info"</Description>
          <Options moHideChildren="1"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>1338</ID>
              <Description>"JC Timer"</Description>
              <ShowAsHex>1</ShowAsHex>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Byte</VariableType>
              <Address>jankCancelTimer</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1339</ID>
              <Description>"JC OK?"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Byte</VariableType>
              <Address>allowJankCancel</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1340</ID>
              <Description>"Preserve Inertia thru JC?"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Byte</VariableType>
              <Address>jankCancelSaveInertia</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1341</ID>
              <Description>"Air State"</Description>
              <ShowAsSigned>1</ShowAsSigned>
              <VariableType>Byte</VariableType>
              <Address>dmc2.exe+161BEFC</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1345</ID>
              <Description>"Double Jump OK?"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Byte</VariableType>
              <Address>dmc2.exe+158A872</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1382</ID>
          <Description>"Scratch Addresses + Injections"</Description>
          <Options moHideChildren="1"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>1267</ID>
              <Description>"setGunLoadoutToUnderwater"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Byte</VariableType>
              <Address>dmc2.exe+158A716</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1268</ID>
              <Description>"sets to 23 underwater?"</Description>
              <VariableType>Byte</VariableType>
              <Address>dmc2.exe+162C0CB</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1269</ID>
              <Description>"set to 26 underwater?"</Description>
              <VariableType>Byte</VariableType>
              <Address>dmc2.exe+162C09B</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1270</ID>
              <Description>"set to 144 underwater?"</Description>
              <VariableType>Byte</VariableType>
              <Address>dmc2.exe+161B718</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1271</ID>
              <Description>"set to 176 underwater?"</Description>
              <VariableType>Byte</VariableType>
              <Address>dmc2.exe+161B918</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1272</ID>
              <Description>"No description"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>dmc2.exe+F14768</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1273</ID>
              <Description>"No description"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>8 Bytes</VariableType>
              <Address>dmc2.exe+158A73C</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1274</ID>
              <Description>"Vertical Speed"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>dmc2.exe+158A354</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1275</ID>
              <Description>"inAir?"</Description>
              <VariableType>Byte</VariableType>
              <Address>dmc2.exe+158A871</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1276</ID>
              <Description>"set to 1 underwater?"</Description>
              <VariableType>Byte</VariableType>
              <Address>dmc2.exe+158A870</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1277</ID>
              <Description>"Something with air state"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Byte</VariableType>
              <Address>dmc2.exe+158A714</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1280</ID>
              <Description>"another air state thing?"</Description>
              <VariableType>Byte</VariableType>
              <Address>dmc2.exe+158A86E</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1281</ID>
              <Description>"Inertia"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>dmc2.exe+158A370</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1282</ID>
              <Description>"Aerial Rave Doesn't Set Inertia"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+214DB4)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push eax
mov eax, [rbx+40]
mov [rbx+40],eax
pop eax
jmp returnhere

originalcode:
mov [rbx+40],40C00000

exit:
jmp returnhere

"dmc2.exe"+214DB4:
jmp newmem
nop 2
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+214DB4:
mov [rbx+40],40C00000
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1283</ID>
              <Description>"above but again?"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+23CA8A)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
jmp returnhere

exit:
jmp returnhere

"dmc2.exe"+23CA8A:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+23CA8A:
movss [rbx+40],xmm0
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1284</ID>
              <Description>"Auto Assemble script"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+214DB4)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push rax
mov rax, [rbx+40]
mov [rbx+40],rax
pop rax
jmp returnhere

originalcode:
mov [rbx+40],40C00000

exit:
jmp returnhere

"dmc2.exe"+214DB4:
jmp newmem
nop 2
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+214DB4:
mov [rbx+40],40C00000
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1285</ID>
              <Description>"no air rave gravity set?"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+214DA3)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
jmp returnhere

originalcode:
mov [rbx+00000490],41000000

exit:
jmp returnhere

"dmc2.exe"+214DA3:
jmp newmem
nop 5
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+214DA3:
mov [rbx+00000490],41000000
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1286</ID>
              <Description>"Double Run Speed?"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+242388)
label(returnhere)
label(originalcode)
label(exit)
registersymbol(runspeed)
runspeed:
dd (float)2.0

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mulss xmm1,[runspeed]
movss [rbx+40],xmm1
jmp returnhere

originalcode:
movss [rbx+40],xmm1

exit:
jmp returnhere

"dmc2.exe"+242388:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)
unregistersymbol(runspeed)
"dmc2.exe"+242388:
movss [rbx+40],xmm1
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1287</ID>
              <Description>"Jump inertia?"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+238EE7)
label(returnhere)
label(originalcode)
label(exit)
alloc(airspeedmul,128,"dmc2.exe"+238EE7)
registersymbol(airspeedmul)
airspeedmul:
dd (float)2.0

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mulss xmm0,[airspeedmul]
jmp originalcode

originalcode:
movss [rbx+40],xmm0
jmp returnhere

exit:
jmp returnhere

"dmc2.exe"+238EE7:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(airspeedmul)
unregistersymbol(airspeedmul)
"dmc2.exe"+238EE7:
movss [rbx+40],xmm0
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1288</ID>
                  <Description>"air speed mul"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>airspeedmul</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1289</ID>
              <Description>"Air Drag Modifier"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+241AEF)
label(returnhere)
label(originalcode)
label(exit)
alloc(stickInfluence,128,"dmc2.exe"+241AEF)
registersymbol(stickInfluence)
stickInfluence:
dd (float)1.01

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mulss xmm1,[stickInfluence]
jmp originalcode

originalcode:
movss [rdi+40],xmm1

exit:
jmp returnhere

"dmc2.exe"+241AEF:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(stickInfluence)
unregistersymbol(stickInfluence)
"dmc2.exe"+241AEF:
movss [rdi+40],xmm1

</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1290</ID>
                  <Description>"Air Drag Multiplier"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>stickInfluence</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1295</ID>
              <Description>"Shotgun Inertia?"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+21A92A)
label(returnhere)
label(originalcode)
label(exit)
alloc(pushbackFactor,128,"dmc2.exe"+21A92A)
registersymbol(pushbackFactor)
pushbackFactor:
dd (float)1.0

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
jmp returnhere
mulss xmm0, [pushbackFactor]
movss xmm1,[rcx+40]
subss xmm1,xmm0
movss [rcx+40],xmm1
jmp returnhere

originalcode:
movss [rcx+40],xmm0

exit:
jmp returnhere

"dmc2.exe"+21A92A:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(pushbackFactor)
unregistersymbol(pushbackFactor)
"dmc2.exe"+21A92A:
movss [rcx+40],xmm0
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1296</ID>
                  <Description>"shotgunPushbackFactor"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>pushbackFactor</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1297</ID>
              <Description>"No description"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>2 Bytes</VariableType>
              <Address>dmc2.exe+16284C3</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1303</ID>
              <Description>"Inertia Decay"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>dmc2.exe+5A2290</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1304</ID>
              <Description>"Shotgun Rebounds Inertia"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+21AA22)
label(returnhere)
label(originalcode)
label(exit)
alloc(sgInertia,64,"dmc2.exe"+21AA22)
registersymbol(sgInertia)
sgInertia:
dd (float)-3.0

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
addss xmm0,[sgInertia]
addss xmm0,[rbx+40]
movss [rbx+40],xmm0
jmp returnhere

originalcode:
mov [rbx+40],40400000

exit:
jmp returnhere

"dmc2.exe"+21AA22:
jmp newmem
nop 2
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(sgInertia)
unregistersymbol(sgInertia)
"dmc2.exe"+21AA22:
mov [rbx+40],40400000
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1306</ID>
              <Description>"shotgun goes fucking insane"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+21AA4D)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov byte ptr [rax+28],08
movss xmm0,[rbx+34]
jmp returnhere

originalcode:
mov byte ptr [rax+28],00
movss xmm0,[rbx+34]

exit:
jmp returnhere

"dmc2.exe"+21AA4D:
jmp newmem
nop 4
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+21AA4D:
mov byte ptr [rax+28],00
movss xmm0,[rbx+34]
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1307</ID>
              <Description>"unk"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>dmc2.exe+1621E68</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1308</ID>
              <Description>"No description"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>dmc2.exe+157D4E0</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1309</ID>
              <Description>"wtf reader"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+251828)
label(returnhere)
label(originalcode)
label(exit)
alloc(wtf,64,"dmc2.exe"+251828)
registersymbol(wtf)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [r10+4A],al
mov [wtf], al
ret

originalcode:
mov [r10+4A],al
ret 

exit:
jmp returnhere

"dmc2.exe"+251828:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(wtf)
unregistersymbol(wtf)
"dmc2.exe"+251828:
mov [r10+4A],al
ret
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1310</ID>
                  <Description>"No description"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>8 Bytes</VariableType>
                  <Address>wtf</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1312</ID>
              <Description>"No description"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>2 Bytes</VariableType>
              <Address>dmc2.exe+6C52A0</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1314</ID>
              <Description>"Disable Shotgun Reverse Inertia"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+21AA29)
label(returnhere)
label(originalcode)
label(exit)
alloc(magicnumber,64,"dmc2.exe"+21AA29)
registersymbol(magicnumber)
alloc(magicnumber2,64,"dmc2.exe"+21AA29)
registersymbol(magicnumber2)
newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [magicnumber],ecx
//mov ecx,FFFF8000
//mov [magicnumber2],ecx
jmp returnhere

originalcode:
mov ecx,FFFF8000

exit:
jmp returnhere

"dmc2.exe"+21AA29:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(magicnumber)
unregistersymbol(magicnumber)
dealloc(magicnumber2)
unregistersymbol(magicnumber2)
"dmc2.exe"+21AA29:
mov ecx,FFFF8000
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1315</ID>
                  <Description>"No description"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>2 Bytes</VariableType>
                  <Address>magicnumber</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>1316</ID>
                  <Description>"No description"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>2 Bytes</VariableType>
                  <Address>magicnumber2</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1317</ID>
              <Description>"magic reverse inertia value"</Description>
              <VariableType>8 Bytes</VariableType>
              <Address>dmc2.exe+7DB270</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1318</ID>
              <Description>"No description"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>2 Bytes</VariableType>
              <Address>dmc2.exe+7DB272</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1319</ID>
              <Description>"No description"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>2 Bytes</VariableType>
              <Address>dmc2.exe+7DAF68</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1320</ID>
              <Description>"wtf is going on anymore"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+21AA3F)
label(returnhere)
label(originalcode)
label(exit)
alloc(godhelp,64,"dmc2.exe"+21AA3F)
registersymbol(godhelp)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [godhelp],ax
//mov [rbx+00000530],ax
jmp returnhere

originalcode:
mov [rbx+00000530],ax

exit:
jmp returnhere

"dmc2.exe"+21AA3F:
jmp newmem
nop 2
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(godhelp)
unregistersymbol(godhelp)
"dmc2.exe"+21AA3F:
mov [rbx+00000530],ax
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1321</ID>
                  <Description>"No description"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>2 Bytes</VariableType>
                  <Address>godhelp</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1322</ID>
              <Description>"inertia direction??"</Description>
              <ShowAsHex>1</ShowAsHex>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>8 Bytes</VariableType>
              <Address>dmc2.exe+158A860</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1327</ID>
              <Description>"ground -&gt; air inertia"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+241AEF)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
addss xmm1,[rdi+40]
movss [rdi+40],xmm1
jmp returnhere

originalcode:
movss [rdi+40],xmm1

exit:
jmp returnhere

"dmc2.exe"+241AEF:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+241AEF:
movss [rdi+40],xmm1
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1328</ID>
              <Description>"inertia transfer"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+238CFB)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
add rdi, [dmc2.exe+158A370]
mov [rcx+40], rdi
mov byte ptr [rcx+0000054E],22
jmp returnhere

originalcode:
mov [rcx+40],rdi
mov byte ptr [rcx+0000054E],22

exit:
jmp returnhere

"dmc2.exe"+238CFB:
jmp newmem
nop 6
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+238CFB:
mov [rcx+40],rdi
mov byte ptr [rcx+0000054E],22
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1329</ID>
              <Description>"above maybe"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+238D9F)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
add eax, [dmc2.exe+158A370]
mov [rbx+40],eax
mov eax,[rcx+r8+54]
jmp returnhere

originalcode:
add eax, [dmc2.exe+158A370]
mov [rbx+40],eax
mov eax,[rcx+r8+54]

exit:
jmp returnhere

"dmc2.exe"+238D9F:
jmp newmem
nop 3
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+238D9F:
add eax, [dmc2.exe+158A370]
mov [rbx+40],eax
mov eax,[rcx+r8+54]
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1330</ID>
              <Description>"Auto Assemble script"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+23D169)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cvtsi2ss xmm0, eax
addss xmm0,[dmc2.exe+158A370]
cvtss2si eax, xmm0
mov [rdi+40],eax
mov eax,[rcx+r9+54]
jmp returnhere

originalcode:
mov [rdi+40],eax
mov eax,[rcx+r9+54]

exit:
jmp returnhere

"dmc2.exe"+23D169:
jmp newmem
nop 3
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+23D169:
mov [rdi+40],eax
mov eax,[rcx+r9+54]

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1380</ID>
              <Description>"Auto Assemble script"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+238CFB)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push eax
mov eax,rdi
cvtsi2ss xmm0,eax
addss xmm0,[rbx+40]
cvttss2si eax,xmm0
add [rcx+40],eax
pop eax
mov byte ptr [rcx+0000054E],22
jmp returnhere

originalcode:
mov [rcx+40],rdi
mov byte ptr [rcx+0000054E],22

exit:
jmp returnhere

"dmc2.exe"+238CFB:
jmp newmem
nop 6
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+238CFB:
mov [rcx+40],rdi
mov byte ptr [rcx+0000054E],22
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1331</ID>
              <Description>"jumps?"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>5E95BDE350</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1332</ID>
              <Description>"No description"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>08103AC4</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1333</ID>
              <Description>"No description"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>164DA645F40</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1334</ID>
              <Description>"Air Hike Control"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+230232)
label(returnhere)
label(originalcode)
label(exit)
alloc(jcOK,64)
registersymbol(jcOK)
jcOK:
dd (int)1

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [jcOK],0
je originalcode
mov rax,[rbx+00000588]
jmp returnhere

originalcode:
dec dl
mov rax,[rbx+00000588]

exit:
jmp returnhere

"dmc2.exe"+230232:
jmp newmem
nop 4
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(jcOK)
unregistersymbol(jcOK)
"dmc2.exe"+230232:
dec dl
mov rax,[rbx+00000588]
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1335</ID>
                  <Description>"jcOK?"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>4 Bytes</VariableType>
                  <Address>jcOK</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1337</ID>
              <Description>"something with air???"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>dmc2.exe+158A354</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1342</ID>
              <Description>"jmp extractor"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+23023B)
label(returnhere)
label(originalcode)
label(exit)
alloc(givemeyourjumps,64)
registersymbol(givemeyourjumps)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push eax
mov eax, [rbx+00000542]
mov [givemeyourjumps],eax
pop eax
mov [rbx+00000542],dl
mov [givemeyourjumps],dl
jmp originalcode

originalcode:
mov [rbx+00000542],dl
jmp returnhere

exit:
jmp returnhere

"dmc2.exe"+23023B:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(givemeyourjumps)
unregistersymbol(givemeyourjumps)
"dmc2.exe"+23023B:
mov [rbx+00000542],dl

</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1343</ID>
                  <Description>"number of jumps"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>2 Bytes</VariableType>
                  <Address>givemeyourjumps</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1376</ID>
              <Description>"ground -&gt; air inertia"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+23915E)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
addss xmm0,[rcx+40]
movss [rcx+40],xmm0


originalcode:
addss xmm0,[rcx+40]
movss [rcx+40],xmm0

exit:
jmp returnhere

"dmc2.exe"+23915E:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+23915E:
movss [rcx+40],xmm0
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1377</ID>
              <Description>"melee moment"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+238EE7)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
addss xmm0,[rbx+40]
movss [rbx+40],xmm0

originalcode:
addss xmm0,[rbx+40]
movss [rbx+40],xmm0

exit:
jmp returnhere

"dmc2.exe"+238EE7:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+238EE7:
movss [rbx+40],xmm0
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1378</ID>
              <Description>"project m"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+238CFB)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push eax
mov eax,[rcx+40]
cvtsi2ss xmm0,eax
addss xmm0,[dmc2.exe+158A370]
cvttss2si eax,xmm0
add rdi,eax
pop eax
mov [rcx+40],rdi
mov byte ptr [rcx+0000054E],22
jmp returnhere

originalcode:
add [rcx+40],rdi
mov byte ptr [rcx+0000054E],22

exit:
jmp returnhere

"dmc2.exe"+238CFB:
jmp newmem
nop 6
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+238CFB:
mov [rcx+40],rdi
mov byte ptr [rcx+0000054E],22
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1379</ID>
              <Description>"Auto Assemble script"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+238D9F)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cvtsi2ss xmm0,eax
addss xmm0,[rbx+40]
cvttss2si eax,xmm0
add [rbx+40],eax
mov eax,[rcx+r8+54]
jmp returnhere


originalcode:
mov [rbx+40],eax
mov eax,[rcx+r8+54]

exit:
jmp returnhere

"dmc2.exe"+238D9F:
jmp newmem
nop 3
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+238D9F:
mov [rbx+40],eax
mov eax,[rcx+r8+54]
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1639</ID>
              <Description>"Something relating to DMD"</Description>
              <ShowAsHex>1</ShowAsHex>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>2 Bytes</VariableType>
              <Address>dmc2.exe+158B612</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1640</ID>
              <Description>"Another DMD Thing"</Description>
              <ShowAsHex>1</ShowAsHex>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>2 Bytes</VariableType>
              <Address>dmc2.exe+158B60C</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1641</ID>
              <Description>"No description"</Description>
              <ShowAsHex>1</ShowAsHex>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>dmc2.exe+158B600</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1642</ID>
              <Description>"DT Timer?"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+1F96AB)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov eax,0000000F
jmp returnhere

originalcode:
mov eax,00007FFF

exit:
jmp returnhere

"dmc2.exe"+1F96AB:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+1F96AB:
mov eax,00007FFF
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1643</ID>
              <Description>"No description"</Description>
              <ShowAsHex>1</ShowAsHex>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>dmc2.exe+158B614</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1087</ID>
              <Description>"[NOT WORKING] Trish - Use Nightmare Gamma On Land"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"dmc2.exe"+23D547) 
label(returnhere)
label(originalcode)
label(exit)
alloc(moveswapalloc,8)
alloc(previousMoveID,64)
alloc(nightmareEquip,8)
define(CurrentSword,dmc2.exe+158A80F)
registersymbol(previousMoveID)
registersymbol(moveswapalloc)
registersymbol(nightmareEquip)
nightmareEquip:
db 0
moveswapalloc:
db 0

newmem:
//Before we do any move swaps, check to see what sword
//is currently equipped so we can declone the swords.
//Rebellion
//update previous move id before it can get changed
//comically stupid workaround for guns getting swapped
push ebx
mov ebx, [moveswapalloc]
mov [previousMoveID], ebx
pop ebx
jmp trishSwaps

trishSwaps:
mov [moveswapalloc],eax
//rapid fire
cmp dword ptr [moveswapalloc],0x00000300
je nightmareOnLand
//1 tap of guns
cmp dword ptr [moveswapalloc],0x00000200
je nightmareOnLand
//always end with a jump to originalcode
jmp originalcode

nightmareOnLand:
//cmp [nightmareEquip],0x0
//je originalcode
mov byte ptr [r10+000003EC],0x00010409
jmp returnhere

//the al register holds the ID of the original move being executed.
//by comparing it to a move ID, we can then intercept this call
//and insert a different move ID instead.

originalcode:
mov [r10+000003EC],al
jmp returnhere

exit:
jmp returnhere

"dmc2.exe"+23D547:
jmp newmem
nop
nop
returnhere:

[DISABLE]
dealloc(newmem)
"dmc2.exe"+23D547:
mov [r10+000003EC],al
//Alt: db 41 88 82 EC 03 00 00

dealloc(moveswapalloc)
dealloc(previousMoveID)
dealloc(nightmareEquip)
unregistersymbol(previousMoveID)
unregistersymbol(moveswapalloc)
unregistersymbol(nightmareEquip)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1088</ID>
                  <Description>"Show Debug Info"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>1089</ID>
                      <Description>"Move ID"</Description>
                      <ShowAsHex>1</ShowAsHex>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>4 Bytes</VariableType>
                      <Address>dmc2.exe+158A71c</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1090</ID>
                      <Description>"Move Swap Mem"</Description>
                      <ShowAsHex>1</ShowAsHex>
                      <VariableType>4 Bytes</VariableType>
                      <Address>moveswapalloc</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1091</ID>
                      <Description>"move swap alloc"</Description>
                      <ShowAsHex>1</ShowAsHex>
                      <VariableType>4 Bytes</VariableType>
                      <Address>moveswapalloc</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>1092</ID>
                      <Description>"premoveid"</Description>
                      <ShowAsHex>1</ShowAsHex>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>4 Bytes</VariableType>
                      <Address>previousMoveID</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>1266</ID>
                  <Description>"nightmareEquip"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Byte</VariableType>
                  <Address>nightmareEquip</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>1051</ID>
      <Description>"----------------------------------------"</Description>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>1634</ID>
      <Description>"Difficulty "</Description>
      <DropDownList ReadOnly="1">0:Dynamic (Bloody Palace Only)
1:Normal
2:Hard
3:Must Die
</DropDownList>
      <VariableType>Byte</VariableType>
      <Address>dmc2.exe+1588B3C</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>1635</ID>
      <Description>"Difficulty (Unused?)"</Description>
      <VariableType>Byte</VariableType>
      <Address>dmc2.exe+1589EAC</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>1636</ID>
      <Description>"Enemy DT Toggle (If 3, Enemies can DT)"</Description>
      <DropDownList>1:Disable Enemy DT
3:Enable Enemy DT
</DropDownList>
      <VariableType>Byte</VariableType>
      <Address>dmc2.exe+158B616</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>1638</ID>
      <Description>"----------------------------------------"</Description>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>1637</ID>
      <Description>"Load Data Difficulty Controls"</Description>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>1630</ID>
      <Description>"Difficulty"</Description>
      <ShowAsHex>1</ShowAsHex>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>Byte</VariableType>
      <Address>dmc2.exe+15884A0</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>1631</ID>
      <Description>"Level to Load (Normal)"</Description>
      <ShowAsHex>1</ShowAsHex>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>Byte</VariableType>
      <Address>dmc2.exe+15884A1</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>1632</ID>
      <Description>"Level to Load (Hard)"</Description>
      <ShowAsHex>1</ShowAsHex>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>Byte</VariableType>
      <Address>dmc2.exe+15884A2</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>1633</ID>
      <Description>"Level to Load (Must Die)"</Description>
      <ShowAsHex>1</ShowAsHex>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>Byte</VariableType>
      <Address>dmc2.exe+15884A3</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>1645</ID>
      <Description>"----------------------------------------"</Description>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>1644</ID>
      <Description>"Disc Loader? Try different values and see what happens"</Description>
      <ShowAsHex>1</ShowAsHex>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>2 Bytes</VariableType>
      <Address>dmc2.exe+1621E68</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>1646</ID>
      <Description>"More disc stuff."</Description>
      <ShowAsHex>1</ShowAsHex>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>2 Bytes</VariableType>
      <Address>dmc2.exe+1621E60</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>1684</ID>
      <Description>"----------------------------------------"</Description>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>0</ID>
      <Description>"Orb Count"</Description>
      <VariableType>4 Bytes</VariableType>
      <Address>dmc2.exe+1588BA8</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>1653</ID>
      <Description>"[Currency] Orbs Collected Multiplier"</Description>
      <Options moHideChildren="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+1CDE9B)
label(returnhere)
label(originalcode)
label(exit)
alloc(orbMult,64)
registersymbol(orbMult)
orbMult:
dd (float)1.0

newmem:
cvtsi2ss xmm0,edx
mulss xmm0, [orbMult]
cvttss2si edx,xmm0
jmp originalcode

originalcode:
add [rax+78],edx
mov rax,[dmc2.exe+1621E60]

exit:
jmp returnhere

"dmc2.exe"+1CDE9B:
jmp newmem
nop 5
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(orbMult)
unregistersymbol(orbMult)
"dmc2.exe"+1CDE9B:
add [rax+78],edx
mov rax,[dmc2.exe+1621E60]
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>1654</ID>
          <Description>"Orb Multiplier"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Float</VariableType>
          <Address>orbMult</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>1651</ID>
      <Description>"[Mission Rankings] Orbs Collected Multiplier"</Description>
      <Options moHideChildren="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,2048,"dmc2.exe"+1CDEBC)
label(returnhere)
label(originalcode)
label(exit)
alloc(resultsOrbMult,64)
registersymbol(resultsOrbMult)
resultsOrbMult:
dd (float)1.0

newmem:
cvtsi2ss xmm0,edx
mulss xmm0, [resultsOrbMult]
cvttss2si edx,xmm0
jmp originalcode

originalcode:
add [rax+7C],edx
mov rax,[dmc2.exe+1621E60]

exit:
jmp returnhere

"dmc2.exe"+1CDEBC:
jmp newmem
nop 5
returnhere:

[DISABLE]
dealloc(newmem)
dealloc(resultsOrbMult)
unregistersymbol(resultsOrbMult)
"dmc2.exe"+1CDEBC:
add [rax+7C],edx
mov rax,[dmc2.exe+1621E60]
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>1652</ID>
          <Description>"Orb Multiplier"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Float</VariableType>
          <Address>resultsOrbMult</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>1650</ID>
          <Description>"Orbs Collected In Mission"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>dmc2.exe+1588BAC</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>1685</ID>
      <Description>"----------------------------------------"</Description>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>1688</ID>
      <Description>"something tied to char loading?"</Description>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>2 Bytes</VariableType>
      <Address>dmc2.exe+1621e68</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>1689</ID>
      <Description>"No description"</Description>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>4 Bytes</VariableType>
      <Address>dmc2.exe+1621E60</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>1690</ID>
      <Description>"char sel smth"</Description>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>4 Bytes</VariableType>
      <Address>dmc2.exe+158a3a0</Address>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>Change of mov [rdi+00000142],ax</Description>
      <AddressString>dmc2.exe+54314</AddressString>
      <Before>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>33</Byte>
        <Byte>D2</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>89</Byte>
        <Byte>87</Byte>
        <Byte>42</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>66</Byte>
        <Byte>03</Byte>
        <Byte>C6</Byte>
        <Byte>66</Byte>
        <Byte>89</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [rdi+00000140],ax</Description>
      <AddressString>dmc2.exe+5431E</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>66</Byte>
        <Byte>03</Byte>
        <Byte>C6</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>89</Byte>
        <Byte>87</Byte>
        <Byte>40</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>66</Byte>
        <Byte>85</Byte>
        <Byte>C0</Byte>
        <Byte>7F</Byte>
        <Byte>07</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [rdi+00000140],ax</Description>
      <AddressString>dmc2.exe+54346</AddressString>
      <Before>
        <Byte>C1</Byte>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>4F</Byte>
        <Byte>C1</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>89</Byte>
        <Byte>87</Byte>
        <Byte>40</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>38</Byte>
        <Byte>57</Byte>
        <Byte>06</Byte>
        <Byte>75</Byte>
        <Byte>11</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [rbx+00000638],esi</Description>
      <AddressString>dmc2.exe+23DF64</AddressString>
      <Before>
        <Byte>B3</Byte>
        <Byte>30</Byte>
        <Byte>06</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>B3</Byte>
        <Byte>38</Byte>
        <Byte>06</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>40</Byte>
        <Byte>88</Byte>
        <Byte>B3</Byte>
        <Byte>3D</Byte>
        <Byte>06</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp [rbx+00000638],esi</Description>
      <AddressString>dmc2.exe+23DF4D</AddressString>
      <Before>
        <Byte>06</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>72</Byte>
        <Byte>24</Byte>
      </Before>
      <Actual>
        <Byte>39</Byte>
        <Byte>B3</Byte>
        <Byte>38</Byte>
        <Byte>06</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>74</Byte>
        <Byte>08</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>CB</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp [rcx+000004DC],al</Description>
      <AddressString>dmc2.exe+2306B9</AddressString>
      <Before>
        <Byte>81</Byte>
        <Byte>DE</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>38</Byte>
        <Byte>81</Byte>
        <Byte>DC</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>01</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jne dmc2.exe+231D84</Description>
      <AddressString>dmc2.exe+231D7D</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>D3</Byte>
        <Byte>E2</Byte>
        <Byte>85</Byte>
        <Byte>D0</Byte>
      </Before>
      <Actual>
        <Byte>75</Byte>
        <Byte>05</Byte>
      </Actual>
      <After>
        <Byte>41</Byte>
        <Byte>3B</Byte>
        <Byte>CA</Byte>
        <Byte>75</Byte>
        <Byte>B2</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jne dmc2.exe+231D36</Description>
      <AddressString>dmc2.exe+231D82</AddressString>
      <Before>
        <Byte>75</Byte>
        <Byte>05</Byte>
        <Byte>41</Byte>
        <Byte>3B</Byte>
        <Byte>CA</Byte>
      </Before>
      <Actual>
        <Byte>75</Byte>
        <Byte>B2</Byte>
      </Actual>
      <After>
        <Byte>41</Byte>
        <Byte>88</Byte>
        <Byte>88</Byte>
        <Byte>DE</Byte>
        <Byte>04</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp ecx,r10d</Description>
      <AddressString>dmc2.exe+231D7F</AddressString>
      <Before>
        <Byte>E2</Byte>
        <Byte>85</Byte>
        <Byte>D0</Byte>
        <Byte>75</Byte>
        <Byte>05</Byte>
      </Before>
      <Actual>
        <Byte>41</Byte>
        <Byte>3B</Byte>
        <Byte>CA</Byte>
      </Actual>
      <After>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>41</Byte>
        <Byte>88</Byte>
        <Byte>88</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je dmc2.exe+231D6F</Description>
      <AddressString>dmc2.exe+231D64</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>09</Byte>
      </Actual>
      <After>
        <Byte>41</Byte>
        <Byte>0F</Byte>
        <Byte>BE</Byte>
        <Byte>41</Byte>
        <Byte>0C</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jmp dmc2.exe+231D7F</Description>
      <AddressString>dmc2.exe+231D51</AddressString>
      <Before>
        <Byte>D3</Byte>
        <Byte>E2</Byte>
        <Byte>44</Byte>
        <Byte>85</Byte>
        <Byte>DA</Byte>
      </Before>
      <Actual>
        <Byte>EB</Byte>
        <Byte>2C</Byte>
      </Actual>
      <After>
        <Byte>41</Byte>
        <Byte>F6</Byte>
        <Byte>01</Byte>
        <Byte>10</Byte>
        <Byte>74</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je dmc2.exe+231D6F</Description>
      <AddressString>dmc2.exe+231D57</AddressString>
      <Before>
        <Byte>2C</Byte>
        <Byte>41</Byte>
        <Byte>F6</Byte>
        <Byte>01</Byte>
        <Byte>10</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>16</Byte>
      </Actual>
      <After>
        <Byte>41</Byte>
        <Byte>F7</Byte>
        <Byte>80</Byte>
        <Byte>E4</Byte>
        <Byte>03</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je dmc2.exe+2307C6</Description>
      <AddressString>dmc2.exe+2306BF</AddressString>
      <Before>
        <Byte>81</Byte>
        <Byte>DC</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>01</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>88</Byte>
        <Byte>81</Byte>
        <Byte>DC</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jne dmc2.exe+231D8B</Description>
      <AddressString>dmc2.exe+231D1B</AddressString>
      <Before>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>75</Byte>
        <Byte>6E</Byte>
      </Actual>
      <After>
        <Byte>49</Byte>
        <Byte>8B</Byte>
        <Byte>80</Byte>
        <Byte>88</Byte>
        <Byte>05</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je dmc2.exe+231D8B</Description>
      <AddressString>dmc2.exe+231CFD</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>4C</Byte>
        <Byte>8B</Byte>
        <Byte>C1</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>88</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>89</Byte>
        <Byte>DC</Byte>
        <Byte>04</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp cl,[r8+000004DE]</Description>
      <AddressString>dmc2.exe+231D0A</AddressString>
      <Before>
        <Byte>89</Byte>
        <Byte>DC</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>41</Byte>
        <Byte>3A</Byte>
        <Byte>88</Byte>
        <Byte>DE</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>75</Byte>
        <Byte>78</Byte>
        <Byte>41</Byte>
        <Byte>80</Byte>
        <Byte>B8</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jne dmc2.exe+231D8B</Description>
      <AddressString>dmc2.exe+231D11</AddressString>
      <Before>
        <Byte>88</Byte>
        <Byte>DE</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>75</Byte>
        <Byte>78</Byte>
      </Actual>
      <After>
        <Byte>41</Byte>
        <Byte>80</Byte>
        <Byte>B8</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp byte ptr [r8+00000518],00</Description>
      <AddressString>dmc2.exe+231D13</AddressString>
      <Before>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>75</Byte>
        <Byte>78</Byte>
      </Before>
      <Actual>
        <Byte>41</Byte>
        <Byte>80</Byte>
        <Byte>B8</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>75</Byte>
        <Byte>6E</Byte>
        <Byte>49</Byte>
        <Byte>8B</Byte>
        <Byte>80</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jnl dmc2.exe+231D47</Description>
      <AddressString>dmc2.exe+231D3E</AddressString>
      <Before>
        <Byte>E1</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>80</Byte>
      </Before>
      <Actual>
        <Byte>7D</Byte>
        <Byte>07</Byte>
      </Actual>
      <After>
        <Byte>FF</Byte>
        <Byte>C9</Byte>
        <Byte>83</Byte>
        <Byte>C9</Byte>
        <Byte>FC</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of test eax,edx</Description>
      <AddressString>dmc2.exe+231D7B</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>D3</Byte>
        <Byte>E2</Byte>
      </Before>
      <Actual>
        <Byte>85</Byte>
        <Byte>D0</Byte>
      </Actual>
      <After>
        <Byte>75</Byte>
        <Byte>05</Byte>
        <Byte>41</Byte>
        <Byte>3B</Byte>
        <Byte>CA</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [r8+000004DE],cl</Description>
      <AddressString>dmc2.exe+231D84</AddressString>
      <Before>
        <Byte>41</Byte>
        <Byte>3B</Byte>
        <Byte>CA</Byte>
        <Byte>75</Byte>
        <Byte>B2</Byte>
      </Before>
      <Actual>
        <Byte>41</Byte>
        <Byte>88</Byte>
        <Byte>88</Byte>
        <Byte>DE</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>C3</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of dec ecx</Description>
      <AddressString>dmc2.exe+231D40</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>80</Byte>
        <Byte>7D</Byte>
        <Byte>07</Byte>
      </Before>
      <Actual>
        <Byte>FF</Byte>
        <Byte>C9</Byte>
      </Actual>
      <After>
        <Byte>83</Byte>
        <Byte>C9</Byte>
        <Byte>FC</Byte>
        <Byte>FF</Byte>
        <Byte>C1</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movzx ecx,byte ptr [rcx+000004DC]</Description>
      <AddressString>dmc2.exe+231D03</AddressString>
      <Before>
        <Byte>84</Byte>
        <Byte>88</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>89</Byte>
        <Byte>DC</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>41</Byte>
        <Byte>3A</Byte>
        <Byte>88</Byte>
        <Byte>DE</Byte>
        <Byte>04</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je dmc2.exe+2306B2</Description>
      <AddressString>dmc2.exe+2306A0</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>18</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>D9</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>BE</Byte>
        <Byte>81</Byte>
        <Byte>58</Byte>
        <Byte>05</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [rcx+000004DC],al</Description>
      <AddressString>dmc2.exe+2306C5</AddressString>
      <Before>
        <Byte>84</Byte>
        <Byte>01</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>88</Byte>
        <Byte>81</Byte>
        <Byte>DC</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>88</Byte>
        <Byte>05</Byte>
        <Byte>71</Byte>
        <Byte>9B</Byte>
        <Byte>35</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov byte ptr [rcx+0000051C],00</Description>
      <AddressString>dmc2.exe+231026</AddressString>
      <Before>
        <Byte>81</Byte>
        <Byte>88</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>C6</Byte>
        <Byte>81</Byte>
        <Byte>1C</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>08</Byte>
        <Byte>44</Byte>
        <Byte>0F</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [rbx+0000051E],cx</Description>
      <AddressString>dmc2.exe+23DDF0</AddressString>
      <Before>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>2B</Byte>
        <Byte>C8</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>89</Byte>
        <Byte>8B</Byte>
        <Byte>1E</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>66</Byte>
        <Byte>85</Byte>
        <Byte>C9</Byte>
        <Byte>7F</Byte>
        <Byte>21</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movss [dmc2.exe+158A844],xmm0</Description>
      <AddressString>dmc2.exe+23F49D</AddressString>
      <Before>
        <Byte>48</Byte>
        <Byte>8D</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>40</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>05</Byte>
        <Byte>9F</Byte>
        <Byte>B3</Byte>
        <Byte>34</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>B9</Byte>
        <Byte>10</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov byte ptr [rcx+00000511],01</Description>
      <AddressString>dmc2.exe+22F6D6</AddressString>
      <Before>
        <Byte>4A</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>01</Byte>
      </Before>
      <Actual>
        <Byte>C6</Byte>
        <Byte>81</Byte>
        <Byte>11</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>C7</Byte>
        <Byte>81</Byte>
        <Byte>B0</Byte>
        <Byte>01</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov byte ptr [rbx+00000511],01</Description>
      <AddressString>dmc2.exe+23DDD0</AddressString>
      <Before>
        <Byte>B3</Byte>
        <Byte>14</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>C6</Byte>
        <Byte>83</Byte>
        <Byte>11</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>40</Byte>
        <Byte>38</Byte>
        <Byte>B3</Byte>
        <Byte>1C</Byte>
        <Byte>05</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov byte ptr [dmc2.exe+158A841],00</Description>
      <AddressString>dmc2.exe+23F930</AddressString>
      <Before>
        <Byte>05</Byte>
        <Byte>E8</Byte>
        <Byte>AE</Byte>
        <Byte>34</Byte>
        <Byte>01</Byte>
      </Before>
      <Actual>
        <Byte>C6</Byte>
        <Byte>05</Byte>
        <Byte>0A</Byte>
        <Byte>AF</Byte>
        <Byte>34</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8D</Byte>
        <Byte>0D</Byte>
        <Byte>F2</Byte>
        <Byte>A9</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov byte ptr [dmc2.exe+158A841],00</Description>
      <AddressString>dmc2.exe+23F4AA</AddressString>
      <Before>
        <Byte>B9</Byte>
        <Byte>10</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>C6</Byte>
        <Byte>05</Byte>
        <Byte>90</Byte>
        <Byte>B3</Byte>
        <Byte>34</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>89</Byte>
        <Byte>18</Byte>
        <Byte>48</Byte>
        <Byte>89</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov word ptr [dmc2.exe+158A840],0000</Description>
      <AddressString>dmc2.exe+23F7D8</AddressString>
      <Before>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>C7</Byte>
        <Byte>05</Byte>
        <Byte>5F</Byte>
        <Byte>B0</Byte>
        <Byte>34</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>E9</Byte>
        <Byte>51</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [rbx+00000511],sil</Description>
      <AddressString>dmc2.exe+23DD9F</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>01</Byte>
        <Byte>75</Byte>
        <Byte>09</Byte>
      </Before>
      <Actual>
        <Byte>40</Byte>
        <Byte>88</Byte>
        <Byte>B3</Byte>
        <Byte>11</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>EB</Byte>
        <Byte>2F</Byte>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov byte ptr [dmc2.exe+158A841],00</Description>
      <AddressString>dmc2.exe+23F930</AddressString>
      <Before>
        <Byte>05</Byte>
        <Byte>E8</Byte>
        <Byte>AE</Byte>
        <Byte>34</Byte>
        <Byte>01</Byte>
      </Before>
      <Actual>
        <Byte>C6</Byte>
        <Byte>05</Byte>
        <Byte>0A</Byte>
        <Byte>AF</Byte>
        <Byte>34</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8D</Byte>
        <Byte>0D</Byte>
        <Byte>F2</Byte>
        <Byte>A9</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov byte ptr [rbx+00000511],01</Description>
      <AddressString>dmc2.exe+23DDD0</AddressString>
      <Before>
        <Byte>B3</Byte>
        <Byte>14</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>C6</Byte>
        <Byte>83</Byte>
        <Byte>11</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>40</Byte>
        <Byte>38</Byte>
        <Byte>B3</Byte>
        <Byte>1C</Byte>
        <Byte>05</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov byte ptr [rcx+00000511],01</Description>
      <AddressString>dmc2.exe+22F6D6</AddressString>
      <Before>
        <Byte>4A</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>01</Byte>
      </Before>
      <Actual>
        <Byte>C6</Byte>
        <Byte>81</Byte>
        <Byte>11</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>C7</Byte>
        <Byte>81</Byte>
        <Byte>B0</Byte>
        <Byte>01</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov byte ptr [dmc2.exe+158A841],00</Description>
      <AddressString>dmc2.exe+23F4AA</AddressString>
      <Before>
        <Byte>B9</Byte>
        <Byte>10</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>C6</Byte>
        <Byte>05</Byte>
        <Byte>90</Byte>
        <Byte>B3</Byte>
        <Byte>34</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>89</Byte>
        <Byte>18</Byte>
        <Byte>48</Byte>
        <Byte>89</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of nop </Description>
      <AddressString>dmc2.exe+23F7D8</AddressString>
      <Before>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
      </Actual>
      <After>
        <Byte>E9</Byte>
        <Byte>51</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [rbx+00000511],sil</Description>
      <AddressString>dmc2.exe+23DD9F</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>01</Byte>
        <Byte>75</Byte>
        <Byte>09</Byte>
      </Before>
      <Actual>
        <Byte>40</Byte>
        <Byte>88</Byte>
        <Byte>B3</Byte>
        <Byte>11</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>EB</Byte>
        <Byte>2F</Byte>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov byte ptr [dmc2.exe+158A841],00</Description>
      <AddressString>dmc2.exe+23FD55</AddressString>
      <Before>
        <Byte>B9</Byte>
        <Byte>10</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>C6</Byte>
        <Byte>05</Byte>
        <Byte>E5</Byte>
        <Byte>AA</Byte>
        <Byte>34</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>1F</Byte>
        <Byte>40</Byte>
        <Byte>00</Byte>
        <Byte>48</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov word ptr [dmc2.exe+158A840],0000</Description>
      <AddressString>dmc2.exe+240110</AddressString>
      <Before>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>C7</Byte>
        <Byte>05</Byte>
        <Byte>27</Byte>
        <Byte>A7</Byte>
        <Byte>34</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>E9</Byte>
        <Byte>2C</Byte>
        <Byte>02</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov byte ptr [dmc2.exe+158A841],00</Description>
      <AddressString>dmc2.exe+240343</AddressString>
      <Before>
        <Byte>05</Byte>
        <Byte>D5</Byte>
        <Byte>A4</Byte>
        <Byte>34</Byte>
        <Byte>01</Byte>
      </Before>
      <Actual>
        <Byte>C6</Byte>
        <Byte>05</Byte>
        <Byte>F7</Byte>
        <Byte>A4</Byte>
        <Byte>34</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8D</Byte>
        <Byte>0D</Byte>
        <Byte>DF</Byte>
        <Byte>9F</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movss [dmc2.exe+158A844],xmm0</Description>
      <AddressString>dmc2.exe+23FD48</AddressString>
      <Before>
        <Byte>85</Byte>
        <Byte>40</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>05</Byte>
        <Byte>F4</Byte>
        <Byte>AA</Byte>
        <Byte>34</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>B9</Byte>
        <Byte>10</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :movss [dmc2.exe+158A844],xmm0</Description>
      <AddressString>dmc2.exe+23F49D</AddressString>
      <Before>
        <Byte>48</Byte>
        <Byte>8D</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>40</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>05</Byte>
        <Byte>9F</Byte>
        <Byte>B3</Byte>
        <Byte>34</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>B9</Byte>
        <Byte>10</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :movss [rbx+00000514],xmm0</Description>
      <AddressString>dmc2.exe+23DDC0</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>0F</Byte>
        <Byte>2F</Byte>
        <Byte>F0</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>83</Byte>
        <Byte>14</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>72</Byte>
        <Byte>0D</Byte>
        <Byte>89</Byte>
        <Byte>B3</Byte>
        <Byte>14</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :mov [rbx+00000514],esi</Description>
      <AddressString>dmc2.exe+23DDCA</AddressString>
      <Before>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>72</Byte>
        <Byte>0D</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>B3</Byte>
        <Byte>14</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>C6</Byte>
        <Byte>83</Byte>
        <Byte>11</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :movss xmm0,[rbx+00000514]</Description>
      <AddressString>dmc2.exe+23DDA8</AddressString>
      <Before>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>EB</Byte>
        <Byte>2F</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>83</Byte>
        <Byte>14</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>2F</Byte>
        <Byte>C6</Byte>
        <Byte>76</Byte>
        <Byte>1B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :movss [dmc2.exe+158A844],xmm0</Description>
      <AddressString>dmc2.exe+23F49D</AddressString>
      <Before>
        <Byte>48</Byte>
        <Byte>8D</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>40</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>05</Byte>
        <Byte>9F</Byte>
        <Byte>B3</Byte>
        <Byte>34</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>B9</Byte>
        <Byte>10</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :movss [rbx+00000514],xmm0</Description>
      <AddressString>dmc2.exe+23DDC0</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>0F</Byte>
        <Byte>2F</Byte>
        <Byte>F0</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>83</Byte>
        <Byte>14</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>72</Byte>
        <Byte>0D</Byte>
        <Byte>89</Byte>
        <Byte>B3</Byte>
        <Byte>14</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :mov [rbx+00000514],esi</Description>
      <AddressString>dmc2.exe+23DDCA</AddressString>
      <Before>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>72</Byte>
        <Byte>0D</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>B3</Byte>
        <Byte>14</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>C6</Byte>
        <Byte>83</Byte>
        <Byte>11</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movss xmm0,[rbx+00000514]</Description>
      <AddressString>dmc2.exe+23DDA8</AddressString>
      <Before>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>EB</Byte>
        <Byte>2F</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>83</Byte>
        <Byte>14</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>2F</Byte>
        <Byte>C6</Byte>
        <Byte>76</Byte>
        <Byte>1B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movss [dmc2.exe+158A844],xmm0</Description>
      <AddressString>dmc2.exe+23F49D</AddressString>
      <Before>
        <Byte>48</Byte>
        <Byte>8D</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>40</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>05</Byte>
        <Byte>9F</Byte>
        <Byte>B3</Byte>
        <Byte>34</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>B9</Byte>
        <Byte>10</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movss [rbx+00000514],xmm0</Description>
      <AddressString>dmc2.exe+23DDC0</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>0F</Byte>
        <Byte>2F</Byte>
        <Byte>F0</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>83</Byte>
        <Byte>14</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>72</Byte>
        <Byte>0D</Byte>
        <Byte>89</Byte>
        <Byte>B3</Byte>
        <Byte>14</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [rbx+00000514],esi</Description>
      <AddressString>dmc2.exe+23DDCA</AddressString>
      <Before>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>72</Byte>
        <Byte>0D</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>B3</Byte>
        <Byte>14</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>C6</Byte>
        <Byte>83</Byte>
        <Byte>11</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movss xmm0,[rbx+00000514]</Description>
      <AddressString>dmc2.exe+23DDA8</AddressString>
      <Before>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>EB</Byte>
        <Byte>2F</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>83</Byte>
        <Byte>14</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>2F</Byte>
        <Byte>C6</Byte>
        <Byte>76</Byte>
        <Byte>1B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movss [dmc2.exe+158A844],xmm0</Description>
      <AddressString>dmc2.exe+23F49D</AddressString>
      <Before>
        <Byte>48</Byte>
        <Byte>8D</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>40</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>05</Byte>
        <Byte>9F</Byte>
        <Byte>B3</Byte>
        <Byte>34</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>B9</Byte>
        <Byte>10</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movss [rbx+00000514],xmm0</Description>
      <AddressString>dmc2.exe+23DDC0</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>0F</Byte>
        <Byte>2F</Byte>
        <Byte>F0</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>83</Byte>
        <Byte>14</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>72</Byte>
        <Byte>0D</Byte>
        <Byte>89</Byte>
        <Byte>B3</Byte>
        <Byte>14</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [rbx+00000514],esi</Description>
      <AddressString>dmc2.exe+23DDCA</AddressString>
      <Before>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>72</Byte>
        <Byte>0D</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>B3</Byte>
        <Byte>14</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>C6</Byte>
        <Byte>83</Byte>
        <Byte>11</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movss [dmc2.exe+158A844],xmm0</Description>
      <AddressString>dmc2.exe+23FD48</AddressString>
      <Before>
        <Byte>85</Byte>
        <Byte>40</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>05</Byte>
        <Byte>F4</Byte>
        <Byte>AA</Byte>
        <Byte>34</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>B9</Byte>
        <Byte>10</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [rdi+0000040C],r15d</Description>
      <AddressString>dmc2.exe+23DB3E</AddressString>
      <Before>
        <Byte>83</Byte>
        <Byte>EE</Byte>
        <Byte>01</Byte>
        <Byte>75</Byte>
        <Byte>C2</Byte>
      </Before>
      <Actual>
        <Byte>44</Byte>
        <Byte>89</Byte>
        <Byte>BF</Byte>
        <Byte>0C</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>E8</Byte>
        <Byte>A0</Byte>
        <Byte>45</Byte>
        <Byte>DC</Byte>
        <Byte>FF</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [rdi+0000040C],r8d</Description>
      <AddressString>dmc2.exe+23DB75</AddressString>
      <Before>
        <Byte>C0</Byte>
        <Byte>41</Byte>
        <Byte>8D</Byte>
        <Byte>49</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>44</Byte>
        <Byte>89</Byte>
        <Byte>87</Byte>
        <Byte>0C</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>45</Byte>
        <Byte>E8</Byte>
        <Byte>D3</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [rdi+0000040C],eax</Description>
      <AddressString>dmc2.exe+23DB88</AddressString>
      <Before>
        <Byte>8B</Byte>
        <Byte>C9</Byte>
        <Byte>41</Byte>
        <Byte>0B</Byte>
        <Byte>C0</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>87</Byte>
        <Byte>0C</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>55</Byte>
        <Byte>F0</Byte>
        <Byte>D3</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [rdi+0000040C],edx</Description>
      <AddressString>dmc2.exe+23DB9E</AddressString>
      <Before>
        <Byte>D0</Byte>
        <Byte>41</Byte>
        <Byte>83</Byte>
        <Byte>C1</Byte>
        <Byte>04</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>97</Byte>
        <Byte>0C</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>44</Byte>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>45</Byte>
        <Byte>F8</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [rdi+0000040C],r8d</Description>
      <AddressString>dmc2.exe+23DBB3</AddressString>
      <Before>
        <Byte>C2</Byte>
        <Byte>41</Byte>
        <Byte>8D</Byte>
        <Byte>41</Byte>
        <Byte>FE</Byte>
      </Before>
      <Actual>
        <Byte>44</Byte>
        <Byte>89</Byte>
        <Byte>87</Byte>
        <Byte>0C</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>10</Byte>
        <Byte>7C</Byte>
        <Byte>A1</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [rbx],r15w</Description>
      <AddressString>dmc2.exe+23DB30</AddressString>
      <Before>
        <Byte>38</Byte>
        <Byte>7B</Byte>
        <Byte>05</Byte>
        <Byte>75</Byte>
        <Byte>04</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>44</Byte>
        <Byte>89</Byte>
        <Byte>3B</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>83</Byte>
        <Byte>C3</Byte>
        <Byte>08</Byte>
        <Byte>48</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [rbx+01],al</Description>
      <AddressString>dmc2.exe+240E4F</AddressString>
      <Before>
        <Byte>C0</Byte>
        <Byte>41</Byte>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>C0</Byte>
      </Before>
      <Actual>
        <Byte>88</Byte>
        <Byte>43</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>66</Byte>
        <Byte>3B</Byte>
        <Byte>45</Byte>
        <Byte>02</Byte>
        <Byte>0F</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov word ptr [rbx],0001</Description>
      <AddressString>dmc2.exe+240E5C</AddressString>
      <Before>
        <Byte>85</Byte>
        <Byte>6D</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>C7</Byte>
        <Byte>03</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>C6</Byte>
        <Byte>43</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>0F</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [r8+000003EB],cl</Description>
      <AddressString>dmc2.exe+23D416</AddressString>
      <Before>
        <Byte>81</Byte>
        <Byte>50</Byte>
        <Byte>D6</Byte>
        <Byte>6D</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>41</Byte>
        <Byte>88</Byte>
        <Byte>88</Byte>
        <Byte>EB</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>41</Byte>
        <Byte>88</Byte>
        <Byte>90</Byte>
        <Byte>E8</Byte>
        <Byte>03</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [r10+000003EB],al</Description>
      <AddressString>dmc2.exe+23D556</AddressString>
      <Before>
        <Byte>03</Byte>
        <Byte>3C</Byte>
        <Byte>FF</Byte>
        <Byte>74</Byte>
        <Byte>1C</Byte>
      </Before>
      <Actual>
        <Byte>41</Byte>
        <Byte>88</Byte>
        <Byte>82</Byte>
        <Byte>EB</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>41</Byte>
        <Byte>8D</Byte>
        <Byte>48</Byte>
        <Byte>18</Byte>
        <Byte>0F</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of or [r10+000003E4],ecx</Description>
      <AddressString>dmc2.exe+23D598</AddressString>
      <Before>
        <Byte>82</Byte>
        <Byte>56</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>41</Byte>
        <Byte>09</Byte>
        <Byte>8A</Byte>
        <Byte>E4</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>42</Byte>
        <Byte>04</Byte>
        <Byte>41</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of and dword ptr [rbx+000003E4],-19</Description>
      <AddressString>dmc2.exe+22F099</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>EB</Byte>
        <Byte>38</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>A3</Byte>
        <Byte>E4</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>E7</Byte>
      </Actual>
      <After>
        <Byte>33</Byte>
        <Byte>C0</Byte>
        <Byte>66</Byte>
        <Byte>89</Byte>
        <Byte>83</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of or dword ptr [rcx+000003E4],02</Description>
      <AddressString>dmc2.exe+241B30</AddressString>
      <Before>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>89</Byte>
        <Byte>E4</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>02</Byte>
      </Actual>
      <After>
        <Byte>33</Byte>
        <Byte>C0</Byte>
        <Byte>C6</Byte>
        <Byte>81</Byte>
        <Byte>E3</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [rcx+00000094],eax</Description>
      <AddressString>dmc2.exe+207602</AddressString>
      <Before>
        <Byte>86</Byte>
        <Byte>94</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>81</Byte>
        <Byte>94</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>89</Byte>
        <Byte>9C</Byte>
        <Byte>24</Byte>
        <Byte>A8</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movss [rcx+00000094],xmm0</Description>
      <AddressString>dmc2.exe+2D3C70</AddressString>
      <Before>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>44</Byte>
        <Byte>90</Byte>
        <Byte>04</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>81</Byte>
        <Byte>94</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>81</Byte>
        <Byte>90</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp [rdi+00000140],dx</Description>
      <AddressString>dmc2.exe+54363</AddressString>
      <Before>
        <Byte>B1</Byte>
        <Byte>C4</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>39</Byte>
        <Byte>97</Byte>
        <Byte>40</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>5C</Byte>
        <Byte>24</Byte>
        <Byte>30</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movzx eax,word ptr [rdx+00000140]</Description>
      <AddressString>dmc2.exe+69D53</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>75</Byte>
        <Byte>F1</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>B7</Byte>
        <Byte>82</Byte>
        <Byte>40</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>66</Byte>
        <Byte>39</Byte>
        <Byte>05</Byte>
        <Byte>29</Byte>
        <Byte>72</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp [rbx+00000140],ax</Description>
      <AddressString>dmc2.exe+23103F</AddressString>
      <Before>
        <Byte>B8</Byte>
        <Byte>5E</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>39</Byte>
        <Byte>83</Byte>
        <Byte>40</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>7D</Byte>
        <Byte>35</Byte>
        <Byte>0F</Byte>
        <Byte>BA</Byte>
        <Byte>E2</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp word ptr [dmc2.exe+158A470],00</Description>
      <AddressString>dmc2.exe+468A9</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>03</Byte>
        <Byte>75</Byte>
        <Byte>55</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>83</Byte>
        <Byte>3D</Byte>
        <Byte>BF</Byte>
        <Byte>3B</Byte>
        <Byte>54</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>7F</Byte>
        <Byte>4B</Byte>
        <Byte>80</Byte>
        <Byte>78</Byte>
        <Byte>0C</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movsx ecx,word ptr [rcx+00000140]</Description>
      <AddressString>dmc2.exe+542C4</AddressString>
      <Before>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>F9</Byte>
        <Byte>8B</Byte>
        <Byte>F2</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>BF</Byte>
        <Byte>89</Byte>
        <Byte>40</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>E8</Byte>
        <Byte>B0</Byte>
        <Byte>E8</Byte>
        <Byte>FA</Byte>
        <Byte>FF</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movzx eax,word ptr [rdi+00000140]</Description>
      <AddressString>dmc2.exe+5430B</AddressString>
      <Before>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>2B</Byte>
        <Byte>F1</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>B7</Byte>
        <Byte>87</Byte>
        <Byte>40</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>33</Byte>
        <Byte>D2</Byte>
        <Byte>66</Byte>
        <Byte>89</Byte>
        <Byte>87</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movzx eax,word ptr [rdi+00000140]</Description>
      <AddressString>dmc2.exe+54331</AddressString>
      <Before>
        <Byte>97</Byte>
        <Byte>40</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>B7</Byte>
        <Byte>87</Byte>
        <Byte>40</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>B7</Byte>
        <Byte>8F</Byte>
        <Byte>44</Byte>
        <Byte>01</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jg dmc2.exe+54331</Description>
      <AddressString>dmc2.exe+54328</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>66</Byte>
        <Byte>85</Byte>
        <Byte>C0</Byte>
      </Before>
      <Actual>
        <Byte>7F</Byte>
        <Byte>07</Byte>
      </Actual>
      <After>
        <Byte>66</Byte>
        <Byte>89</Byte>
        <Byte>97</Byte>
        <Byte>40</Byte>
        <Byte>01</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movzx edi,word ptr [rbp+00000140]</Description>
      <AddressString>dmc2.exe+6984B</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>D9</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>B7</Byte>
        <Byte>BD</Byte>
        <Byte>40</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>44</Byte>
        <Byte>0F</Byte>
        <Byte>B7</Byte>
        <Byte>BD</Byte>
        <Byte>44</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jnl dmc2.exe+23107D</Description>
      <AddressString>dmc2.exe+231046</AddressString>
      <Before>
        <Byte>83</Byte>
        <Byte>40</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>7D</Byte>
        <Byte>35</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>BA</Byte>
        <Byte>E2</Byte>
        <Byte>15</Byte>
        <Byte>72</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [rbx+0000051C],sil</Description>
      <AddressString>dmc2.exe+23DE26</AddressString>
      <Before>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>EB</Byte>
        <Byte>07</Byte>
      </Before>
      <Actual>
        <Byte>40</Byte>
        <Byte>88</Byte>
        <Byte>B3</Byte>
        <Byte>1C</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>83</Byte>
        <Byte>68</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jmp dmc2.exe+2312FA</Description>
      <AddressString>dmc2.exe+2312D0</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>80</Byte>
        <Byte>FA</Byte>
        <Byte>02</Byte>
      </Before>
      <Actual>
        <Byte>EB</Byte>
        <Byte>28</Byte>
      </Actual>
      <After>
        <Byte>66</Byte>
        <Byte>85</Byte>
        <Byte>C0</Byte>
        <Byte>0F</Byte>
        <Byte>8F</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jle dmc2.exe+2312C6</Description>
      <AddressString>dmc2.exe+2312B7</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>66</Byte>
        <Byte>85</Byte>
        <Byte>C0</Byte>
      </Before>
      <Actual>
        <Byte>7E</Byte>
        <Byte>0D</Byte>
      </Actual>
      <After>
        <Byte>F6</Byte>
        <Byte>83</Byte>
        <Byte>0C</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp dl,02</Description>
      <AddressString>dmc2.exe+2312CD</AddressString>
      <Before>
        <Byte>1C</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>80</Byte>
        <Byte>FA</Byte>
        <Byte>02</Byte>
      </Actual>
      <After>
        <Byte>75</Byte>
        <Byte>28</Byte>
        <Byte>66</Byte>
        <Byte>85</Byte>
        <Byte>C0</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je dmc2.exe+2313D1</Description>
      <AddressString>dmc2.exe+2312C0</AddressString>
      <Before>
        <Byte>0C</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>20</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>0B</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>C6</Byte>
        <Byte>83</Byte>
        <Byte>1C</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp word ptr [rbx+0000051E],00</Description>
      <AddressString>dmc2.exe+23E2F0</AddressString>
      <Before>
        <Byte>84</Byte>
        <Byte>BE</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>83</Byte>
        <Byte>BB</Byte>
        <Byte>1E</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>B0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je dmc2.exe+23E3AE</Description>
      <AddressString>dmc2.exe+23E2F8</AddressString>
      <Before>
        <Byte>1E</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>B0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>80</Byte>
        <Byte>F9</Byte>
        <Byte>01</Byte>
        <Byte>75</Byte>
        <Byte>1A</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp cl,01</Description>
      <AddressString>dmc2.exe+23E2FE</AddressString>
      <Before>
        <Byte>84</Byte>
        <Byte>B0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>80</Byte>
        <Byte>F9</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>75</Byte>
        <Byte>1A</Byte>
        <Byte>48</Byte>
        <Byte>0F</Byte>
        <Byte>BE</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jmp dmc2.exe+23E31D</Description>
      <AddressString>dmc2.exe+23E301</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>80</Byte>
        <Byte>F9</Byte>
        <Byte>01</Byte>
      </Before>
      <Actual>
        <Byte>EB</Byte>
        <Byte>1A</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>0F</Byte>
        <Byte>BE</Byte>
        <Byte>83</Byte>
        <Byte>1A</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jg dmc2.exe+23DE1D</Description>
      <AddressString>dmc2.exe+23DDFA</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>66</Byte>
        <Byte>85</Byte>
        <Byte>C9</Byte>
      </Before>
      <Actual>
        <Byte>7F</Byte>
        <Byte>21</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>B7</Byte>
        <Byte>83</Byte>
        <Byte>48</Byte>
        <Byte>01</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of test cx,cx</Description>
      <AddressString>dmc2.exe+23DDF7</AddressString>
      <Before>
        <Byte>8B</Byte>
        <Byte>1E</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>85</Byte>
        <Byte>C9</Byte>
      </Actual>
      <After>
        <Byte>7F</Byte>
        <Byte>21</Byte>
        <Byte>0F</Byte>
        <Byte>B7</Byte>
        <Byte>83</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [rbx+0000051E],si</Description>
      <AddressString>dmc2.exe+23DE10</AddressString>
      <Before>
        <Byte>B3</Byte>
        <Byte>9C</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>89</Byte>
        <Byte>B3</Byte>
        <Byte>1E</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>89</Byte>
        <Byte>B3</Byte>
        <Byte>2C</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov byte ptr [rbx+0000051C],00</Description>
      <AddressString>dmc2.exe+2312C6</AddressString>
      <Before>
        <Byte>84</Byte>
        <Byte>0B</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>C6</Byte>
        <Byte>83</Byte>
        <Byte>1C</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>80</Byte>
        <Byte>FA</Byte>
        <Byte>02</Byte>
        <Byte>75</Byte>
        <Byte>28</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jng dmc2.exe+23118E</Description>
      <AddressString>dmc2.exe+230FEF</AddressString>
      <Before>
        <Byte>81</Byte>
        <Byte>1E</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>8E</Byte>
        <Byte>99</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>89</Byte>
        <Byte>2C</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp byte ptr [rcx+00000518],00</Description>
      <AddressString>dmc2.exe+230FC9</AddressString>
      <Before>
        <Byte>82</Byte>
        <Byte>C5</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>80</Byte>
        <Byte>B9</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>85</Byte>
        <Byte>B8</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jb dmc2.exe+23118E</Description>
      <AddressString>dmc2.exe+230FC3</AddressString>
      <Before>
        <Byte>D9</Byte>
        <Byte>0F</Byte>
        <Byte>BA</Byte>
        <Byte>E2</Byte>
        <Byte>17</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>82</Byte>
        <Byte>C5</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>80</Byte>
        <Byte>B9</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je dmc2.exe+231330</Description>
      <AddressString>dmc2.exe+2312FD</AddressString>
      <Before>
        <Byte>DC</Byte>
        <Byte>FF</Byte>
        <Byte>F6</Byte>
        <Byte>C1</Byte>
        <Byte>18</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>31</Byte>
      </Actual>
      <After>
        <Byte>80</Byte>
        <Byte>BB</Byte>
        <Byte>50</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov edx,00000018</Description>
      <AddressString>dmc2.exe+2312E8</AddressString>
      <Before>
        <Byte>E8</Byte>
        <Byte>1C</Byte>
        <Byte>FE</Byte>
        <Byte>DC</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>BA</Byte>
        <Byte>18</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>CB</Byte>
        <Byte>48</Byte>
        <Byte>83</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of call dmc2.exe+1104</Description>
      <AddressString>dmc2.exe+2312E3</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>CB</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>1C</Byte>
        <Byte>FE</Byte>
        <Byte>DC</Byte>
        <Byte>FF</Byte>
      </Actual>
      <After>
        <Byte>BA</Byte>
        <Byte>18</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jg dmc2.exe+2313D1</Description>
      <AddressString>dmc2.exe+2312D5</AddressString>
      <Before>
        <Byte>75</Byte>
        <Byte>28</Byte>
        <Byte>66</Byte>
        <Byte>85</Byte>
        <Byte>C0</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>8F</Byte>
        <Byte>F6</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>BA</Byte>
        <Byte>18</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of test ax,ax</Description>
      <AddressString>dmc2.exe+2312D2</AddressString>
      <Before>
        <Byte>80</Byte>
        <Byte>FA</Byte>
        <Byte>02</Byte>
        <Byte>75</Byte>
        <Byte>28</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>85</Byte>
        <Byte>C0</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>8F</Byte>
        <Byte>F6</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of test byte ptr [rbx+0000040C],20</Description>
      <AddressString>dmc2.exe+2312B9</AddressString>
      <Before>
        <Byte>66</Byte>
        <Byte>85</Byte>
        <Byte>C0</Byte>
        <Byte>7E</Byte>
        <Byte>0D</Byte>
      </Before>
      <Actual>
        <Byte>F6</Byte>
        <Byte>83</Byte>
        <Byte>0C</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>20</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>0B</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of test ax,ax</Description>
      <AddressString>dmc2.exe+2312B4</AddressString>
      <Before>
        <Byte>83</Byte>
        <Byte>1E</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>85</Byte>
        <Byte>C0</Byte>
      </Actual>
      <After>
        <Byte>7E</Byte>
        <Byte>0D</Byte>
        <Byte>F6</Byte>
        <Byte>83</Byte>
        <Byte>0C</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of ja dmc2.exe+2313D1</Description>
      <AddressString>dmc2.exe+2312A7</AddressString>
      <Before>
        <Byte>57</Byte>
        <Byte>C0</Byte>
        <Byte>0F</Byte>
        <Byte>2F</Byte>
        <Byte>C8</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>87</Byte>
        <Byte>24</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>B7</Byte>
        <Byte>83</Byte>
        <Byte>1E</Byte>
        <Byte>05</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of add [rbx+00000528],00010000</Description>
      <AddressString>dmc2.exe+23E33C</AddressString>
      <Before>
        <Byte>80</Byte>
        <Byte>F9</Byte>
        <Byte>01</Byte>
        <Byte>75</Byte>
        <Byte>78</Byte>
      </Before>
      <Actual>
        <Byte>81</Byte>
        <Byte>83</Byte>
        <Byte>28</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>8B</Byte>
        <Byte>1B</Byte>
        <Byte>05</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov byte ptr [rbx+00000518],01</Description>
      <AddressString>dmc2.exe+2310A5</AddressString>
      <Before>
        <Byte>B8</Byte>
        <Byte>FF</Byte>
        <Byte>7F</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>C6</Byte>
        <Byte>83</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>BA</Byte>
        <Byte>EA</Byte>
        <Byte>17</Byte>
        <Byte>66</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movsx edx,word ptr [rbx+0000052A]</Description>
      <AddressString>dmc2.exe+23E0F8</AddressString>
      <Before>
        <Byte>B3</Byte>
        <Byte>2A</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>BF</Byte>
        <Byte>93</Byte>
        <Byte>2A</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>CB</Byte>
        <Byte>E8</Byte>
        <Byte>E3</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movsx rcx,byte ptr [rcx+00000518]</Description>
      <AddressString>dmc2.exe+23D4EC</AddressString>
      <Before>
        <Byte>8B</Byte>
        <Byte>5C</Byte>
        <Byte>24</Byte>
        <Byte>08</Byte>
        <Byte>C3</Byte>
      </Before>
      <Actual>
        <Byte>48</Byte>
        <Byte>0F</Byte>
        <Byte>BE</Byte>
        <Byte>89</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>49</Byte>
        <Byte>8B</Byte>
        <Byte>82</Byte>
        <Byte>80</Byte>
        <Byte>05</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp [rcx+00000518],al</Description>
      <AddressString>dmc2.exe+210F5D</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>41</Byte>
      </Before>
      <Actual>
        <Byte>38</Byte>
        <Byte>81</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>75</Byte>
        <Byte>52</Byte>
        <Byte>80</Byte>
        <Byte>B9</Byte>
        <Byte>4B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jne dmc2.exe+210FB7</Description>
      <AddressString>dmc2.exe+210F63</AddressString>
      <Before>
        <Byte>81</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>75</Byte>
        <Byte>52</Byte>
      </Actual>
      <After>
        <Byte>80</Byte>
        <Byte>B9</Byte>
        <Byte>4B</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp byte ptr [rcx+00000518],00</Description>
      <AddressString>dmc2.exe+241400</AddressString>
      <Before>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
      </Before>
      <Actual>
        <Byte>80</Byte>
        <Byte>B9</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>74</Byte>
        <Byte>22</Byte>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>81</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp [rax+00000518],cl</Description>
      <AddressString>dmc2.exe+2E10CC</AddressString>
      <Before>
        <Byte>4C</Byte>
        <Byte>8B</Byte>
        <Byte>C1</Byte>
        <Byte>33</Byte>
        <Byte>C9</Byte>
      </Before>
      <Actual>
        <Byte>38</Byte>
        <Byte>88</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>74</Byte>
        <Byte>07</Byte>
        <Byte>0F</Byte>
        <Byte>BE</Byte>
        <Byte>88</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je dmc2.exe+2E10DB</Description>
      <AddressString>dmc2.exe+2E10D2</AddressString>
      <Before>
        <Byte>88</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>07</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>BE</Byte>
        <Byte>88</Byte>
        <Byte>1A</Byte>
        <Byte>05</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp [rax+00000518],cl</Description>
      <AddressString>dmc2.exe+2E2271</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>8B</Byte>
        <Byte>CB</Byte>
      </Before>
      <Actual>
        <Byte>38</Byte>
        <Byte>88</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>74</Byte>
        <Byte>07</Byte>
        <Byte>0F</Byte>
        <Byte>BE</Byte>
        <Byte>88</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp byte ptr [rbx+00000518],01</Description>
      <AddressString>dmc2.exe+23DC83</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>75</Byte>
        <Byte>26</Byte>
      </Before>
      <Actual>
        <Byte>80</Byte>
        <Byte>BB</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>75</Byte>
        <Byte>1D</Byte>
        <Byte>80</Byte>
        <Byte>BB</Byte>
        <Byte>19</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jne dmc2.exe+23DCA9</Description>
      <AddressString>dmc2.exe+23DC8A</AddressString>
      <Before>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>01</Byte>
      </Before>
      <Actual>
        <Byte>75</Byte>
        <Byte>1D</Byte>
      </Actual>
      <After>
        <Byte>80</Byte>
        <Byte>BB</Byte>
        <Byte>19</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp [rbx+00000518],sil</Description>
      <AddressString>dmc2.exe+23DE77</AddressString>
      <Before>
        <Byte>B3</Byte>
        <Byte>70</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>40</Byte>
        <Byte>38</Byte>
        <Byte>B3</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>74</Byte>
        <Byte>12</Byte>
        <Byte>B8</Byte>
        <Byte>FF</Byte>
        <Byte>7F</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je dmc2.exe+23DE92</Description>
      <AddressString>dmc2.exe+23DE7E</AddressString>
      <Before>
        <Byte>B3</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>12</Byte>
      </Actual>
      <After>
        <Byte>B8</Byte>
        <Byte>FF</Byte>
        <Byte>7F</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp byte ptr [rbx+00000518],02</Description>
      <AddressString>dmc2.exe+23E026</AddressString>
      <Before>
        <Byte>20</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>75</Byte>
        <Byte>67</Byte>
      </Before>
      <Actual>
        <Byte>80</Byte>
        <Byte>BB</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>02</Byte>
      </Actual>
      <After>
        <Byte>74</Byte>
        <Byte>5E</Byte>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>83</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp byte ptr [rcx+00000518],02</Description>
      <AddressString>dmc2.exe+22EE4A</AddressString>
      <Before>
        <Byte>E9</Byte>
        <Byte>94</Byte>
        <Byte>02</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>80</Byte>
        <Byte>B9</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>02</Byte>
      </Actual>
      <After>
        <Byte>74</Byte>
        <Byte>F0</Byte>
        <Byte>F6</Byte>
        <Byte>81</Byte>
        <Byte>0C</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp byte ptr [rbx+00000518],01</Description>
      <AddressString>dmc2.exe+22E539</AddressString>
      <Before>
        <Byte>83</Byte>
        <Byte>E9</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>80</Byte>
        <Byte>BB</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>75</Byte>
        <Byte>13</Byte>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>83</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je dmc2.exe+22EE43</Description>
      <AddressString>dmc2.exe+22EE51</AddressString>
      <Before>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>02</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>F0</Byte>
      </Actual>
      <After>
        <Byte>F6</Byte>
        <Byte>81</Byte>
        <Byte>0C</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jne dmc2.exe+22E555</Description>
      <AddressString>dmc2.exe+22E540</AddressString>
      <Before>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>01</Byte>
      </Before>
      <Actual>
        <Byte>75</Byte>
        <Byte>13</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>83</Byte>
        <Byte>1A</Byte>
        <Byte>05</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp byte ptr [rbx+00000518],01</Description>
      <AddressString>dmc2.exe+1EBE0B</AddressString>
      <Before>
        <Byte>5C</Byte>
        <Byte>24</Byte>
        <Byte>20</Byte>
        <Byte>75</Byte>
        <Byte>15</Byte>
      </Before>
      <Actual>
        <Byte>80</Byte>
        <Byte>BB</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8D</Byte>
        <Byte>05</Byte>
        <Byte>57</Byte>
        <Byte>C2</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp byte ptr [rbx+00000518],00</Description>
      <AddressString>dmc2.exe+1EBFD2</AddressString>
      <Before>
        <Byte>E8</Byte>
        <Byte>AE</Byte>
        <Byte>7E</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>80</Byte>
        <Byte>BB</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>74</Byte>
        <Byte>10</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>CB</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp byte ptr [rsi+00000518],00</Description>
      <AddressString>dmc2.exe+2075EF</AddressString>
      <Before>
        <Byte>E9</Byte>
        <Byte>4A</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>80</Byte>
        <Byte>BE</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>3D</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp byte ptr [rdi+00000518],02</Description>
      <AddressString>dmc2.exe+2E2024</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>D9</Byte>
      </Before>
      <Actual>
        <Byte>80</Byte>
        <Byte>BF</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>02</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>B7</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je dmc2.exe+2E20E8</Description>
      <AddressString>dmc2.exe+2E202B</AddressString>
      <Before>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>02</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>B7</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>97</Byte>
        <Byte>E0</Byte>
        <Byte>03</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp byte ptr [r8+00000518],00</Description>
      <AddressString>dmc2.exe+2DFF3A</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>4C</Byte>
        <Byte>8B</Byte>
        <Byte>C9</Byte>
      </Before>
      <Actual>
        <Byte>41</Byte>
        <Byte>80</Byte>
        <Byte>B8</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>EB</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp byte ptr [rdi+00000518],00</Description>
      <AddressString>dmc2.exe+2E495B</AddressString>
      <Before>
        <Byte>85</Byte>
        <Byte>90</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>80</Byte>
        <Byte>BF</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>85</Byte>
        <Byte>83</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jne dmc2.exe+2E4AEB</Description>
      <AddressString>dmc2.exe+2E4962</AddressString>
      <Before>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>85</Byte>
        <Byte>83</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>80</Byte>
        <Byte>BF</Byte>
        <Byte>4B</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp byte ptr [rsi+00000518],02</Description>
      <AddressString>dmc2.exe+2E6E6A</AddressString>
      <Before>
        <Byte>E8</Byte>
        <Byte>26</Byte>
        <Byte>ED</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>80</Byte>
        <Byte>BE</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>02</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>7C</Byte>
        <Byte>24</Byte>
        <Byte>30</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp byte ptr [rdx+00000518],00</Description>
      <AddressString>dmc2.exe+69D4A</AddressString>
      <Before>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>C3</Byte>
      </Before>
      <Actual>
        <Byte>80</Byte>
        <Byte>BA</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>75</Byte>
        <Byte>F1</Byte>
        <Byte>0F</Byte>
        <Byte>B7</Byte>
        <Byte>82</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jne dmc2.exe+69D44</Description>
      <AddressString>dmc2.exe+69D51</AddressString>
      <Before>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>75</Byte>
        <Byte>F1</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>B7</Byte>
        <Byte>82</Byte>
        <Byte>40</Byte>
        <Byte>01</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp byte ptr [rbx+00000518],01</Description>
      <AddressString>dmc2.exe+1F1BD7</AddressString>
      <Before>
        <Byte>E8</Byte>
        <Byte>C9</Byte>
        <Byte>03</Byte>
        <Byte>E1</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>80</Byte>
        <Byte>BB</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>75</Byte>
        <Byte>72</Byte>
        <Byte>48</Byte>
        <Byte>0F</Byte>
        <Byte>BE</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp byte ptr [rbx+00000518],02</Description>
      <AddressString>dmc2.exe+1F1C52</AddressString>
      <Before>
        <Byte>E8</Byte>
        <Byte>56</Byte>
        <Byte>05</Byte>
        <Byte>E1</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>80</Byte>
        <Byte>BB</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>02</Byte>
      </Actual>
      <After>
        <Byte>75</Byte>
        <Byte>1F</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>8B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp byte ptr [rdi+00000518],01</Description>
      <AddressString>dmc2.exe+208C9A</AddressString>
      <Before>
        <Byte>84</Byte>
        <Byte>C7</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>80</Byte>
        <Byte>BF</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>85</Byte>
        <Byte>BA</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp byte ptr [r14+00000518],00</Description>
      <AddressString>dmc2.exe+1FF1B5</AddressString>
      <Before>
        <Byte>79</Byte>
        <Byte>04</Byte>
        <Byte>0A</Byte>
        <Byte>EB</Byte>
        <Byte>12</Byte>
      </Before>
      <Actual>
        <Byte>41</Byte>
        <Byte>80</Byte>
        <Byte>BE</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>85</Byte>
        <Byte>7D</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp byte ptr [rdi+00000518],00</Description>
      <AddressString>dmc2.exe+20250F</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>EB</Byte>
        <Byte>1F</Byte>
      </Before>
      <Actual>
        <Byte>80</Byte>
        <Byte>BF</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>85</Byte>
        <Byte>FC</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp byte ptr [rax+00000518],02</Description>
      <AddressString>dmc2.exe+6743F</AddressString>
      <Before>
        <Byte>8E</Byte>
        <Byte>9C</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>80</Byte>
        <Byte>B8</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>02</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>89</Byte>
        <Byte>BC</Byte>
        <Byte>24</Byte>
        <Byte>80</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp byte ptr [rbp+00000518],02</Description>
      <AddressString>dmc2.exe+2E21A9</AddressString>
      <Before>
        <Byte>A9</Byte>
        <Byte>88</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>80</Byte>
        <Byte>BD</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>02</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>14</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movsx rdx,byte ptr [rcx+00000518]</Description>
      <AddressString>dmc2.exe+23ABB1</AddressString>
      <Before>
        <Byte>81</Byte>
        <Byte>88</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>48</Byte>
        <Byte>0F</Byte>
        <Byte>BE</Byte>
        <Byte>91</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>1C</Byte>
        <Byte>D0</Byte>
        <Byte>0F</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp byte ptr [r8+00000518],00</Description>
      <AddressString>dmc2.exe+2429B5</AddressString>
      <Before>
        <Byte>E0</Byte>
        <Byte>A8</Byte>
        <Byte>55</Byte>
        <Byte>74</Byte>
        <Byte>2F</Byte>
      </Before>
      <Actual>
        <Byte>41</Byte>
        <Byte>80</Byte>
        <Byte>B8</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>75</Byte>
        <Byte>25</Byte>
        <Byte>41</Byte>
        <Byte>80</Byte>
        <Byte>B8</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jne dmc2.exe+2429E4</Description>
      <AddressString>dmc2.exe+2429BD</AddressString>
      <Before>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>75</Byte>
        <Byte>25</Byte>
      </Actual>
      <After>
        <Byte>41</Byte>
        <Byte>80</Byte>
        <Byte>B8</Byte>
        <Byte>4B</Byte>
        <Byte>05</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp byte ptr [rcx+00000518],02</Description>
      <AddressString>dmc2.exe+594C7</AddressString>
      <Before>
        <Byte>79</Byte>
        <Byte>06</Byte>
        <Byte>00</Byte>
        <Byte>75</Byte>
        <Byte>42</Byte>
      </Before>
      <Actual>
        <Byte>80</Byte>
        <Byte>B9</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>02</Byte>
      </Actual>
      <After>
        <Byte>74</Byte>
        <Byte>39</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>91</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je dmc2.exe+2E2280</Description>
      <AddressString>dmc2.exe+2E2277</AddressString>
      <Before>
        <Byte>88</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>07</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>BE</Byte>
        <Byte>88</Byte>
        <Byte>1A</Byte>
        <Byte>05</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp byte ptr [rbx+00000518],01</Description>
      <AddressString>dmc2.exe+216CF6</AddressString>
      <Before>
        <Byte>3B</Byte>
        <Byte>43</Byte>
        <Byte>0C</Byte>
        <Byte>74</Byte>
        <Byte>3D</Byte>
      </Before>
      <Actual>
        <Byte>80</Byte>
        <Byte>BB</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>75</Byte>
        <Byte>1E</Byte>
        <Byte>80</Byte>
        <Byte>BB</Byte>
        <Byte>1A</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp byte ptr [rbx+00000518],01</Description>
      <AddressString>dmc2.exe+2169F5</AddressString>
      <Before>
        <Byte>EE</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>01</Byte>
      </Before>
      <Actual>
        <Byte>80</Byte>
        <Byte>BB</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>75</Byte>
        <Byte>1A</Byte>
        <Byte>80</Byte>
        <Byte>BB</Byte>
        <Byte>1A</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp byte ptr [rax+00000518],01</Description>
      <AddressString>dmc2.exe+2E1D52</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>F9</Byte>
      </Before>
      <Actual>
        <Byte>80</Byte>
        <Byte>B8</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>74</Byte>
        <Byte>0C</Byte>
        <Byte>C6</Byte>
        <Byte>81</Byte>
        <Byte>48</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je dmc2.exe+2E1D67</Description>
      <AddressString>dmc2.exe+2E1D59</AddressString>
      <Before>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>01</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>0C</Byte>
      </Actual>
      <After>
        <Byte>C6</Byte>
        <Byte>81</Byte>
        <Byte>48</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp byte ptr [dmc2.exe+158A848],01</Description>
      <AddressString>dmc2.exe+8088C</AddressString>
      <Before>
        <Byte>C7</Byte>
        <Byte>40</Byte>
        <Byte>06</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>80</Byte>
        <Byte>3D</Byte>
        <Byte>B5</Byte>
        <Byte>9F</Byte>
        <Byte>50</Byte>
        <Byte>01</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>75</Byte>
        <Byte>11</Byte>
        <Byte>45</Byte>
        <Byte>33</Byte>
        <Byte>C0</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp byte ptr [rbx+00000519],03</Description>
      <AddressString>dmc2.exe+23DC8C</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>01</Byte>
        <Byte>75</Byte>
        <Byte>1D</Byte>
      </Before>
      <Actual>
        <Byte>80</Byte>
        <Byte>BB</Byte>
        <Byte>19</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>03</Byte>
      </Actual>
      <After>
        <Byte>75</Byte>
        <Byte>14</Byte>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jne dmc2.exe+23DCA9</Description>
      <AddressString>dmc2.exe+23DC93</AddressString>
      <Before>
        <Byte>19</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>03</Byte>
      </Before>
      <Actual>
        <Byte>75</Byte>
        <Byte>14</Byte>
      </Actual>
      <After>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>83</Byte>
        <Byte>94</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp byte ptr [rdi+00000518],01</Description>
      <AddressString>dmc2.exe+8982F</AddressString>
      <Before>
        <Byte>3F</Byte>
        <Byte>66</Byte>
        <Byte>89</Byte>
        <Byte>73</Byte>
        <Byte>0C</Byte>
      </Before>
      <Actual>
        <Byte>80</Byte>
        <Byte>BF</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>75</Byte>
        <Byte>45</Byte>
        <Byte>BF</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov byte ptr [dmc2.exe+158A849],02</Description>
      <AddressString>7FF642800057</AddressString>
      <Before>
        <Byte>E9</Byte>
        <Byte>7A</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>C6</Byte>
        <Byte>05</Byte>
        <Byte>EB</Byte>
        <Byte>A7</Byte>
        <Byte>59</Byte>
        <Byte>01</Byte>
        <Byte>02</Byte>
      </Actual>
      <After>
        <Byte>E9</Byte>
        <Byte>6E</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movsx eax,byte ptr [rbx+00000519]</Description>
      <AddressString>dmc2.exe+6866B</AddressString>
      <Before>
        <Byte>BC</Byte>
        <Byte>80</Byte>
        <Byte>02</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>BE</Byte>
        <Byte>83</Byte>
        <Byte>19</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>85</Byte>
        <Byte>C0</Byte>
        <Byte>0F</Byte>
        <Byte>8E</Byte>
        <Byte>E6</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movzx eax,byte ptr [rbp+00000519]</Description>
      <AddressString>dmc2.exe+69AB3</AddressString>
      <Before>
        <Byte>35</Byte>
        <Byte>DB</Byte>
        <Byte>74</Byte>
        <Byte>5C</Byte>
        <Byte>01</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>85</Byte>
        <Byte>19</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>88</Byte>
        <Byte>83</Byte>
        <Byte>62</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jne dmc2.exe+23DCA9</Description>
      <AddressString>dmc2.exe+23DC81</AddressString>
      <Before>
        <Byte>25</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>75</Byte>
        <Byte>26</Byte>
      </Actual>
      <After>
        <Byte>80</Byte>
        <Byte>BB</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je dmc2.exe+24142B</Description>
      <AddressString>dmc2.exe+241407</AddressString>
      <Before>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>22</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>81</Byte>
        <Byte>7D</Byte>
        <Byte>05</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp byte ptr [rbx+00000518],01</Description>
      <AddressString>dmc2.exe+21152E</AddressString>
      <Before>
        <Byte>E8</Byte>
        <Byte>43</Byte>
        <Byte>25</Byte>
        <Byte>DF</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>80</Byte>
        <Byte>BB</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>75</Byte>
        <Byte>1C</Byte>
        <Byte>80</Byte>
        <Byte>BB</Byte>
        <Byte>1A</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je dmc2.exe+59509</Description>
      <AddressString>dmc2.exe+594CE</AddressString>
      <Before>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>02</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>39</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>91</Byte>
        <Byte>38</Byte>
        <Byte>02</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp byte ptr [rbx+00000518],01</Description>
      <AddressString>dmc2.exe+211CB8</AddressString>
      <Before>
        <Byte>E8</Byte>
        <Byte>69</Byte>
        <Byte>09</Byte>
        <Byte>DF</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>80</Byte>
        <Byte>BB</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>75</Byte>
        <Byte>2B</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>8B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp byte ptr [rcx+00000518],02</Description>
      <AddressString>dmc2.exe+2C72AE</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>8B</Byte>
        <Byte>FA</Byte>
        <Byte>75</Byte>
        <Byte>64</Byte>
      </Before>
      <Actual>
        <Byte>80</Byte>
        <Byte>B9</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>02</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>89</Byte>
        <Byte>5C</Byte>
        <Byte>24</Byte>
        <Byte>58</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp byte ptr [rbx+00000518],01</Description>
      <AddressString>dmc2.exe+211E97</AddressString>
      <Before>
        <Byte>E8</Byte>
        <Byte>8A</Byte>
        <Byte>07</Byte>
        <Byte>DF</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>80</Byte>
        <Byte>BB</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>85</Byte>
        <Byte>B4</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp byte ptr [rsi+00000518],00</Description>
      <AddressString>dmc2.exe+2E560B</AddressString>
      <Before>
        <Byte>85</Byte>
        <Byte>5B</Byte>
        <Byte>02</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>80</Byte>
        <Byte>BE</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>85</Byte>
        <Byte>4E</Byte>
        <Byte>02</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp [r9+00000518],dl</Description>
      <AddressString>dmc2.exe+65C90</AddressString>
      <Before>
        <Byte>81</Byte>
        <Byte>68</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>41</Byte>
        <Byte>38</Byte>
        <Byte>91</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>75</Byte>
        <Byte>53</Byte>
        <Byte>41</Byte>
        <Byte>FE</Byte>
        <Byte>C0</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jne dmc2.exe+1F1C7A</Description>
      <AddressString>dmc2.exe+1F1C59</AddressString>
      <Before>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>02</Byte>
      </Before>
      <Actual>
        <Byte>75</Byte>
        <Byte>1F</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>8B</Byte>
        <Byte>A0</Byte>
        <Byte>02</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jne dmc2.exe+2E6E7C</Description>
      <AddressString>dmc2.exe+2E6E76</AddressString>
      <Before>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>7C</Byte>
        <Byte>24</Byte>
        <Byte>30</Byte>
      </Before>
      <Actual>
        <Byte>75</Byte>
        <Byte>04</Byte>
      </Actual>
      <After>
        <Byte>80</Byte>
        <Byte>4B</Byte>
        <Byte>07</Byte>
        <Byte>01</Byte>
        <Byte>48</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je dmc2.exe+2E22CA</Description>
      <AddressString>dmc2.exe+2E21B0</AddressString>
      <Before>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>02</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>14</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>80</Byte>
        <Byte>B9</Byte>
        <Byte>49</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [rdi+000003F4],ax</Description>
      <AddressString>dmc2.exe+23ABF4</AddressString>
      <Before>
        <Byte>E8</Byte>
        <Byte>8C</Byte>
        <Byte>7F</Byte>
        <Byte>DC</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>89</Byte>
        <Byte>87</Byte>
        <Byte>F4</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>BA</Byte>
        <Byte>02</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [rcx+000003F4],ax</Description>
      <AddressString>dmc2.exe+23A8EC</AddressString>
      <Before>
        <Byte>81</Byte>
        <Byte>3C</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>89</Byte>
        <Byte>81</Byte>
        <Byte>F4</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>46</Byte>
        <Byte>2C</Byte>
        <Byte>89</Byte>
        <Byte>41</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [rdi+000003F4],ax</Description>
      <AddressString>dmc2.exe+23A9D9</AddressString>
      <Before>
        <Byte>0F</Byte>
        <Byte>28</Byte>
        <Byte>7C</Byte>
        <Byte>24</Byte>
        <Byte>40</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>89</Byte>
        <Byte>87</Byte>
        <Byte>F4</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>80</Byte>
        <Byte>BF</Byte>
        <Byte>3C</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jne dmc2.exe+23A90C</Description>
      <AddressString>dmc2.exe+23A8CD</AddressString>
      <Before>
        <Byte>0F</Byte>
        <Byte>29</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>30</Byte>
      </Before>
      <Actual>
        <Byte>75</Byte>
        <Byte>3D</Byte>
      </Actual>
      <After>
        <Byte>C6</Byte>
        <Byte>81</Byte>
        <Byte>E3</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jne dmc2.exe+23AC8F</Description>
      <AddressString>dmc2.exe+23ABA4</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>F9</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>85</Byte>
        <Byte>E5</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>81</Byte>
        <Byte>88</Byte>
        <Byte>05</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of and dword ptr [rdi+000003E4],-19</Description>
      <AddressString>dmc2.exe+23AC6F</AddressString>
      <Before>
        <Byte>E8</Byte>
        <Byte>BD</Byte>
        <Byte>78</Byte>
        <Byte>DC</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>A7</Byte>
        <Byte>E4</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>E7</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>CF</Byte>
        <Byte>C6</Byte>
        <Byte>87</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [rbx+000003E4],ecx</Description>
      <AddressString>dmc2.exe+23133B</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>0F</Byte>
        <Byte>BA</Byte>
        <Byte>F1</Byte>
        <Byte>17</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>8B</Byte>
        <Byte>E4</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>CB</Byte>
        <Byte>C6</Byte>
        <Byte>83</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [r8+000003E4],eax</Description>
      <AddressString>dmc2.exe+23D454</AddressString>
      <Before>
        <Byte>23</Byte>
        <Byte>C1</Byte>
        <Byte>41</Byte>
        <Byte>0B</Byte>
        <Byte>C1</Byte>
      </Before>
      <Actual>
        <Byte>41</Byte>
        <Byte>89</Byte>
        <Byte>80</Byte>
        <Byte>E4</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>C3</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of test [dmc2.exe+158A714],00040000</Description>
      <AddressString>dmc2.exe+9C3D2</AddressString>
      <Before>
        <Byte>48</Byte>
        <Byte>1A</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>FD</Byte>
      </Before>
      <Actual>
        <Byte>F7</Byte>
        <Byte>05</Byte>
        <Byte>38</Byte>
        <Byte>E3</Byte>
        <Byte>4E</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>B1</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [r10+00000556],al</Description>
      <AddressString>dmc2.exe+23D591</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>42</Byte>
        <Byte>07</Byte>
      </Before>
      <Actual>
        <Byte>41</Byte>
        <Byte>88</Byte>
        <Byte>82</Byte>
        <Byte>56</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>41</Byte>
        <Byte>09</Byte>
        <Byte>8A</Byte>
        <Byte>E4</Byte>
        <Byte>03</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je dmc2.exe+22ED06</Description>
      <AddressString>dmc2.exe+22ECDD</AddressString>
      <Before>
        <Byte>B0</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>08</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>27</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>B7</Byte>
        <Byte>83</Byte>
        <Byte>62</Byte>
        <Byte>05</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jb dmc2.exe+22ED0C</Description>
      <AddressString>dmc2.exe+22ECD4</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>28</Byte>
        <Byte>44</Byte>
        <Byte>8B</Byte>
        <Byte>CF</Byte>
      </Before>
      <Actual>
        <Byte>72</Byte>
        <Byte>36</Byte>
      </Actual>
      <After>
        <Byte>F6</Byte>
        <Byte>83</Byte>
        <Byte>B0</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp word ptr [rbx+000004DA],28</Description>
      <AddressString>dmc2.exe+22ECC9</AddressString>
      <Before>
        <Byte>41</Byte>
        <Byte>FF</Byte>
        <Byte>C1</Byte>
        <Byte>EB</Byte>
        <Byte>43</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>83</Byte>
        <Byte>BB</Byte>
        <Byte>DA</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>28</Byte>
      </Actual>
      <After>
        <Byte>44</Byte>
        <Byte>8B</Byte>
        <Byte>CF</Byte>
        <Byte>72</Byte>
        <Byte>36</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je dmc2.exe+22ECC9</Description>
      <AddressString>dmc2.exe+22ECA8</AddressString>
      <Before>
        <Byte>A9</Byte>
        <Byte>F7</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>1F</Byte>
      </Actual>
      <After>
        <Byte>44</Byte>
        <Byte>0F</Byte>
        <Byte>B7</Byte>
        <Byte>8B</Byte>
        <Byte>B0</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp eax,-01</Description>
      <AddressString>dmc2.exe+22EC97</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>44</Byte>
        <Byte>8B</Byte>
        <Byte>C0</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>FF</Byte>
      </Actual>
      <After>
        <Byte>74</Byte>
        <Byte>D6</Byte>
        <Byte>48</Byte>
        <Byte>89</Byte>
        <Byte>7C</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je dmc2.exe+22EC8F</Description>
      <AddressString>dmc2.exe+22EC81</AddressString>
      <Before>
        <Byte>E4</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>18</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>0C</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>BE</Byte>
        <Byte>81</Byte>
        <Byte>58</Byte>
        <Byte>05</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of test byte ptr [rcx+000003E4],18</Description>
      <AddressString>dmc2.exe+22EC7A</AddressString>
      <Before>
        <Byte>83</Byte>
        <Byte>C4</Byte>
        <Byte>20</Byte>
        <Byte>5B</Byte>
        <Byte>C3</Byte>
      </Before>
      <Actual>
        <Byte>F6</Byte>
        <Byte>81</Byte>
        <Byte>E4</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>18</Byte>
      </Actual>
      <After>
        <Byte>74</Byte>
        <Byte>0C</Byte>
        <Byte>0F</Byte>
        <Byte>BE</Byte>
        <Byte>81</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je dmc2.exe+22EC72</Description>
      <AddressString>dmc2.exe+22EC9A</AddressString>
      <Before>
        <Byte>8B</Byte>
        <Byte>C0</Byte>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>D6</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>89</Byte>
        <Byte>7C</Byte>
        <Byte>24</Byte>
        <Byte>38</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov eax,00000003</Description>
      <AddressString>dmc2.exe+236829</AddressString>
      <Before>
        <Byte>45</Byte>
        <Byte>C8</Byte>
        <Byte>F6</Byte>
        <Byte>C1</Byte>
        <Byte>08</Byte>
      </Before>
      <Actual>
        <Byte>B8</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>CB</Byte>
        <Byte>44</Byte>
        <Byte>0F</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je dmc2.exe+23683E</Description>
      <AddressString>dmc2.exe+2367F5</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>F6</Byte>
        <Byte>C1</Byte>
        <Byte>01</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>47</Byte>
      </Actual>
      <After>
        <Byte>66</Byte>
        <Byte>83</Byte>
        <Byte>BB</Byte>
        <Byte>DA</Byte>
        <Byte>04</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je dmc2.exe+236897</Description>
      <AddressString>dmc2.exe+2367E5</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>F6</Byte>
        <Byte>40</Byte>
        <Byte>2B</Byte>
        <Byte>10</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>AC</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>8B</Byte>
        <Byte>57</Byte>
        <Byte>05</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je dmc2.exe+2367DA</Description>
      <AddressString>dmc2.exe+2367D0</AddressString>
      <Before>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>A8</Byte>
        <Byte>40</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>08</Byte>
      </Actual>
      <After>
        <Byte>0C</Byte>
        <Byte>02</Byte>
        <Byte>88</Byte>
        <Byte>83</Byte>
        <Byte>57</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of test cl,01</Description>
      <AddressString>dmc2.exe+2367F2</AddressString>
      <Before>
        <Byte>8B</Byte>
        <Byte>57</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>F6</Byte>
        <Byte>C1</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>74</Byte>
        <Byte>47</Byte>
        <Byte>66</Byte>
        <Byte>83</Byte>
        <Byte>BB</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jne dmc2.exe+236897</Description>
      <AddressString>dmc2.exe+23683C</AddressString>
      <Before>
        <Byte>E5</Byte>
        <Byte>DC</Byte>
        <Byte>FF</Byte>
        <Byte>85</Byte>
        <Byte>C0</Byte>
      </Before>
      <Actual>
        <Byte>75</Byte>
        <Byte>59</Byte>
      </Actual>
      <After>
        <Byte>F6</Byte>
        <Byte>83</Byte>
        <Byte>57</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of test byte ptr [rax+2B],10</Description>
      <AddressString>dmc2.exe+2367E1</AddressString>
      <Before>
        <Byte>83</Byte>
        <Byte>B8</Byte>
        <Byte>02</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>F6</Byte>
        <Byte>40</Byte>
        <Byte>2B</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>AC</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [rbx+2E],al</Description>
      <AddressString>dmc2.exe+1F31A2</AddressString>
      <Before>
        <Byte>13</Byte>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>4A</Byte>
        <Byte>12</Byte>
      </Before>
      <Actual>
        <Byte>88</Byte>
        <Byte>43</Byte>
        <Byte>2E</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>B7</Byte>
        <Byte>72</Byte>
        <Byte>10</Byte>
        <Byte>0F</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [rbx+2D],al</Description>
      <AddressString>dmc2.exe+1F315D</AddressString>
      <Before>
        <Byte>2C</Byte>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>42</Byte>
        <Byte>0B</Byte>
      </Before>
      <Actual>
        <Byte>88</Byte>
        <Byte>43</Byte>
        <Byte>2D</Byte>
      </Actual>
      <After>
        <Byte>49</Byte>
        <Byte>8B</Byte>
        <Byte>41</Byte>
        <Byte>08</Byte>
        <Byte>0F</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [rbx+2C],al</Description>
      <AddressString>dmc2.exe+1F3156</AddressString>
      <Before>
        <Byte>2B</Byte>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>42</Byte>
        <Byte>0A</Byte>
      </Before>
      <Actual>
        <Byte>88</Byte>
        <Byte>43</Byte>
        <Byte>2C</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>42</Byte>
        <Byte>0B</Byte>
        <Byte>88</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [rbx+2B],al</Description>
      <AddressString>dmc2.exe+1F314F</AddressString>
      <Before>
        <Byte>2A</Byte>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>42</Byte>
        <Byte>09</Byte>
      </Before>
      <Actual>
        <Byte>88</Byte>
        <Byte>43</Byte>
        <Byte>2B</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>42</Byte>
        <Byte>0A</Byte>
        <Byte>88</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [rcx+2B],al</Description>
      <AddressString>dmc2.exe+23674B</AddressString>
      <Before>
        <Byte>08</Byte>
        <Byte>74</Byte>
        <Byte>0C</Byte>
        <Byte>24</Byte>
        <Byte>F7</Byte>
      </Before>
      <Actual>
        <Byte>88</Byte>
        <Byte>41</Byte>
        <Byte>2B</Byte>
      </Actual>
      <After>
        <Byte>80</Byte>
        <Byte>8B</Byte>
        <Byte>58</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov byte ptr [rax+2C],00</Description>
      <AddressString>dmc2.exe+241F4A</AddressString>
      <Before>
        <Byte>83</Byte>
        <Byte>B8</Byte>
        <Byte>02</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>C6</Byte>
        <Byte>40</Byte>
        <Byte>2C</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>83</Byte>
        <Byte>C4</Byte>
        <Byte>20</Byte>
        <Byte>5B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov byte ptr [rax+2C],00</Description>
      <AddressString>dmc2.exe+241F32</AddressString>
      <Before>
        <Byte>83</Byte>
        <Byte>B8</Byte>
        <Byte>02</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>C6</Byte>
        <Byte>40</Byte>
        <Byte>2C</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>83</Byte>
        <Byte>C4</Byte>
        <Byte>20</Byte>
        <Byte>5B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of test cl,04</Description>
      <AddressString>dmc2.exe+236811</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>48</Byte>
        <Byte>1B</Byte>
        <Byte>C0</Byte>
      </Before>
      <Actual>
        <Byte>F6</Byte>
        <Byte>C1</Byte>
        <Byte>04</Byte>
      </Actual>
      <After>
        <Byte>44</Byte>
        <Byte>0F</Byte>
        <Byte>BE</Byte>
        <Byte>8C</Byte>
        <Byte>18</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of test cl,08</Description>
      <AddressString>dmc2.exe+236826</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>44</Byte>
        <Byte>0F</Byte>
        <Byte>45</Byte>
        <Byte>C8</Byte>
      </Before>
      <Actual>
        <Byte>F6</Byte>
        <Byte>C1</Byte>
        <Byte>08</Byte>
      </Actual>
      <After>
        <Byte>B8</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp word ptr [rbx+000004DA],28</Description>
      <AddressString>dmc2.exe+2367F7</AddressString>
      <Before>
        <Byte>F6</Byte>
        <Byte>C1</Byte>
        <Byte>01</Byte>
        <Byte>74</Byte>
        <Byte>47</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>83</Byte>
        <Byte>BB</Byte>
        <Byte>DA</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>28</Byte>
      </Actual>
      <After>
        <Byte>44</Byte>
        <Byte>0F</Byte>
        <Byte>BE</Byte>
        <Byte>83</Byte>
        <Byte>51</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movsx r9d,byte ptr [rax+rbx+00000555]</Description>
      <AddressString>dmc2.exe+236814</AddressString>
      <Before>
        <Byte>1B</Byte>
        <Byte>C0</Byte>
        <Byte>F6</Byte>
        <Byte>C1</Byte>
        <Byte>04</Byte>
      </Before>
      <Actual>
        <Byte>44</Byte>
        <Byte>0F</Byte>
        <Byte>BE</Byte>
        <Byte>8C</Byte>
        <Byte>18</Byte>
        <Byte>55</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>B8</Byte>
        <Byte>02</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [r10+00000555],al</Description>
      <AddressString>dmc2.exe+23D586</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>42</Byte>
        <Byte>06</Byte>
      </Before>
      <Actual>
        <Byte>41</Byte>
        <Byte>88</Byte>
        <Byte>82</Byte>
        <Byte>55</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>42</Byte>
        <Byte>07</Byte>
        <Byte>41</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov eax,[rcx+000003E4]</Description>
      <AddressString>dmc2.exe+236726</AddressString>
      <Before>
        <Byte>53</Byte>
        <Byte>48</Byte>
        <Byte>83</Byte>
        <Byte>EC</Byte>
        <Byte>20</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>81</Byte>
        <Byte>E4</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>D9</Byte>
        <Byte>83</Byte>
        <Byte>E0</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp al,18</Description>
      <AddressString>dmc2.exe+236732</AddressString>
      <Before>
        <Byte>8B</Byte>
        <Byte>D9</Byte>
        <Byte>83</Byte>
        <Byte>E0</Byte>
        <Byte>18</Byte>
      </Before>
      <Actual>
        <Byte>3C</Byte>
        <Byte>18</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>85</Byte>
        <Byte>5D</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jne dmc2.exe+236897</Description>
      <AddressString>dmc2.exe+236734</AddressString>
      <Before>
        <Byte>83</Byte>
        <Byte>E0</Byte>
        <Byte>18</Byte>
        <Byte>3C</Byte>
        <Byte>18</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>85</Byte>
        <Byte>5D</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>89</Byte>
        <Byte>B8</Byte>
        <Byte>02</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je dmc2.exe+236755</Description>
      <AddressString>dmc2.exe+236747</AddressString>
      <Before>
        <Byte>B6</Byte>
        <Byte>41</Byte>
        <Byte>2B</Byte>
        <Byte>A8</Byte>
        <Byte>08</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>0C</Byte>
      </Actual>
      <After>
        <Byte>24</Byte>
        <Byte>F7</Byte>
        <Byte>88</Byte>
        <Byte>41</Byte>
        <Byte>2B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of test al,08</Description>
      <AddressString>dmc2.exe+236745</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>41</Byte>
        <Byte>2B</Byte>
      </Before>
      <Actual>
        <Byte>A8</Byte>
        <Byte>08</Byte>
      </Actual>
      <After>
        <Byte>74</Byte>
        <Byte>0C</Byte>
        <Byte>24</Byte>
        <Byte>F7</Byte>
        <Byte>88</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of test byte ptr [rax+2B],01</Description>
      <AddressString>dmc2.exe+23675C</AddressString>
      <Before>
        <Byte>83</Byte>
        <Byte>B8</Byte>
        <Byte>02</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>F6</Byte>
        <Byte>40</Byte>
        <Byte>2B</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>74</Byte>
        <Byte>78</Byte>
        <Byte>0F</Byte>
        <Byte>B7</Byte>
        <Byte>93</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je dmc2.exe+2367DA</Description>
      <AddressString>dmc2.exe+236760</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>F6</Byte>
        <Byte>40</Byte>
        <Byte>2B</Byte>
        <Byte>01</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>78</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>B7</Byte>
        <Byte>93</Byte>
        <Byte>B4</Byte>
        <Byte>04</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of test dl,10</Description>
      <AddressString>dmc2.exe+236769</AddressString>
      <Before>
        <Byte>93</Byte>
        <Byte>B4</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>F6</Byte>
        <Byte>C2</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>74</Byte>
        <Byte>55</Byte>
        <Byte>80</Byte>
        <Byte>8B</Byte>
        <Byte>57</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je dmc2.exe+2367C3</Description>
      <AddressString>dmc2.exe+23676C</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>F6</Byte>
        <Byte>C2</Byte>
        <Byte>10</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>55</Byte>
      </Actual>
      <After>
        <Byte>80</Byte>
        <Byte>8B</Byte>
        <Byte>57</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jns dmc2.exe+2367BA</Description>
      <AddressString>dmc2.exe+2367B3</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>66</Byte>
        <Byte>41</Byte>
        <Byte>03</Byte>
        <Byte>C0</Byte>
      </Before>
      <Actual>
        <Byte>79</Byte>
        <Byte>05</Byte>
      </Actual>
      <After>
        <Byte>80</Byte>
        <Byte>C9</Byte>
        <Byte>04</Byte>
        <Byte>EB</Byte>
        <Byte>03</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jb dmc2.exe+22ED0C</Description>
      <AddressString>dmc2.exe+22ECC2</AddressString>
      <Before>
        <Byte>DA</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>28</Byte>
      </Before>
      <Actual>
        <Byte>72</Byte>
        <Byte>48</Byte>
      </Actual>
      <After>
        <Byte>41</Byte>
        <Byte>FF</Byte>
        <Byte>C1</Byte>
        <Byte>EB</Byte>
        <Byte>43</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp word ptr [rbx+000004DA],28</Description>
      <AddressString>dmc2.exe+22ECBA</AddressString>
      <Before>
        <Byte>02</Byte>
        <Byte>41</Byte>
        <Byte>83</Byte>
        <Byte>E1</Byte>
        <Byte>02</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>83</Byte>
        <Byte>BB</Byte>
        <Byte>DA</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>28</Byte>
      </Actual>
      <After>
        <Byte>72</Byte>
        <Byte>48</Byte>
        <Byte>41</Byte>
        <Byte>FF</Byte>
        <Byte>C1</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [rbx+00000542],cl</Description>
      <AddressString>dmc2.exe+22FEB2</AddressString>
      <Before>
        <Byte>F6</Byte>
        <Byte>00</Byte>
        <Byte>04</Byte>
        <Byte>74</Byte>
        <Byte>06</Byte>
      </Before>
      <Actual>
        <Byte>88</Byte>
        <Byte>8B</Byte>
        <Byte>42</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>28</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>50</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [rbx+00000542],al</Description>
      <AddressString>dmc2.exe+238DF0</AddressString>
      <Before>
        <Byte>FF</Byte>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>41</Byte>
        <Byte>01</Byte>
      </Before>
      <Actual>
        <Byte>88</Byte>
        <Byte>83</Byte>
        <Byte>42</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>41</Byte>
        <Byte>02</Byte>
        <Byte>48</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [rbx+00000542],dl</Description>
      <AddressString>dmc2.exe+23023B</AddressString>
      <Before>
        <Byte>83</Byte>
        <Byte>88</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>88</Byte>
        <Byte>93</Byte>
        <Byte>42</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>0C</Byte>
        <Byte>C8</Byte>
        <Byte>F6</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jle dmc2.exe+230200</Description>
      <AddressString>dmc2.exe+230228</AddressString>
      <Before>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>84</Byte>
        <Byte>D2</Byte>
      </Before>
      <Actual>
        <Byte>7E</Byte>
        <Byte>D6</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>0F</Byte>
        <Byte>BE</Byte>
        <Byte>8B</Byte>
        <Byte>18</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp byte ptr [rbx+00000540],00</Description>
      <AddressString>dmc2.exe+230216</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>04</Byte>
        <Byte>74</Byte>
        <Byte>EA</Byte>
      </Before>
      <Actual>
        <Byte>80</Byte>
        <Byte>BB</Byte>
        <Byte>40</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>74</Byte>
        <Byte>E1</Byte>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>93</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je dmc2.exe+230200</Description>
      <AddressString>dmc2.exe+230214</AddressString>
      <Before>
        <Byte>0C</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>04</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>EA</Byte>
      </Actual>
      <After>
        <Byte>80</Byte>
        <Byte>BB</Byte>
        <Byte>40</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of test byte ptr [rbx+0000040C],04</Description>
      <AddressString>dmc2.exe+23020D</AddressString>
      <Before>
        <Byte>F6</Byte>
        <Byte>C1</Byte>
        <Byte>02</Byte>
        <Byte>74</Byte>
        <Byte>F3</Byte>
      </Before>
      <Actual>
        <Byte>F6</Byte>
        <Byte>83</Byte>
        <Byte>0C</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>04</Byte>
      </Actual>
      <After>
        <Byte>74</Byte>
        <Byte>EA</Byte>
        <Byte>80</Byte>
        <Byte>BB</Byte>
        <Byte>40</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of test cl,02</Description>
      <AddressString>dmc2.exe+230208</AddressString>
      <Before>
        <Byte>83</Byte>
        <Byte>C4</Byte>
        <Byte>20</Byte>
        <Byte>5B</Byte>
        <Byte>C3</Byte>
      </Before>
      <Actual>
        <Byte>F6</Byte>
        <Byte>C1</Byte>
        <Byte>02</Byte>
      </Actual>
      <After>
        <Byte>74</Byte>
        <Byte>F3</Byte>
        <Byte>F6</Byte>
        <Byte>83</Byte>
        <Byte>0C</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je dmc2.exe+230200</Description>
      <AddressString>dmc2.exe+23020B</AddressString>
      <Before>
        <Byte>5B</Byte>
        <Byte>C3</Byte>
        <Byte>F6</Byte>
        <Byte>C1</Byte>
        <Byte>02</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>F3</Byte>
      </Actual>
      <After>
        <Byte>F6</Byte>
        <Byte>83</Byte>
        <Byte>0C</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jne dmc2.exe+230208</Description>
      <AddressString>dmc2.exe+2301FE</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>83</Byte>
        <Byte>E0</Byte>
        <Byte>02</Byte>
      </Before>
      <Actual>
        <Byte>75</Byte>
        <Byte>08</Byte>
      </Actual>
      <After>
        <Byte>33</Byte>
        <Byte>C0</Byte>
        <Byte>48</Byte>
        <Byte>83</Byte>
        <Byte>C4</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je dmc2.exe+230208</Description>
      <AddressString>dmc2.exe+2301F2</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>F6</Byte>
        <Byte>C1</Byte>
        <Byte>18</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>14</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>BE</Byte>
        <Byte>83</Byte>
        <Byte>58</Byte>
        <Byte>05</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp [rbx+000004DD],al</Description>
      <AddressString>dmc2.exe+22E491</AddressString>
      <Before>
        <Byte>83</Byte>
        <Byte>DF</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>38</Byte>
        <Byte>83</Byte>
        <Byte>DD</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>74</Byte>
        <Byte>33</Byte>
        <Byte>88</Byte>
        <Byte>83</Byte>
        <Byte>DD</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je dmc2.exe+22E4CC</Description>
      <AddressString>dmc2.exe+22E497</AddressString>
      <Before>
        <Byte>83</Byte>
        <Byte>DD</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>33</Byte>
      </Actual>
      <After>
        <Byte>88</Byte>
        <Byte>83</Byte>
        <Byte>DD</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp byte ptr [rbx+00000518],02</Description>
      <AddressString>dmc2.exe+22E4B2</AddressString>
      <Before>
        <Byte>05</Byte>
        <Byte>93</Byte>
        <Byte>BD</Byte>
        <Byte>35</Byte>
        <Byte>01</Byte>
      </Before>
      <Actual>
        <Byte>80</Byte>
        <Byte>BB</Byte>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>02</Byte>
      </Actual>
      <After>
        <Byte>74</Byte>
        <Byte>11</Byte>
        <Byte>80</Byte>
        <Byte>BB</Byte>
        <Byte>4B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je dmc2.exe+22E4CC</Description>
      <AddressString>dmc2.exe+22E4B9</AddressString>
      <Before>
        <Byte>18</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>02</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>11</Byte>
      </Actual>
      <After>
        <Byte>80</Byte>
        <Byte>BB</Byte>
        <Byte>4B</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp byte ptr [rbx+0000054B],01</Description>
      <AddressString>dmc2.exe+22E4BB</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>02</Byte>
        <Byte>74</Byte>
        <Byte>11</Byte>
      </Before>
      <Actual>
        <Byte>80</Byte>
        <Byte>BB</Byte>
        <Byte>4B</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>74</Byte>
        <Byte>08</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>CB</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je dmc2.exe+22E4CC</Description>
      <AddressString>dmc2.exe+22E4C2</AddressString>
      <Before>
        <Byte>4B</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>01</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>08</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>CB</Byte>
        <Byte>E8</Byte>
        <Byte>E0</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movsx eax,byte ptr [rbx+00000558]</Description>
      <AddressString>dmc2.exe+2301F4</AddressString>
      <Before>
        <Byte>F6</Byte>
        <Byte>C1</Byte>
        <Byte>18</Byte>
        <Byte>74</Byte>
        <Byte>14</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>BE</Byte>
        <Byte>83</Byte>
        <Byte>58</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>83</Byte>
        <Byte>E0</Byte>
        <Byte>02</Byte>
        <Byte>75</Byte>
        <Byte>08</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of and eax,02</Description>
      <AddressString>dmc2.exe+2301FB</AddressString>
      <Before>
        <Byte>83</Byte>
        <Byte>58</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>E0</Byte>
        <Byte>02</Byte>
      </Actual>
      <After>
        <Byte>75</Byte>
        <Byte>08</Byte>
        <Byte>33</Byte>
        <Byte>C0</Byte>
        <Byte>48</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je dmc2.exe+230200</Description>
      <AddressString>dmc2.exe+23021D</AddressString>
      <Before>
        <Byte>40</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>E1</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>93</Byte>
        <Byte>42</Byte>
        <Byte>05</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je dmc2.exe+230250</Description>
      <AddressString>dmc2.exe+230248</AddressString>
      <Before>
        <Byte>0C</Byte>
        <Byte>C8</Byte>
        <Byte>F6</Byte>
        <Byte>01</Byte>
        <Byte>04</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>06</Byte>
      </Actual>
      <After>
        <Byte>88</Byte>
        <Byte>93</Byte>
        <Byte>43</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movzx edx,byte ptr [rbx+00000542]</Description>
      <AddressString>dmc2.exe+23021F</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>74</Byte>
        <Byte>E1</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>93</Byte>
        <Byte>42</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>84</Byte>
        <Byte>D2</Byte>
        <Byte>7E</Byte>
        <Byte>D6</Byte>
        <Byte>48</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of test cl,18</Description>
      <AddressString>dmc2.exe+2301EF</AddressString>
      <Before>
        <Byte>89</Byte>
        <Byte>E4</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>F6</Byte>
        <Byte>C1</Byte>
        <Byte>18</Byte>
      </Actual>
      <After>
        <Byte>74</Byte>
        <Byte>14</Byte>
        <Byte>0F</Byte>
        <Byte>BE</Byte>
        <Byte>83</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov byte ptr [rcx+0000054A],02</Description>
      <AddressString>dmc2.exe+22F7A1</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>18</Byte>
        <Byte>74</Byte>
        <Byte>0E</Byte>
      </Before>
      <Actual>
        <Byte>C6</Byte>
        <Byte>81</Byte>
        <Byte>4A</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>02</Byte>
      </Actual>
      <After>
        <Byte>33</Byte>
        <Byte>C0</Byte>
        <Byte>48</Byte>
        <Byte>83</Byte>
        <Byte>C4</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov byte ptr [rbx+0000054A],02</Description>
      <AddressString>dmc2.exe+22ED90</AddressString>
      <Before>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>75</Byte>
        <Byte>07</Byte>
      </Before>
      <Actual>
        <Byte>C6</Byte>
        <Byte>83</Byte>
        <Byte>4A</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>02</Byte>
      </Actual>
      <After>
        <Byte>40</Byte>
        <Byte>88</Byte>
        <Byte>BB</Byte>
        <Byte>58</Byte>
        <Byte>05</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov byte ptr [rcx+0000063C],02</Description>
      <AddressString>dmc2.exe+238D06</AddressString>
      <Before>
        <Byte>4E</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>22</Byte>
      </Before>
      <Actual>
        <Byte>C6</Byte>
        <Byte>81</Byte>
        <Byte>3C</Byte>
        <Byte>06</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>02</Byte>
      </Actual>
      <After>
        <Byte>C6</Byte>
        <Byte>81</Byte>
        <Byte>E3</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of and dword ptr [rbx+000003E4],-19</Description>
      <AddressString>dmc2.exe+23026F</AddressString>
      <Before>
        <Byte>E8</Byte>
        <Byte>2F</Byte>
        <Byte>47</Byte>
        <Byte>DD</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>A3</Byte>
        <Byte>E4</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>E7</Byte>
      </Actual>
      <After>
        <Byte>BA</Byte>
        <Byte>07</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of test byte ptr [rcx],04</Description>
      <AddressString>dmc2.exe+230245</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>0C</Byte>
        <Byte>C8</Byte>
      </Before>
      <Actual>
        <Byte>F6</Byte>
        <Byte>01</Byte>
        <Byte>04</Byte>
      </Actual>
      <After>
        <Byte>74</Byte>
        <Byte>06</Byte>
        <Byte>88</Byte>
        <Byte>93</Byte>
        <Byte>43</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of test dl,dl</Description>
      <AddressString>dmc2.exe+230226</AddressString>
      <Before>
        <Byte>93</Byte>
        <Byte>42</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>84</Byte>
        <Byte>D2</Byte>
      </Actual>
      <After>
        <Byte>7E</Byte>
        <Byte>D6</Byte>
        <Byte>48</Byte>
        <Byte>0F</Byte>
        <Byte>BE</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp word ptr [rcx+000004DA],28</Description>
      <AddressString>dmc2.exe+23D690</AddressString>
      <Before>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>83</Byte>
        <Byte>B9</Byte>
        <Byte>DA</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>28</Byte>
      </Actual>
      <After>
        <Byte>72</Byte>
        <Byte>1D</Byte>
        <Byte>0F</Byte>
        <Byte>B7</Byte>
        <Byte>81</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jb dmc2.exe+23D6B7</Description>
      <AddressString>dmc2.exe+23D698</AddressString>
      <Before>
        <Byte>DA</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>28</Byte>
      </Before>
      <Actual>
        <Byte>72</Byte>
        <Byte>1D</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>B7</Byte>
        <Byte>81</Byte>
        <Byte>62</Byte>
        <Byte>05</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of test byte ptr [rcx+000003E4],18</Description>
      <AddressString>dmc2.exe+22F798</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>08</Byte>
        <Byte>75</Byte>
        <Byte>10</Byte>
      </Before>
      <Actual>
        <Byte>F6</Byte>
        <Byte>81</Byte>
        <Byte>E4</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>18</Byte>
      </Actual>
      <After>
        <Byte>74</Byte>
        <Byte>0E</Byte>
        <Byte>C6</Byte>
        <Byte>81</Byte>
        <Byte>4A</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jne dmc2.exe+22F7A8</Description>
      <AddressString>dmc2.exe+22F796</AddressString>
      <Before>
        <Byte>B0</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>08</Byte>
      </Before>
      <Actual>
        <Byte>75</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>F6</Byte>
        <Byte>81</Byte>
        <Byte>E4</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of test byte ptr [rcx+000004B0],08</Description>
      <AddressString>dmc2.exe+22F78F</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>84</Byte>
        <Byte>C0</Byte>
        <Byte>74</Byte>
        <Byte>19</Byte>
      </Before>
      <Actual>
        <Byte>F6</Byte>
        <Byte>81</Byte>
        <Byte>B0</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>08</Byte>
      </Actual>
      <After>
        <Byte>75</Byte>
        <Byte>10</Byte>
        <Byte>F6</Byte>
        <Byte>81</Byte>
        <Byte>E4</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je dmc2.exe+22F7A8</Description>
      <AddressString>dmc2.exe+22F78D</AddressString>
      <Before>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>84</Byte>
        <Byte>C0</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>19</Byte>
      </Actual>
      <After>
        <Byte>F6</Byte>
        <Byte>81</Byte>
        <Byte>B0</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of test byte ptr [rax+000003E4],1C</Description>
      <AddressString>dmc2.exe+197F3B</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>47</Byte>
        <Byte>18</Byte>
      </Before>
      <Actual>
        <Byte>F6</Byte>
        <Byte>80</Byte>
        <Byte>E4</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>1C</Byte>
      </Actual>
      <After>
        <Byte>74</Byte>
        <Byte>0A</Byte>
        <Byte>33</Byte>
        <Byte>C9</Byte>
        <Byte>89</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of test byte ptr [rsi+000003E4],04</Description>
      <AddressString>dmc2.exe+240BFE</AddressString>
      <Before>
        <Byte>F6</Byte>
        <Byte>C1</Byte>
        <Byte>20</Byte>
        <Byte>74</Byte>
        <Byte>0E</Byte>
      </Before>
      <Actual>
        <Byte>F6</Byte>
        <Byte>86</Byte>
        <Byte>E4</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>04</Byte>
      </Actual>
      <After>
        <Byte>BA</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov eax,[rbx+000003E4]</Description>
      <AddressString>dmc2.exe+23DC6E</AddressString>
      <Before>
        <Byte>E8</Byte>
        <Byte>E5</Byte>
        <Byte>49</Byte>
        <Byte>DC</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>83</Byte>
        <Byte>E4</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>0D</Byte>
        <Byte>50</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of test [rbx+000003E4],00002000</Description>
      <AddressString>dmc2.exe+23E01A</AddressString>
      <Before>
        <Byte>B3</Byte>
        <Byte>66</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>F7</Byte>
        <Byte>83</Byte>
        <Byte>E4</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>20</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>75</Byte>
        <Byte>67</Byte>
        <Byte>80</Byte>
        <Byte>BB</Byte>
        <Byte>18</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of test [rcx+000003E4],0000F000</Description>
      <AddressString>dmc2.exe+231DD5</AddressString>
      <Before>
        <Byte>48</Byte>
        <Byte>89</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>30</Byte>
      </Before>
      <Actual>
        <Byte>F7</Byte>
        <Byte>81</Byte>
        <Byte>E4</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>F0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>F1</Byte>
        <Byte>74</Byte>
        <Byte>15</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of test byte ptr [rbx+000003E4],18</Description>
      <AddressString>dmc2.exe+22E455</AddressString>
      <Before>
        <Byte>E8</Byte>
        <Byte>6B</Byte>
        <Byte>39</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>F6</Byte>
        <Byte>83</Byte>
        <Byte>E4</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>18</Byte>
      </Actual>
      <After>
        <Byte>75</Byte>
        <Byte>07</Byte>
        <Byte>C6</Byte>
        <Byte>83</Byte>
        <Byte>58</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of test byte ptr [rcx+000003E4],18</Description>
      <AddressString>dmc2.exe+230696</AddressString>
      <Before>
        <Byte>53</Byte>
        <Byte>48</Byte>
        <Byte>83</Byte>
        <Byte>EC</Byte>
        <Byte>20</Byte>
      </Before>
      <Actual>
        <Byte>F6</Byte>
        <Byte>81</Byte>
        <Byte>E4</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>18</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>D9</Byte>
        <Byte>74</Byte>
        <Byte>10</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of test byte ptr [rbx+000003E4],18</Description>
      <AddressString>dmc2.exe+22E475</AddressString>
      <Before>
        <Byte>E8</Byte>
        <Byte>1B</Byte>
        <Byte>22</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>F6</Byte>
        <Byte>83</Byte>
        <Byte>E4</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>18</Byte>
      </Actual>
      <After>
        <Byte>74</Byte>
        <Byte>0C</Byte>
        <Byte>0F</Byte>
        <Byte>BE</Byte>
        <Byte>83</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov edx,[rcx+000003E4]</Description>
      <AddressString>dmc2.exe+230FB6</AddressString>
      <Before>
        <Byte>53</Byte>
        <Byte>48</Byte>
        <Byte>83</Byte>
        <Byte>EC</Byte>
        <Byte>20</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>91</Byte>
        <Byte>E4</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>D9</Byte>
        <Byte>0F</Byte>
        <Byte>BA</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov ecx,[rcx+000003E4]</Description>
      <AddressString>dmc2.exe+231269</AddressString>
      <Before>
        <Byte>EC</Byte>
        <Byte>20</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>D9</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>89</Byte>
        <Byte>E4</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>BA</Byte>
        <Byte>E1</Byte>
        <Byte>17</Byte>
        <Byte>0F</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov eax,[rcx+000003E4]</Description>
      <AddressString>dmc2.exe+22F99B</AddressString>
      <Before>
        <Byte>24</Byte>
        <Byte>80</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>81</Byte>
        <Byte>E4</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>D9</Byte>
        <Byte>A8</Byte>
        <Byte>10</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of test byte ptr [rcx+000003E4],18</Description>
      <AddressString>dmc2.exe+22EE2B</AddressString>
      <Before>
        <Byte>24</Byte>
        <Byte>C0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>F6</Byte>
        <Byte>81</Byte>
        <Byte>E4</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>18</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>D9</Byte>
        <Byte>74</Byte>
        <Byte>13</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov ecx,[rcx+000003E4]</Description>
      <AddressString>dmc2.exe+22F5F9</AddressString>
      <Before>
        <Byte>EC</Byte>
        <Byte>20</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>D9</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>89</Byte>
        <Byte>E4</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>F6</Byte>
        <Byte>C1</Byte>
        <Byte>18</Byte>
        <Byte>74</Byte>
        <Byte>14</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of test byte ptr [rcx+000003E4],10</Description>
      <AddressString>dmc2.exe+22F846</AddressString>
      <Before>
        <Byte>53</Byte>
        <Byte>48</Byte>
        <Byte>83</Byte>
        <Byte>EC</Byte>
        <Byte>20</Byte>
      </Before>
      <Actual>
        <Byte>F6</Byte>
        <Byte>81</Byte>
        <Byte>E4</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>D9</Byte>
        <Byte>74</Byte>
        <Byte>08</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of test byte ptr [rbx+000003E4],08</Description>
      <AddressString>dmc2.exe+22E509</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>74</Byte>
        <Byte>30</Byte>
      </Before>
      <Actual>
        <Byte>F6</Byte>
        <Byte>83</Byte>
        <Byte>E4</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>08</Byte>
      </Actual>
      <After>
        <Byte>75</Byte>
        <Byte>27</Byte>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>83</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je dmc2.exe+22EC72</Description>
      <AddressString>dmc2.exe+22EC8D</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>83</Byte>
        <Byte>E0</Byte>
        <Byte>40</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>E3</Byte>
      </Actual>
      <After>
        <Byte>E8</Byte>
        <Byte>2C</Byte>
        <Byte>18</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of test byte ptr [rcx+0000040C],08</Description>
      <AddressString>dmc2.exe+22EC66</AddressString>
      <Before>
        <Byte>53</Byte>
        <Byte>48</Byte>
        <Byte>83</Byte>
        <Byte>EC</Byte>
        <Byte>20</Byte>
      </Before>
      <Actual>
        <Byte>F6</Byte>
        <Byte>81</Byte>
        <Byte>0C</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>08</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>D9</Byte>
        <Byte>75</Byte>
        <Byte>08</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jne dmc2.exe+22EC7A</Description>
      <AddressString>dmc2.exe+22EC70</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>08</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>D9</Byte>
      </Before>
      <Actual>
        <Byte>75</Byte>
        <Byte>08</Byte>
      </Actual>
      <After>
        <Byte>33</Byte>
        <Byte>C0</Byte>
        <Byte>48</Byte>
        <Byte>83</Byte>
        <Byte>C4</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jne dmc2.exe+23179B</Description>
      <AddressString>dmc2.exe+231768</AddressString>
      <Before>
        <Byte>D3</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
        <Byte>85</Byte>
        <Byte>C0</Byte>
      </Before>
      <Actual>
        <Byte>75</Byte>
        <Byte>31</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>CB</Byte>
        <Byte>E8</Byte>
        <Byte>EE</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of test eax,eax</Description>
      <AddressString>dmc2.exe+231766</AddressString>
      <Before>
        <Byte>E8</Byte>
        <Byte>3A</Byte>
        <Byte>D3</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>85</Byte>
        <Byte>C0</Byte>
      </Actual>
      <After>
        <Byte>75</Byte>
        <Byte>31</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>CB</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [rbx+0000053F],al</Description>
      <AddressString>dmc2.exe+238D34</AddressString>
      <Before>
        <Byte>C1</Byte>
        <Byte>F8</Byte>
        <Byte>0E</Byte>
        <Byte>24</Byte>
        <Byte>03</Byte>
      </Before>
      <Actual>
        <Byte>88</Byte>
        <Byte>83</Byte>
        <Byte>3F</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>EB</Byte>
        <Byte>07</Byte>
        <Byte>C6</Byte>
        <Byte>83</Byte>
        <Byte>3F</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of xor eax,eax</Description>
      <AddressString>dmc2.exe+22EC72</AddressString>
      <Before>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>D9</Byte>
        <Byte>75</Byte>
        <Byte>08</Byte>
      </Before>
      <Actual>
        <Byte>33</Byte>
        <Byte>C0</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>83</Byte>
        <Byte>C4</Byte>
        <Byte>20</Byte>
        <Byte>5B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je dmc2.exe+23D572</Description>
      <AddressString>dmc2.exe+23D554</AddressString>
      <Before>
        <Byte>B6</Byte>
        <Byte>42</Byte>
        <Byte>03</Byte>
        <Byte>3C</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>1C</Byte>
      </Actual>
      <After>
        <Byte>41</Byte>
        <Byte>88</Byte>
        <Byte>82</Byte>
        <Byte>EB</Byte>
        <Byte>03</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp al,-01</Description>
      <AddressString>dmc2.exe+23D552</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>42</Byte>
        <Byte>03</Byte>
      </Before>
      <Actual>
        <Byte>3C</Byte>
        <Byte>FF</Byte>
      </Actual>
      <After>
        <Byte>74</Byte>
        <Byte>1C</Byte>
        <Byte>41</Byte>
        <Byte>88</Byte>
        <Byte>82</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of call dmc2.exe+499E</Description>
      <AddressString>dmc2.exe+23026A</AddressString>
      <Before>
        <Byte>83</Byte>
        <Byte>30</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>2F</Byte>
        <Byte>47</Byte>
        <Byte>DD</Byte>
        <Byte>FF</Byte>
      </Actual>
      <After>
        <Byte>83</Byte>
        <Byte>A3</Byte>
        <Byte>E4</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [dmc2.exe+F1B2AC],al</Description>
      <AddressString>dmc2.exe+3DE6E</AddressString>
      <Before>
        <Byte>D4</Byte>
        <Byte>ED</Byte>
        <Byte>00</Byte>
        <Byte>74</Byte>
        <Byte>10</Byte>
      </Before>
      <Actual>
        <Byte>88</Byte>
        <Byte>05</Byte>
        <Byte>38</Byte>
        <Byte>D4</Byte>
        <Byte>ED</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>C7</Byte>
        <Byte>05</Byte>
        <Byte>2A</Byte>
        <Byte>D4</Byte>
        <Byte>ED</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jne dmc2.exe+25DF31</Description>
      <AddressString>dmc2.exe+25DF1D</AddressString>
      <Before>
        <Byte>01</Byte>
        <Byte>80</Byte>
        <Byte>79</Byte>
        <Byte>01</Byte>
        <Byte>02</Byte>
      </Before>
      <Actual>
        <Byte>75</Byte>
        <Byte>12</Byte>
      </Actual>
      <After>
        <Byte>32</Byte>
        <Byte>C0</Byte>
        <Byte>32</Byte>
        <Byte>C9</Byte>
        <Byte>88</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movzx edx,byte ptr [rdi+6D]</Description>
      <AddressString>dmc2.exe+25DEE8</AddressString>
      <Before>
        <Byte>48</Byte>
        <Byte>0F</Byte>
        <Byte>BE</Byte>
        <Byte>47</Byte>
        <Byte>38</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>57</Byte>
        <Byte>6D</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8D</Byte>
        <Byte>0C</Byte>
        <Byte>80</Byte>
        <Byte>48</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp byte ptr [rcx+01],02</Description>
      <AddressString>dmc2.exe+25DF19</AddressString>
      <Before>
        <Byte>05</Byte>
        <Byte>1B</Byte>
        <Byte>C3</Byte>
        <Byte>32</Byte>
        <Byte>01</Byte>
      </Before>
      <Actual>
        <Byte>80</Byte>
        <Byte>79</Byte>
        <Byte>01</Byte>
        <Byte>02</Byte>
      </Actual>
      <After>
        <Byte>75</Byte>
        <Byte>12</Byte>
        <Byte>32</Byte>
        <Byte>C0</Byte>
        <Byte>32</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movups [rax-10],xmm1</Description>
      <AddressString>dmc2.exe+5B011</AddressString>
      <Before>
        <Byte>41</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>48</Byte>
        <Byte>F0</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>48</Byte>
        <Byte>F0</Byte>
      </Actual>
      <After>
        <Byte>49</Byte>
        <Byte>83</Byte>
        <Byte>E9</Byte>
        <Byte>01</Byte>
        <Byte>75</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movaps [r10+10],xmm1</Description>
      <AddressString>dmc2.exe+5B0FF</AddressString>
      <Before>
        <Byte>02</Byte>
        <Byte>0F</Byte>
        <Byte>28</Byte>
        <Byte>48</Byte>
        <Byte>10</Byte>
      </Before>
      <Actual>
        <Byte>41</Byte>
        <Byte>0F</Byte>
        <Byte>29</Byte>
        <Byte>4A</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>28</Byte>
        <Byte>40</Byte>
        <Byte>20</Byte>
        <Byte>0F</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movss [rbx+00000094],xmm0</Description>
      <AddressString>dmc2.exe+23DD53</AddressString>
      <Before>
        <Byte>83</Byte>
        <Byte>94</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>83</Byte>
        <Byte>94</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>83</Byte>
        <Byte>A0</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [dmc2.exe+158A331],cl</Description>
      <AddressString>dmc2.exe+460E0</AddressString>
      <Before>
        <Byte>01</Byte>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>48</Byte>
        <Byte>01</Byte>
      </Before>
      <Actual>
        <Byte>88</Byte>
        <Byte>0D</Byte>
        <Byte>4B</Byte>
        <Byte>42</Byte>
        <Byte>54</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>29</Byte>
        <Byte>05</Byte>
        <Byte>53</Byte>
        <Byte>42</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov byte ptr [dmc2.exe+158A330],01</Description>
      <AddressString>dmc2.exe+22DB4D</AddressString>
      <Before>
        <Byte>43</Byte>
        <Byte>3F</Byte>
        <Byte>01</Byte>
        <Byte>33</Byte>
        <Byte>D2</Byte>
      </Before>
      <Actual>
        <Byte>C6</Byte>
        <Byte>05</Byte>
        <Byte>DC</Byte>
        <Byte>C7</Byte>
        <Byte>35</Byte>
        <Byte>01</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>48</Byte>
        <Byte>01</Byte>
        <Byte>48</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [dmc2.exe+158A331],cl</Description>
      <AddressString>dmc2.exe+22DBFA</AddressString>
      <Before>
        <Byte>05</Byte>
        <Byte>3D</Byte>
        <Byte>C6</Byte>
        <Byte>35</Byte>
        <Byte>01</Byte>
      </Before>
      <Actual>
        <Byte>88</Byte>
        <Byte>0D</Byte>
        <Byte>31</Byte>
        <Byte>C7</Byte>
        <Byte>35</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>88</Byte>
        <Byte>0D</Byte>
        <Byte>0A</Byte>
        <Byte>CB</Byte>
        <Byte>35</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp byte ptr [rcx],00</Description>
      <AddressString>dmc2.exe+2D3D16</AddressString>
      <Before>
        <Byte>53</Byte>
        <Byte>48</Byte>
        <Byte>83</Byte>
        <Byte>EC</Byte>
        <Byte>40</Byte>
      </Before>
      <Actual>
        <Byte>80</Byte>
        <Byte>39</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>D9</Byte>
        <Byte>0F</Byte>
        <Byte>84</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp byte ptr [rdi+01],02</Description>
      <AddressString>dmc2.exe+22E017</AddressString>
      <Before>
        <Byte>B8</Byte>
        <Byte>30</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>80</Byte>
        <Byte>7F</Byte>
        <Byte>01</Byte>
        <Byte>02</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>0F</Byte>
        <Byte>45</Byte>
        <Byte>D0</Byte>
        <Byte>48</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp byte ptr [rcx+01],02</Description>
      <AddressString>dmc2.exe+22DF9C</AddressString>
      <Before>
        <Byte>B8</Byte>
        <Byte>30</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>80</Byte>
        <Byte>79</Byte>
        <Byte>01</Byte>
        <Byte>02</Byte>
      </Actual>
      <After>
        <Byte>4C</Byte>
        <Byte>0F</Byte>
        <Byte>45</Byte>
        <Byte>C0</Byte>
        <Byte>48</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [rax],cl</Description>
      <AddressString>dmc2.exe+1DEAE2</AddressString>
      <Before>
        <Byte>05</Byte>
        <Byte>7E</Byte>
        <Byte>33</Byte>
        <Byte>44</Byte>
        <Byte>01</Byte>
      </Before>
      <Actual>
        <Byte>88</Byte>
        <Byte>08</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>C1</Byte>
        <Byte>84</Byte>
        <Byte>C9</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols/>
  <DisassemblerComments>
    <DisassemblerComment>
      <Address>"dmc2.exe"+21AA22</Address>
      <Comment>SHOTGUN INERTIA (3.0)
</Comment>
    </DisassemblerComment>
  </DisassemblerComments>
</CheatTable>
